(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["MapdDraw"] = factory();
	else
		root["MapdDraw"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/* eslint-disable object-curly-spacing*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.simpleHull_2D = exports.Math = exports.Point = exports.PolyLine = exports.Poly = exports.Rect = exports.Circle = exports.Vec2d = exports.BasicStyle = exports.Mat2 = exports.Point2d = exports.Mat2d = exports.AABox2d = exports.DrawEngine = exports.ShapeBuilder = exports.version = undefined;\n\nvar _package = __webpack_require__(30);\n\nObject.defineProperty(exports, \"version\", {\n  enumerable: true,\n  get: function get() {\n    return _package.version;\n  }\n});\n\nvar _glMatrix = __webpack_require__(1);\n\nObject.defineProperty(exports, \"Mat2\", {\n  enumerable: true,\n  get: function get() {\n    return _glMatrix.mat2;\n  }\n});\n\nvar _convexHull = __webpack_require__(14);\n\nObject.defineProperty(exports, \"simpleHull_2D\", {\n  enumerable: true,\n  get: function get() {\n    return _convexHull.simpleHull_2D;\n  }\n});\n\nvar _shapeBuilder = __webpack_require__(19);\n\nvar _shapeBuilder2 = _interopRequireDefault(_shapeBuilder);\n\nvar _drawEngine = __webpack_require__(13);\n\nvar _drawEngine2 = _interopRequireDefault(_drawEngine);\n\nvar _aabox2d = __webpack_require__(2);\n\nvar _AABox2d = _interopRequireWildcard(_aabox2d);\n\nvar _mat2d = __webpack_require__(4);\n\nvar _mat2d2 = _interopRequireDefault(_mat2d);\n\nvar _point2d = __webpack_require__(3);\n\nvar _Point2d = _interopRequireWildcard(_point2d);\n\nvar _basicStyle = __webpack_require__(8);\n\nvar _basicStyle2 = _interopRequireDefault(_basicStyle);\n\nvar _vec2d = __webpack_require__(9);\n\nvar _vec2d2 = _interopRequireDefault(_vec2d);\n\nvar _circle = __webpack_require__(23);\n\nvar _circle2 = _interopRequireDefault(_circle);\n\nvar _rect = __webpack_require__(15);\n\nvar _rect2 = _interopRequireDefault(_rect);\n\nvar _poly = __webpack_require__(25);\n\nvar _poly2 = _interopRequireDefault(_poly);\n\nvar _polyLine = __webpack_require__(10);\n\nvar _polyLine2 = _interopRequireDefault(_polyLine);\n\nvar _point = __webpack_require__(24);\n\nvar _point2 = _interopRequireDefault(_point);\n\nvar _math = __webpack_require__(5);\n\nvar _math2 = _interopRequireDefault(_math);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.ShapeBuilder = _shapeBuilder2.default;\nexports.DrawEngine = _drawEngine2.default;\nexports.AABox2d = _AABox2d;\nexports.Mat2d = _mat2d2.default;\nexports.Point2d = _Point2d;\nexports.BasicStyle = _basicStyle2.default;\nexports.Vec2d = _vec2d2.default;\nexports.Circle = _circle2.default;\nexports.Rect = _rect2.default;\nexports.Poly = _poly2.default;\nexports.PolyLine = _polyLine2.default;\nexports.Point = _point2.default;\nexports.Math = _math2.default;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9tYXBkLWRyYXcuanM/NGY3OSJdLCJuYW1lcyI6WyJ2ZXJzaW9uIiwibWF0MiIsInNpbXBsZUh1bGxfMkQiLCJTaGFwZUJ1aWxkZXIiLCJEcmF3RW5naW5lIiwiQUFCb3gyZCIsIk1hdDJkIiwiUG9pbnQyZCIsIkJhc2ljU3R5bGUiLCJWZWMyZCIsIkNpcmNsZSIsIlJlY3QiLCJQb2x5IiwiUG9seUxpbmUiLCJQb2ludCIsIk1hdGgiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Ozs7Ozs7Ozs7OztvQkFFUUEsTzs7Ozs7Ozs7O3FCQU9BQyxJOzs7Ozs7Ozs7dUJBU0FDLGE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQWREQyxZO1FBQ0FDLFU7UUFDS0MsTztRQUNMQyxLO1FBQ0tDLE87UUFFTEMsVTtRQUNBQyxLO1FBQ0FDLE07UUFDQUMsSTtRQUNBQyxJO1FBQ0FDLFE7UUFDQUMsSztRQUNBQyxJIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBvYmplY3QtY3VybHktc3BhY2luZyovXG5cInVzZSBzdHJpY3RcIlxuXG5leHBvcnQge3ZlcnNpb259IGZyb20gXCIuLi9wYWNrYWdlLmpzb25cIlxuXG5leHBvcnQgU2hhcGVCdWlsZGVyIGZyb20gXCIuL2VuZ2luZS9zaGFwZS1idWlsZGVyXCJcbmV4cG9ydCBEcmF3RW5naW5lIGZyb20gXCIuL2VuZ2luZS9kcmF3LWVuZ2luZVwiXG5leHBvcnQgKiBhcyBBQUJveDJkIGZyb20gXCIuL2NvcmUvYWFib3gyZFwiXG5leHBvcnQgTWF0MmQgZnJvbSBcIi4vY29yZS9tYXQyZFwiXG5leHBvcnQgKiBhcyBQb2ludDJkIGZyb20gXCIuL2NvcmUvcG9pbnQyZFwiXG5leHBvcnQge21hdDIgYXMgTWF0Mn0gZnJvbSBcImdsLW1hdHJpeFwiXG5leHBvcnQgQmFzaWNTdHlsZSBmcm9tIFwiLi9zdHlsZS9iYXNpYy1zdHlsZVwiXG5leHBvcnQgVmVjMmQgZnJvbSBcIi4vY29yZS92ZWMyZFwiXG5leHBvcnQgQ2lyY2xlIGZyb20gXCIuL3NoYXBlcy9jaXJjbGVcIlxuZXhwb3J0IFJlY3QgZnJvbSBcIi4vc2hhcGVzL3JlY3RcIlxuZXhwb3J0IFBvbHkgZnJvbSBcIi4vc2hhcGVzL3BvbHlcIlxuZXhwb3J0IFBvbHlMaW5lIGZyb20gXCIuL3NoYXBlcy9wb2x5LWxpbmVcIlxuZXhwb3J0IFBvaW50IGZyb20gXCIuL3NoYXBlcy9wb2ludFwiXG5leHBvcnQgTWF0aCBmcm9tIFwiLi9tYXRoL21hdGhcIlxuZXhwb3J0IHtzaW1wbGVIdWxsXzJEfSBmcm9tIFwiLi9tYXRoL2NvbnZleC1odWxsXCJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL21hcGQtZHJhdy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/*!\n@fileoverview gl-matrix - High performance matrix and vector operations\n@author Brandon Jones\n@author Colin MacKenzie IV\n@version 2.7.0\n\nCopyright (c) 2015-2018, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n!function(t,n){if(true)module.exports=n();else if(\"function\"==typeof define&&define.amd)define([],n);else{var r=n();for(var a in r)(\"object\"==typeof exports?exports:t)[a]=r[a]}}(\"undefined\"!=typeof self?self:this,function(){return function(t){var n={};function r(a){if(n[a])return n[a].exports;var e=n[a]={i:a,l:!1,exports:{}};return t[a].call(e.exports,e,e.exports,r),e.l=!0,e.exports}return r.m=t,r.c=n,r.d=function(t,n,a){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:a})},r.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&\"object\"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,\"default\",{enumerable:!0,value:t}),2&n&&\"string\"!=typeof t)for(var e in t)r.d(a,e,function(n){return t[n]}.bind(null,e));return a},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,\"a\",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p=\"\",r(r.s=10)}([function(t,n,r){\"use strict\";Object.defineProperty(n,\"__esModule\",{value:!0}),n.setMatrixArrayType=function(t){n.ARRAY_TYPE=t},n.toRadian=function(t){return t*e},n.equals=function(t,n){return Math.abs(t-n)<=a*Math.max(1,Math.abs(t),Math.abs(n))};var a=n.EPSILON=1e-6;n.ARRAY_TYPE=\"undefined\"!=typeof Float32Array?Float32Array:Array,n.RANDOM=Math.random;var e=Math.PI/180},function(t,n,r){\"use strict\";Object.defineProperty(n,\"__esModule\",{value:!0}),n.forEach=n.sqrLen=n.len=n.sqrDist=n.dist=n.div=n.mul=n.sub=void 0,n.create=e,n.clone=function(t){var n=new a.ARRAY_TYPE(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n},n.fromValues=function(t,n,r,e){var u=new a.ARRAY_TYPE(4);return u[0]=t,u[1]=n,u[2]=r,u[3]=e,u},n.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t},n.set=function(t,n,r,a,e){return t[0]=n,t[1]=r,t[2]=a,t[3]=e,t},n.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t},n.subtract=u,n.multiply=o,n.divide=i,n.ceil=function(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t[3]=Math.ceil(n[3]),t},n.floor=function(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t[3]=Math.floor(n[3]),t},n.min=function(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t[3]=Math.min(n[3],r[3]),t},n.max=function(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t[3]=Math.max(n[3],r[3]),t},n.round=function(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t[3]=Math.round(n[3]),t},n.scale=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t},n.scaleAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t[2]=n[2]+r[2]*a,t[3]=n[3]+r[3]*a,t},n.distance=s,n.squaredDistance=c,n.length=f,n.squaredLength=M,n.negate=function(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=-n[3],t},n.inverse=function(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t[3]=1/n[3],t},n.normalize=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=r*r+a*a+e*e+u*u;o>0&&(o=1/Math.sqrt(o),t[0]=r*o,t[1]=a*o,t[2]=e*o,t[3]=u*o);return t},n.dot=function(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]+t[3]*n[3]},n.lerp=function(t,n,r,a){var e=n[0],u=n[1],o=n[2],i=n[3];return t[0]=e+a*(r[0]-e),t[1]=u+a*(r[1]-u),t[2]=o+a*(r[2]-o),t[3]=i+a*(r[3]-i),t},n.random=function(t,n){var r,e,u,o,i,s;n=n||1;do{r=2*a.RANDOM()-1,e=2*a.RANDOM()-1,i=r*r+e*e}while(i>=1);do{u=2*a.RANDOM()-1,o=2*a.RANDOM()-1,s=u*u+o*o}while(s>=1);var c=Math.sqrt((1-i)/s);return t[0]=n*r,t[1]=n*e,t[2]=n*u*c,t[3]=n*o*c,t},n.transformMat4=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3];return t[0]=r[0]*a+r[4]*e+r[8]*u+r[12]*o,t[1]=r[1]*a+r[5]*e+r[9]*u+r[13]*o,t[2]=r[2]*a+r[6]*e+r[10]*u+r[14]*o,t[3]=r[3]*a+r[7]*e+r[11]*u+r[15]*o,t},n.transformQuat=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=r[0],i=r[1],s=r[2],c=r[3],f=c*a+i*u-s*e,M=c*e+s*a-o*u,h=c*u+o*e-i*a,l=-o*a-i*e-s*u;return t[0]=f*c+l*-o+M*-s-h*-i,t[1]=M*c+l*-i+h*-o-f*-s,t[2]=h*c+l*-s+f*-i-M*-o,t[3]=n[3],t},n.str=function(t){return\"vec4(\"+t[0]+\", \"+t[1]+\", \"+t[2]+\", \"+t[3]+\")\"},n.exactEquals=function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]},n.equals=function(t,n){var r=t[0],e=t[1],u=t[2],o=t[3],i=n[0],s=n[1],c=n[2],f=n[3];return Math.abs(r-i)<=a.EPSILON*Math.max(1,Math.abs(r),Math.abs(i))&&Math.abs(e-s)<=a.EPSILON*Math.max(1,Math.abs(e),Math.abs(s))&&Math.abs(u-c)<=a.EPSILON*Math.max(1,Math.abs(u),Math.abs(c))&&Math.abs(o-f)<=a.EPSILON*Math.max(1,Math.abs(o),Math.abs(f))};var a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}(r(0));function e(){var t=new a.ARRAY_TYPE(4);return a.ARRAY_TYPE!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}function u(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t}function o(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t[3]=n[3]*r[3],t}function i(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t[3]=n[3]/r[3],t}function s(t,n){var r=n[0]-t[0],a=n[1]-t[1],e=n[2]-t[2],u=n[3]-t[3];return Math.sqrt(r*r+a*a+e*e+u*u)}function c(t,n){var r=n[0]-t[0],a=n[1]-t[1],e=n[2]-t[2],u=n[3]-t[3];return r*r+a*a+e*e+u*u}function f(t){var n=t[0],r=t[1],a=t[2],e=t[3];return Math.sqrt(n*n+r*r+a*a+e*e)}function M(t){var n=t[0],r=t[1],a=t[2],e=t[3];return n*n+r*r+a*a+e*e}n.sub=u,n.mul=o,n.div=i,n.dist=s,n.sqrDist=c,n.len=f,n.sqrLen=M,n.forEach=function(){var t=e();return function(n,r,a,e,u,o){var i=void 0,s=void 0;for(r||(r=4),a||(a=0),s=e?Math.min(e*r+a,n.length):n.length,i=a;i<s;i+=r)t[0]=n[i],t[1]=n[i+1],t[2]=n[i+2],t[3]=n[i+3],u(t,t,o),n[i]=t[0],n[i+1]=t[1],n[i+2]=t[2],n[i+3]=t[3];return n}}()},function(t,n,r){\"use strict\";Object.defineProperty(n,\"__esModule\",{value:!0}),n.forEach=n.sqrLen=n.len=n.sqrDist=n.dist=n.div=n.mul=n.sub=void 0,n.create=e,n.clone=function(t){var n=new a.ARRAY_TYPE(3);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n},n.length=u,n.fromValues=o,n.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t},n.set=function(t,n,r,a){return t[0]=n,t[1]=r,t[2]=a,t},n.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t},n.subtract=i,n.multiply=s,n.divide=c,n.ceil=function(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t},n.floor=function(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t},n.min=function(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t},n.max=function(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t},n.round=function(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t},n.scale=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t},n.scaleAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t[2]=n[2]+r[2]*a,t},n.distance=f,n.squaredDistance=M,n.squaredLength=h,n.negate=function(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t},n.inverse=function(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t},n.normalize=l,n.dot=v,n.cross=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=r[0],i=r[1],s=r[2];return t[0]=e*s-u*i,t[1]=u*o-a*s,t[2]=a*i-e*o,t},n.lerp=function(t,n,r,a){var e=n[0],u=n[1],o=n[2];return t[0]=e+a*(r[0]-e),t[1]=u+a*(r[1]-u),t[2]=o+a*(r[2]-o),t},n.hermite=function(t,n,r,a,e,u){var o=u*u,i=o*(2*u-3)+1,s=o*(u-2)+u,c=o*(u-1),f=o*(3-2*u);return t[0]=n[0]*i+r[0]*s+a[0]*c+e[0]*f,t[1]=n[1]*i+r[1]*s+a[1]*c+e[1]*f,t[2]=n[2]*i+r[2]*s+a[2]*c+e[2]*f,t},n.bezier=function(t,n,r,a,e,u){var o=1-u,i=o*o,s=u*u,c=i*o,f=3*u*i,M=3*s*o,h=s*u;return t[0]=n[0]*c+r[0]*f+a[0]*M+e[0]*h,t[1]=n[1]*c+r[1]*f+a[1]*M+e[1]*h,t[2]=n[2]*c+r[2]*f+a[2]*M+e[2]*h,t},n.random=function(t,n){n=n||1;var r=2*a.RANDOM()*Math.PI,e=2*a.RANDOM()-1,u=Math.sqrt(1-e*e)*n;return t[0]=Math.cos(r)*u,t[1]=Math.sin(r)*u,t[2]=e*n,t},n.transformMat4=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=r[3]*a+r[7]*e+r[11]*u+r[15];return o=o||1,t[0]=(r[0]*a+r[4]*e+r[8]*u+r[12])/o,t[1]=(r[1]*a+r[5]*e+r[9]*u+r[13])/o,t[2]=(r[2]*a+r[6]*e+r[10]*u+r[14])/o,t},n.transformMat3=function(t,n,r){var a=n[0],e=n[1],u=n[2];return t[0]=a*r[0]+e*r[3]+u*r[6],t[1]=a*r[1]+e*r[4]+u*r[7],t[2]=a*r[2]+e*r[5]+u*r[8],t},n.transformQuat=function(t,n,r){var a=r[0],e=r[1],u=r[2],o=r[3],i=n[0],s=n[1],c=n[2],f=e*c-u*s,M=u*i-a*c,h=a*s-e*i,l=e*h-u*M,v=u*f-a*h,d=a*M-e*f,b=2*o;return f*=b,M*=b,h*=b,l*=2,v*=2,d*=2,t[0]=i+f+l,t[1]=s+M+v,t[2]=c+h+d,t},n.rotateX=function(t,n,r,a){var e=[],u=[];return e[0]=n[0]-r[0],e[1]=n[1]-r[1],e[2]=n[2]-r[2],u[0]=e[0],u[1]=e[1]*Math.cos(a)-e[2]*Math.sin(a),u[2]=e[1]*Math.sin(a)+e[2]*Math.cos(a),t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t},n.rotateY=function(t,n,r,a){var e=[],u=[];return e[0]=n[0]-r[0],e[1]=n[1]-r[1],e[2]=n[2]-r[2],u[0]=e[2]*Math.sin(a)+e[0]*Math.cos(a),u[1]=e[1],u[2]=e[2]*Math.cos(a)-e[0]*Math.sin(a),t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t},n.rotateZ=function(t,n,r,a){var e=[],u=[];return e[0]=n[0]-r[0],e[1]=n[1]-r[1],e[2]=n[2]-r[2],u[0]=e[0]*Math.cos(a)-e[1]*Math.sin(a),u[1]=e[0]*Math.sin(a)+e[1]*Math.cos(a),u[2]=e[2],t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t},n.angle=function(t,n){var r=o(t[0],t[1],t[2]),a=o(n[0],n[1],n[2]);l(r,r),l(a,a);var e=v(r,a);return e>1?0:e<-1?Math.PI:Math.acos(e)},n.str=function(t){return\"vec3(\"+t[0]+\", \"+t[1]+\", \"+t[2]+\")\"},n.exactEquals=function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]},n.equals=function(t,n){var r=t[0],e=t[1],u=t[2],o=n[0],i=n[1],s=n[2];return Math.abs(r-o)<=a.EPSILON*Math.max(1,Math.abs(r),Math.abs(o))&&Math.abs(e-i)<=a.EPSILON*Math.max(1,Math.abs(e),Math.abs(i))&&Math.abs(u-s)<=a.EPSILON*Math.max(1,Math.abs(u),Math.abs(s))};var a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}(r(0));function e(){var t=new a.ARRAY_TYPE(3);return a.ARRAY_TYPE!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function u(t){var n=t[0],r=t[1],a=t[2];return Math.sqrt(n*n+r*r+a*a)}function o(t,n,r){var e=new a.ARRAY_TYPE(3);return e[0]=t,e[1]=n,e[2]=r,e}function i(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t}function s(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t}function c(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t}function f(t,n){var r=n[0]-t[0],a=n[1]-t[1],e=n[2]-t[2];return Math.sqrt(r*r+a*a+e*e)}function M(t,n){var r=n[0]-t[0],a=n[1]-t[1],e=n[2]-t[2];return r*r+a*a+e*e}function h(t){var n=t[0],r=t[1],a=t[2];return n*n+r*r+a*a}function l(t,n){var r=n[0],a=n[1],e=n[2],u=r*r+a*a+e*e;return u>0&&(u=1/Math.sqrt(u),t[0]=n[0]*u,t[1]=n[1]*u,t[2]=n[2]*u),t}function v(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}n.sub=i,n.mul=s,n.div=c,n.dist=f,n.sqrDist=M,n.len=u,n.sqrLen=h,n.forEach=function(){var t=e();return function(n,r,a,e,u,o){var i=void 0,s=void 0;for(r||(r=3),a||(a=0),s=e?Math.min(e*r+a,n.length):n.length,i=a;i<s;i+=r)t[0]=n[i],t[1]=n[i+1],t[2]=n[i+2],u(t,t,o),n[i]=t[0],n[i+1]=t[1],n[i+2]=t[2];return n}}()},function(t,n,r){\"use strict\";Object.defineProperty(n,\"__esModule\",{value:!0}),n.setAxes=n.sqlerp=n.rotationTo=n.equals=n.exactEquals=n.normalize=n.sqrLen=n.squaredLength=n.len=n.length=n.lerp=n.dot=n.scale=n.mul=n.add=n.set=n.copy=n.fromValues=n.clone=void 0,n.create=s,n.identity=function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t},n.setAxisAngle=c,n.getAxisAngle=function(t,n){var r=2*Math.acos(n[3]),e=Math.sin(r/2);e>a.EPSILON?(t[0]=n[0]/e,t[1]=n[1]/e,t[2]=n[2]/e):(t[0]=1,t[1]=0,t[2]=0);return r},n.multiply=f,n.rotateX=function(t,n,r){r*=.5;var a=n[0],e=n[1],u=n[2],o=n[3],i=Math.sin(r),s=Math.cos(r);return t[0]=a*s+o*i,t[1]=e*s+u*i,t[2]=u*s-e*i,t[3]=o*s-a*i,t},n.rotateY=function(t,n,r){r*=.5;var a=n[0],e=n[1],u=n[2],o=n[3],i=Math.sin(r),s=Math.cos(r);return t[0]=a*s-u*i,t[1]=e*s+o*i,t[2]=u*s+a*i,t[3]=o*s-e*i,t},n.rotateZ=function(t,n,r){r*=.5;var a=n[0],e=n[1],u=n[2],o=n[3],i=Math.sin(r),s=Math.cos(r);return t[0]=a*s+e*i,t[1]=e*s-a*i,t[2]=u*s+o*i,t[3]=o*s-u*i,t},n.calculateW=function(t,n){var r=n[0],a=n[1],e=n[2];return t[0]=r,t[1]=a,t[2]=e,t[3]=Math.sqrt(Math.abs(1-r*r-a*a-e*e)),t},n.slerp=M,n.random=function(t){var n=a.RANDOM(),r=a.RANDOM(),e=a.RANDOM(),u=Math.sqrt(1-n),o=Math.sqrt(n);return t[0]=u*Math.sin(2*Math.PI*r),t[1]=u*Math.cos(2*Math.PI*r),t[2]=o*Math.sin(2*Math.PI*e),t[3]=o*Math.cos(2*Math.PI*e),t},n.invert=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=r*r+a*a+e*e+u*u,i=o?1/o:0;return t[0]=-r*i,t[1]=-a*i,t[2]=-e*i,t[3]=u*i,t},n.conjugate=function(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t},n.fromMat3=h,n.fromEuler=function(t,n,r,a){var e=.5*Math.PI/180;n*=e,r*=e,a*=e;var u=Math.sin(n),o=Math.cos(n),i=Math.sin(r),s=Math.cos(r),c=Math.sin(a),f=Math.cos(a);return t[0]=u*s*f-o*i*c,t[1]=o*i*f+u*s*c,t[2]=o*s*c-u*i*f,t[3]=o*s*f+u*i*c,t},n.str=function(t){return\"quat(\"+t[0]+\", \"+t[1]+\", \"+t[2]+\", \"+t[3]+\")\"};var a=i(r(0)),e=i(r(5)),u=i(r(2)),o=i(r(1));function i(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}function s(){var t=new a.ARRAY_TYPE(4);return a.ARRAY_TYPE!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function c(t,n,r){r*=.5;var a=Math.sin(r);return t[0]=a*n[0],t[1]=a*n[1],t[2]=a*n[2],t[3]=Math.cos(r),t}function f(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=r[0],s=r[1],c=r[2],f=r[3];return t[0]=a*f+o*i+e*c-u*s,t[1]=e*f+o*s+u*i-a*c,t[2]=u*f+o*c+a*s-e*i,t[3]=o*f-a*i-e*s-u*c,t}function M(t,n,r,e){var u=n[0],o=n[1],i=n[2],s=n[3],c=r[0],f=r[1],M=r[2],h=r[3],l=void 0,v=void 0,d=void 0,b=void 0,m=void 0;return(v=u*c+o*f+i*M+s*h)<0&&(v=-v,c=-c,f=-f,M=-M,h=-h),1-v>a.EPSILON?(l=Math.acos(v),d=Math.sin(l),b=Math.sin((1-e)*l)/d,m=Math.sin(e*l)/d):(b=1-e,m=e),t[0]=b*u+m*c,t[1]=b*o+m*f,t[2]=b*i+m*M,t[3]=b*s+m*h,t}function h(t,n){var r=n[0]+n[4]+n[8],a=void 0;if(r>0)a=Math.sqrt(r+1),t[3]=.5*a,a=.5/a,t[0]=(n[5]-n[7])*a,t[1]=(n[6]-n[2])*a,t[2]=(n[1]-n[3])*a;else{var e=0;n[4]>n[0]&&(e=1),n[8]>n[3*e+e]&&(e=2);var u=(e+1)%3,o=(e+2)%3;a=Math.sqrt(n[3*e+e]-n[3*u+u]-n[3*o+o]+1),t[e]=.5*a,a=.5/a,t[3]=(n[3*u+o]-n[3*o+u])*a,t[u]=(n[3*u+e]+n[3*e+u])*a,t[o]=(n[3*o+e]+n[3*e+o])*a}return t}n.clone=o.clone,n.fromValues=o.fromValues,n.copy=o.copy,n.set=o.set,n.add=o.add,n.mul=f,n.scale=o.scale,n.dot=o.dot,n.lerp=o.lerp;var l=n.length=o.length,v=(n.len=l,n.squaredLength=o.squaredLength),d=(n.sqrLen=v,n.normalize=o.normalize);n.exactEquals=o.exactEquals,n.equals=o.equals,n.rotationTo=function(){var t=u.create(),n=u.fromValues(1,0,0),r=u.fromValues(0,1,0);return function(a,e,o){var i=u.dot(e,o);return i<-.999999?(u.cross(t,n,e),u.len(t)<1e-6&&u.cross(t,r,e),u.normalize(t,t),c(a,t,Math.PI),a):i>.999999?(a[0]=0,a[1]=0,a[2]=0,a[3]=1,a):(u.cross(t,e,o),a[0]=t[0],a[1]=t[1],a[2]=t[2],a[3]=1+i,d(a,a))}}(),n.sqlerp=function(){var t=s(),n=s();return function(r,a,e,u,o,i){return M(t,a,o,i),M(n,e,u,i),M(r,t,n,2*i*(1-i)),r}}(),n.setAxes=function(){var t=e.create();return function(n,r,a,e){return t[0]=a[0],t[3]=a[1],t[6]=a[2],t[1]=e[0],t[4]=e[1],t[7]=e[2],t[2]=-r[0],t[5]=-r[1],t[8]=-r[2],d(n,h(n,t))}}()},function(t,n,r){\"use strict\";Object.defineProperty(n,\"__esModule\",{value:!0}),n.sub=n.mul=void 0,n.create=function(){var t=new a.ARRAY_TYPE(16);a.ARRAY_TYPE!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0);return t[0]=1,t[5]=1,t[10]=1,t[15]=1,t},n.clone=function(t){var n=new a.ARRAY_TYPE(16);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n},n.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t},n.fromValues=function(t,n,r,e,u,o,i,s,c,f,M,h,l,v,d,b){var m=new a.ARRAY_TYPE(16);return m[0]=t,m[1]=n,m[2]=r,m[3]=e,m[4]=u,m[5]=o,m[6]=i,m[7]=s,m[8]=c,m[9]=f,m[10]=M,m[11]=h,m[12]=l,m[13]=v,m[14]=d,m[15]=b,m},n.set=function(t,n,r,a,e,u,o,i,s,c,f,M,h,l,v,d,b){return t[0]=n,t[1]=r,t[2]=a,t[3]=e,t[4]=u,t[5]=o,t[6]=i,t[7]=s,t[8]=c,t[9]=f,t[10]=M,t[11]=h,t[12]=l,t[13]=v,t[14]=d,t[15]=b,t},n.identity=e,n.transpose=function(t,n){if(t===n){var r=n[1],a=n[2],e=n[3],u=n[6],o=n[7],i=n[11];t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=r,t[6]=n[9],t[7]=n[13],t[8]=a,t[9]=u,t[11]=n[14],t[12]=e,t[13]=o,t[14]=i}else t[0]=n[0],t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=n[1],t[5]=n[5],t[6]=n[9],t[7]=n[13],t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=n[14],t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15];return t},n.invert=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],s=n[6],c=n[7],f=n[8],M=n[9],h=n[10],l=n[11],v=n[12],d=n[13],b=n[14],m=n[15],p=r*i-a*o,P=r*s-e*o,A=r*c-u*o,E=a*s-e*i,O=a*c-u*i,R=e*c-u*s,y=f*d-M*v,q=f*b-h*v,x=f*m-l*v,_=M*b-h*d,Y=M*m-l*d,L=h*m-l*b,S=p*L-P*Y+A*_+E*x-O*q+R*y;if(!S)return null;return S=1/S,t[0]=(i*L-s*Y+c*_)*S,t[1]=(e*Y-a*L-u*_)*S,t[2]=(d*R-b*O+m*E)*S,t[3]=(h*O-M*R-l*E)*S,t[4]=(s*x-o*L-c*q)*S,t[5]=(r*L-e*x+u*q)*S,t[6]=(b*A-v*R-m*P)*S,t[7]=(f*R-h*A+l*P)*S,t[8]=(o*Y-i*x+c*y)*S,t[9]=(a*x-r*Y-u*y)*S,t[10]=(v*O-d*A+m*p)*S,t[11]=(M*A-f*O-l*p)*S,t[12]=(i*q-o*_-s*y)*S,t[13]=(r*_-a*q+e*y)*S,t[14]=(d*P-v*E-b*p)*S,t[15]=(f*E-M*P+h*p)*S,t},n.adjoint=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],s=n[6],c=n[7],f=n[8],M=n[9],h=n[10],l=n[11],v=n[12],d=n[13],b=n[14],m=n[15];return t[0]=i*(h*m-l*b)-M*(s*m-c*b)+d*(s*l-c*h),t[1]=-(a*(h*m-l*b)-M*(e*m-u*b)+d*(e*l-u*h)),t[2]=a*(s*m-c*b)-i*(e*m-u*b)+d*(e*c-u*s),t[3]=-(a*(s*l-c*h)-i*(e*l-u*h)+M*(e*c-u*s)),t[4]=-(o*(h*m-l*b)-f*(s*m-c*b)+v*(s*l-c*h)),t[5]=r*(h*m-l*b)-f*(e*m-u*b)+v*(e*l-u*h),t[6]=-(r*(s*m-c*b)-o*(e*m-u*b)+v*(e*c-u*s)),t[7]=r*(s*l-c*h)-o*(e*l-u*h)+f*(e*c-u*s),t[8]=o*(M*m-l*d)-f*(i*m-c*d)+v*(i*l-c*M),t[9]=-(r*(M*m-l*d)-f*(a*m-u*d)+v*(a*l-u*M)),t[10]=r*(i*m-c*d)-o*(a*m-u*d)+v*(a*c-u*i),t[11]=-(r*(i*l-c*M)-o*(a*l-u*M)+f*(a*c-u*i)),t[12]=-(o*(M*b-h*d)-f*(i*b-s*d)+v*(i*h-s*M)),t[13]=r*(M*b-h*d)-f*(a*b-e*d)+v*(a*h-e*M),t[14]=-(r*(i*b-s*d)-o*(a*b-e*d)+v*(a*s-e*i)),t[15]=r*(i*h-s*M)-o*(a*h-e*M)+f*(a*s-e*i),t},n.determinant=function(t){var n=t[0],r=t[1],a=t[2],e=t[3],u=t[4],o=t[5],i=t[6],s=t[7],c=t[8],f=t[9],M=t[10],h=t[11],l=t[12],v=t[13],d=t[14],b=t[15];return(n*o-r*u)*(M*b-h*d)-(n*i-a*u)*(f*b-h*v)+(n*s-e*u)*(f*d-M*v)+(r*i-a*o)*(c*b-h*l)-(r*s-e*o)*(c*d-M*l)+(a*s-e*i)*(c*v-f*l)},n.multiply=u,n.translate=function(t,n,r){var a=r[0],e=r[1],u=r[2],o=void 0,i=void 0,s=void 0,c=void 0,f=void 0,M=void 0,h=void 0,l=void 0,v=void 0,d=void 0,b=void 0,m=void 0;n===t?(t[12]=n[0]*a+n[4]*e+n[8]*u+n[12],t[13]=n[1]*a+n[5]*e+n[9]*u+n[13],t[14]=n[2]*a+n[6]*e+n[10]*u+n[14],t[15]=n[3]*a+n[7]*e+n[11]*u+n[15]):(o=n[0],i=n[1],s=n[2],c=n[3],f=n[4],M=n[5],h=n[6],l=n[7],v=n[8],d=n[9],b=n[10],m=n[11],t[0]=o,t[1]=i,t[2]=s,t[3]=c,t[4]=f,t[5]=M,t[6]=h,t[7]=l,t[8]=v,t[9]=d,t[10]=b,t[11]=m,t[12]=o*a+f*e+v*u+n[12],t[13]=i*a+M*e+d*u+n[13],t[14]=s*a+h*e+b*u+n[14],t[15]=c*a+l*e+m*u+n[15]);return t},n.scale=function(t,n,r){var a=r[0],e=r[1],u=r[2];return t[0]=n[0]*a,t[1]=n[1]*a,t[2]=n[2]*a,t[3]=n[3]*a,t[4]=n[4]*e,t[5]=n[5]*e,t[6]=n[6]*e,t[7]=n[7]*e,t[8]=n[8]*u,t[9]=n[9]*u,t[10]=n[10]*u,t[11]=n[11]*u,t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t},n.rotate=function(t,n,r,e){var u=e[0],o=e[1],i=e[2],s=Math.sqrt(u*u+o*o+i*i),c=void 0,f=void 0,M=void 0,h=void 0,l=void 0,v=void 0,d=void 0,b=void 0,m=void 0,p=void 0,P=void 0,A=void 0,E=void 0,O=void 0,R=void 0,y=void 0,q=void 0,x=void 0,_=void 0,Y=void 0,L=void 0,S=void 0,w=void 0,I=void 0;if(s<a.EPSILON)return null;u*=s=1/s,o*=s,i*=s,c=Math.sin(r),f=Math.cos(r),M=1-f,h=n[0],l=n[1],v=n[2],d=n[3],b=n[4],m=n[5],p=n[6],P=n[7],A=n[8],E=n[9],O=n[10],R=n[11],y=u*u*M+f,q=o*u*M+i*c,x=i*u*M-o*c,_=u*o*M-i*c,Y=o*o*M+f,L=i*o*M+u*c,S=u*i*M+o*c,w=o*i*M-u*c,I=i*i*M+f,t[0]=h*y+b*q+A*x,t[1]=l*y+m*q+E*x,t[2]=v*y+p*q+O*x,t[3]=d*y+P*q+R*x,t[4]=h*_+b*Y+A*L,t[5]=l*_+m*Y+E*L,t[6]=v*_+p*Y+O*L,t[7]=d*_+P*Y+R*L,t[8]=h*S+b*w+A*I,t[9]=l*S+m*w+E*I,t[10]=v*S+p*w+O*I,t[11]=d*S+P*w+R*I,n!==t&&(t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]);return t},n.rotateX=function(t,n,r){var a=Math.sin(r),e=Math.cos(r),u=n[4],o=n[5],i=n[6],s=n[7],c=n[8],f=n[9],M=n[10],h=n[11];n!==t&&(t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]);return t[4]=u*e+c*a,t[5]=o*e+f*a,t[6]=i*e+M*a,t[7]=s*e+h*a,t[8]=c*e-u*a,t[9]=f*e-o*a,t[10]=M*e-i*a,t[11]=h*e-s*a,t},n.rotateY=function(t,n,r){var a=Math.sin(r),e=Math.cos(r),u=n[0],o=n[1],i=n[2],s=n[3],c=n[8],f=n[9],M=n[10],h=n[11];n!==t&&(t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]);return t[0]=u*e-c*a,t[1]=o*e-f*a,t[2]=i*e-M*a,t[3]=s*e-h*a,t[8]=u*a+c*e,t[9]=o*a+f*e,t[10]=i*a+M*e,t[11]=s*a+h*e,t},n.rotateZ=function(t,n,r){var a=Math.sin(r),e=Math.cos(r),u=n[0],o=n[1],i=n[2],s=n[3],c=n[4],f=n[5],M=n[6],h=n[7];n!==t&&(t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]);return t[0]=u*e+c*a,t[1]=o*e+f*a,t[2]=i*e+M*a,t[3]=s*e+h*a,t[4]=c*e-u*a,t[5]=f*e-o*a,t[6]=M*e-i*a,t[7]=h*e-s*a,t},n.fromTranslation=function(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t},n.fromScaling=function(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=n[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},n.fromRotation=function(t,n,r){var e=r[0],u=r[1],o=r[2],i=Math.sqrt(e*e+u*u+o*o),s=void 0,c=void 0,f=void 0;if(i<a.EPSILON)return null;return e*=i=1/i,u*=i,o*=i,s=Math.sin(n),c=Math.cos(n),f=1-c,t[0]=e*e*f+c,t[1]=u*e*f+o*s,t[2]=o*e*f-u*s,t[3]=0,t[4]=e*u*f-o*s,t[5]=u*u*f+c,t[6]=o*u*f+e*s,t[7]=0,t[8]=e*o*f+u*s,t[9]=u*o*f-e*s,t[10]=o*o*f+c,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},n.fromXRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},n.fromYRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=a,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},n.fromZRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=a,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},n.fromRotationTranslation=o,n.fromQuat2=function(t,n){var r=new a.ARRAY_TYPE(3),e=-n[0],u=-n[1],i=-n[2],s=n[3],c=n[4],f=n[5],M=n[6],h=n[7],l=e*e+u*u+i*i+s*s;l>0?(r[0]=2*(c*s+h*e+f*i-M*u)/l,r[1]=2*(f*s+h*u+M*e-c*i)/l,r[2]=2*(M*s+h*i+c*u-f*e)/l):(r[0]=2*(c*s+h*e+f*i-M*u),r[1]=2*(f*s+h*u+M*e-c*i),r[2]=2*(M*s+h*i+c*u-f*e));return o(t,n,r),t},n.getTranslation=function(t,n){return t[0]=n[12],t[1]=n[13],t[2]=n[14],t},n.getScaling=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[4],o=n[5],i=n[6],s=n[8],c=n[9],f=n[10];return t[0]=Math.sqrt(r*r+a*a+e*e),t[1]=Math.sqrt(u*u+o*o+i*i),t[2]=Math.sqrt(s*s+c*c+f*f),t},n.getRotation=function(t,n){var r=n[0]+n[5]+n[10],a=0;r>0?(a=2*Math.sqrt(r+1),t[3]=.25*a,t[0]=(n[6]-n[9])/a,t[1]=(n[8]-n[2])/a,t[2]=(n[1]-n[4])/a):n[0]>n[5]&&n[0]>n[10]?(a=2*Math.sqrt(1+n[0]-n[5]-n[10]),t[3]=(n[6]-n[9])/a,t[0]=.25*a,t[1]=(n[1]+n[4])/a,t[2]=(n[8]+n[2])/a):n[5]>n[10]?(a=2*Math.sqrt(1+n[5]-n[0]-n[10]),t[3]=(n[8]-n[2])/a,t[0]=(n[1]+n[4])/a,t[1]=.25*a,t[2]=(n[6]+n[9])/a):(a=2*Math.sqrt(1+n[10]-n[0]-n[5]),t[3]=(n[1]-n[4])/a,t[0]=(n[8]+n[2])/a,t[1]=(n[6]+n[9])/a,t[2]=.25*a);return t},n.fromRotationTranslationScale=function(t,n,r,a){var e=n[0],u=n[1],o=n[2],i=n[3],s=e+e,c=u+u,f=o+o,M=e*s,h=e*c,l=e*f,v=u*c,d=u*f,b=o*f,m=i*s,p=i*c,P=i*f,A=a[0],E=a[1],O=a[2];return t[0]=(1-(v+b))*A,t[1]=(h+P)*A,t[2]=(l-p)*A,t[3]=0,t[4]=(h-P)*E,t[5]=(1-(M+b))*E,t[6]=(d+m)*E,t[7]=0,t[8]=(l+p)*O,t[9]=(d-m)*O,t[10]=(1-(M+v))*O,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t},n.fromRotationTranslationScaleOrigin=function(t,n,r,a,e){var u=n[0],o=n[1],i=n[2],s=n[3],c=u+u,f=o+o,M=i+i,h=u*c,l=u*f,v=u*M,d=o*f,b=o*M,m=i*M,p=s*c,P=s*f,A=s*M,E=a[0],O=a[1],R=a[2],y=e[0],q=e[1],x=e[2],_=(1-(d+m))*E,Y=(l+A)*E,L=(v-P)*E,S=(l-A)*O,w=(1-(h+m))*O,I=(b+p)*O,N=(v+P)*R,g=(b-p)*R,T=(1-(h+d))*R;return t[0]=_,t[1]=Y,t[2]=L,t[3]=0,t[4]=S,t[5]=w,t[6]=I,t[7]=0,t[8]=N,t[9]=g,t[10]=T,t[11]=0,t[12]=r[0]+y-(_*y+S*q+N*x),t[13]=r[1]+q-(Y*y+w*q+g*x),t[14]=r[2]+x-(L*y+I*q+T*x),t[15]=1,t},n.fromQuat=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=r+r,i=a+a,s=e+e,c=r*o,f=a*o,M=a*i,h=e*o,l=e*i,v=e*s,d=u*o,b=u*i,m=u*s;return t[0]=1-M-v,t[1]=f+m,t[2]=h-b,t[3]=0,t[4]=f-m,t[5]=1-c-v,t[6]=l+d,t[7]=0,t[8]=h+b,t[9]=l-d,t[10]=1-c-M,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},n.frustum=function(t,n,r,a,e,u,o){var i=1/(r-n),s=1/(e-a),c=1/(u-o);return t[0]=2*u*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*u*s,t[6]=0,t[7]=0,t[8]=(r+n)*i,t[9]=(e+a)*s,t[10]=(o+u)*c,t[11]=-1,t[12]=0,t[13]=0,t[14]=o*u*2*c,t[15]=0,t},n.perspective=function(t,n,r,a,e){var u=1/Math.tan(n/2),o=void 0;t[0]=u/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=u,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=e&&e!==1/0?(o=1/(a-e),t[10]=(e+a)*o,t[14]=2*e*a*o):(t[10]=-1,t[14]=-2*a);return t},n.perspectiveFromFieldOfView=function(t,n,r,a){var e=Math.tan(n.upDegrees*Math.PI/180),u=Math.tan(n.downDegrees*Math.PI/180),o=Math.tan(n.leftDegrees*Math.PI/180),i=Math.tan(n.rightDegrees*Math.PI/180),s=2/(o+i),c=2/(e+u);return t[0]=s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=c,t[6]=0,t[7]=0,t[8]=-(o-i)*s*.5,t[9]=(e-u)*c*.5,t[10]=a/(r-a),t[11]=-1,t[12]=0,t[13]=0,t[14]=a*r/(r-a),t[15]=0,t},n.ortho=function(t,n,r,a,e,u,o){var i=1/(n-r),s=1/(a-e),c=1/(u-o);return t[0]=-2*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*c,t[11]=0,t[12]=(n+r)*i,t[13]=(e+a)*s,t[14]=(o+u)*c,t[15]=1,t},n.lookAt=function(t,n,r,u){var o=void 0,i=void 0,s=void 0,c=void 0,f=void 0,M=void 0,h=void 0,l=void 0,v=void 0,d=void 0,b=n[0],m=n[1],p=n[2],P=u[0],A=u[1],E=u[2],O=r[0],R=r[1],y=r[2];if(Math.abs(b-O)<a.EPSILON&&Math.abs(m-R)<a.EPSILON&&Math.abs(p-y)<a.EPSILON)return e(t);h=b-O,l=m-R,v=p-y,d=1/Math.sqrt(h*h+l*l+v*v),o=A*(v*=d)-E*(l*=d),i=E*(h*=d)-P*v,s=P*l-A*h,(d=Math.sqrt(o*o+i*i+s*s))?(o*=d=1/d,i*=d,s*=d):(o=0,i=0,s=0);c=l*s-v*i,f=v*o-h*s,M=h*i-l*o,(d=Math.sqrt(c*c+f*f+M*M))?(c*=d=1/d,f*=d,M*=d):(c=0,f=0,M=0);return t[0]=o,t[1]=c,t[2]=h,t[3]=0,t[4]=i,t[5]=f,t[6]=l,t[7]=0,t[8]=s,t[9]=M,t[10]=v,t[11]=0,t[12]=-(o*b+i*m+s*p),t[13]=-(c*b+f*m+M*p),t[14]=-(h*b+l*m+v*p),t[15]=1,t},n.targetTo=function(t,n,r,a){var e=n[0],u=n[1],o=n[2],i=a[0],s=a[1],c=a[2],f=e-r[0],M=u-r[1],h=o-r[2],l=f*f+M*M+h*h;l>0&&(l=1/Math.sqrt(l),f*=l,M*=l,h*=l);var v=s*h-c*M,d=c*f-i*h,b=i*M-s*f;(l=v*v+d*d+b*b)>0&&(l=1/Math.sqrt(l),v*=l,d*=l,b*=l);return t[0]=v,t[1]=d,t[2]=b,t[3]=0,t[4]=M*b-h*d,t[5]=h*v-f*b,t[6]=f*d-M*v,t[7]=0,t[8]=f,t[9]=M,t[10]=h,t[11]=0,t[12]=e,t[13]=u,t[14]=o,t[15]=1,t},n.str=function(t){return\"mat4(\"+t[0]+\", \"+t[1]+\", \"+t[2]+\", \"+t[3]+\", \"+t[4]+\", \"+t[5]+\", \"+t[6]+\", \"+t[7]+\", \"+t[8]+\", \"+t[9]+\", \"+t[10]+\", \"+t[11]+\", \"+t[12]+\", \"+t[13]+\", \"+t[14]+\", \"+t[15]+\")\"},n.frob=function(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2)+Math.pow(t[9],2)+Math.pow(t[10],2)+Math.pow(t[11],2)+Math.pow(t[12],2)+Math.pow(t[13],2)+Math.pow(t[14],2)+Math.pow(t[15],2))},n.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t[9]=n[9]+r[9],t[10]=n[10]+r[10],t[11]=n[11]+r[11],t[12]=n[12]+r[12],t[13]=n[13]+r[13],t[14]=n[14]+r[14],t[15]=n[15]+r[15],t},n.subtract=i,n.multiplyScalar=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t[9]=n[9]*r,t[10]=n[10]*r,t[11]=n[11]*r,t[12]=n[12]*r,t[13]=n[13]*r,t[14]=n[14]*r,t[15]=n[15]*r,t},n.multiplyScalarAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t[2]=n[2]+r[2]*a,t[3]=n[3]+r[3]*a,t[4]=n[4]+r[4]*a,t[5]=n[5]+r[5]*a,t[6]=n[6]+r[6]*a,t[7]=n[7]+r[7]*a,t[8]=n[8]+r[8]*a,t[9]=n[9]+r[9]*a,t[10]=n[10]+r[10]*a,t[11]=n[11]+r[11]*a,t[12]=n[12]+r[12]*a,t[13]=n[13]+r[13]*a,t[14]=n[14]+r[14]*a,t[15]=n[15]+r[15]*a,t},n.exactEquals=function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]&&t[9]===n[9]&&t[10]===n[10]&&t[11]===n[11]&&t[12]===n[12]&&t[13]===n[13]&&t[14]===n[14]&&t[15]===n[15]},n.equals=function(t,n){var r=t[0],e=t[1],u=t[2],o=t[3],i=t[4],s=t[5],c=t[6],f=t[7],M=t[8],h=t[9],l=t[10],v=t[11],d=t[12],b=t[13],m=t[14],p=t[15],P=n[0],A=n[1],E=n[2],O=n[3],R=n[4],y=n[5],q=n[6],x=n[7],_=n[8],Y=n[9],L=n[10],S=n[11],w=n[12],I=n[13],N=n[14],g=n[15];return Math.abs(r-P)<=a.EPSILON*Math.max(1,Math.abs(r),Math.abs(P))&&Math.abs(e-A)<=a.EPSILON*Math.max(1,Math.abs(e),Math.abs(A))&&Math.abs(u-E)<=a.EPSILON*Math.max(1,Math.abs(u),Math.abs(E))&&Math.abs(o-O)<=a.EPSILON*Math.max(1,Math.abs(o),Math.abs(O))&&Math.abs(i-R)<=a.EPSILON*Math.max(1,Math.abs(i),Math.abs(R))&&Math.abs(s-y)<=a.EPSILON*Math.max(1,Math.abs(s),Math.abs(y))&&Math.abs(c-q)<=a.EPSILON*Math.max(1,Math.abs(c),Math.abs(q))&&Math.abs(f-x)<=a.EPSILON*Math.max(1,Math.abs(f),Math.abs(x))&&Math.abs(M-_)<=a.EPSILON*Math.max(1,Math.abs(M),Math.abs(_))&&Math.abs(h-Y)<=a.EPSILON*Math.max(1,Math.abs(h),Math.abs(Y))&&Math.abs(l-L)<=a.EPSILON*Math.max(1,Math.abs(l),Math.abs(L))&&Math.abs(v-S)<=a.EPSILON*Math.max(1,Math.abs(v),Math.abs(S))&&Math.abs(d-w)<=a.EPSILON*Math.max(1,Math.abs(d),Math.abs(w))&&Math.abs(b-I)<=a.EPSILON*Math.max(1,Math.abs(b),Math.abs(I))&&Math.abs(m-N)<=a.EPSILON*Math.max(1,Math.abs(m),Math.abs(N))&&Math.abs(p-g)<=a.EPSILON*Math.max(1,Math.abs(p),Math.abs(g))};var a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}(r(0));function e(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function u(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],s=n[5],c=n[6],f=n[7],M=n[8],h=n[9],l=n[10],v=n[11],d=n[12],b=n[13],m=n[14],p=n[15],P=r[0],A=r[1],E=r[2],O=r[3];return t[0]=P*a+A*i+E*M+O*d,t[1]=P*e+A*s+E*h+O*b,t[2]=P*u+A*c+E*l+O*m,t[3]=P*o+A*f+E*v+O*p,P=r[4],A=r[5],E=r[6],O=r[7],t[4]=P*a+A*i+E*M+O*d,t[5]=P*e+A*s+E*h+O*b,t[6]=P*u+A*c+E*l+O*m,t[7]=P*o+A*f+E*v+O*p,P=r[8],A=r[9],E=r[10],O=r[11],t[8]=P*a+A*i+E*M+O*d,t[9]=P*e+A*s+E*h+O*b,t[10]=P*u+A*c+E*l+O*m,t[11]=P*o+A*f+E*v+O*p,P=r[12],A=r[13],E=r[14],O=r[15],t[12]=P*a+A*i+E*M+O*d,t[13]=P*e+A*s+E*h+O*b,t[14]=P*u+A*c+E*l+O*m,t[15]=P*o+A*f+E*v+O*p,t}function o(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=a+a,s=e+e,c=u+u,f=a*i,M=a*s,h=a*c,l=e*s,v=e*c,d=u*c,b=o*i,m=o*s,p=o*c;return t[0]=1-(l+d),t[1]=M+p,t[2]=h-m,t[3]=0,t[4]=M-p,t[5]=1-(f+d),t[6]=v+b,t[7]=0,t[8]=h+m,t[9]=v-b,t[10]=1-(f+l),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function i(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t[9]=n[9]-r[9],t[10]=n[10]-r[10],t[11]=n[11]-r[11],t[12]=n[12]-r[12],t[13]=n[13]-r[13],t[14]=n[14]-r[14],t[15]=n[15]-r[15],t}n.mul=u,n.sub=i},function(t,n,r){\"use strict\";Object.defineProperty(n,\"__esModule\",{value:!0}),n.sub=n.mul=void 0,n.create=function(){var t=new a.ARRAY_TYPE(9);a.ARRAY_TYPE!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0);return t[0]=1,t[4]=1,t[8]=1,t},n.fromMat4=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[4],t[4]=n[5],t[5]=n[6],t[6]=n[8],t[7]=n[9],t[8]=n[10],t},n.clone=function(t){var n=new a.ARRAY_TYPE(9);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n},n.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t},n.fromValues=function(t,n,r,e,u,o,i,s,c){var f=new a.ARRAY_TYPE(9);return f[0]=t,f[1]=n,f[2]=r,f[3]=e,f[4]=u,f[5]=o,f[6]=i,f[7]=s,f[8]=c,f},n.set=function(t,n,r,a,e,u,o,i,s,c){return t[0]=n,t[1]=r,t[2]=a,t[3]=e,t[4]=u,t[5]=o,t[6]=i,t[7]=s,t[8]=c,t},n.identity=function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},n.transpose=function(t,n){if(t===n){var r=n[1],a=n[2],e=n[5];t[1]=n[3],t[2]=n[6],t[3]=r,t[5]=n[7],t[6]=a,t[7]=e}else t[0]=n[0],t[1]=n[3],t[2]=n[6],t[3]=n[1],t[4]=n[4],t[5]=n[7],t[6]=n[2],t[7]=n[5],t[8]=n[8];return t},n.invert=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],s=n[6],c=n[7],f=n[8],M=f*o-i*c,h=-f*u+i*s,l=c*u-o*s,v=r*M+a*h+e*l;if(!v)return null;return v=1/v,t[0]=M*v,t[1]=(-f*a+e*c)*v,t[2]=(i*a-e*o)*v,t[3]=h*v,t[4]=(f*r-e*s)*v,t[5]=(-i*r+e*u)*v,t[6]=l*v,t[7]=(-c*r+a*s)*v,t[8]=(o*r-a*u)*v,t},n.adjoint=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],s=n[6],c=n[7],f=n[8];return t[0]=o*f-i*c,t[1]=e*c-a*f,t[2]=a*i-e*o,t[3]=i*s-u*f,t[4]=r*f-e*s,t[5]=e*u-r*i,t[6]=u*c-o*s,t[7]=a*s-r*c,t[8]=r*o-a*u,t},n.determinant=function(t){var n=t[0],r=t[1],a=t[2],e=t[3],u=t[4],o=t[5],i=t[6],s=t[7],c=t[8];return n*(c*u-o*s)+r*(-c*e+o*i)+a*(s*e-u*i)},n.multiply=e,n.translate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],s=n[5],c=n[6],f=n[7],M=n[8],h=r[0],l=r[1];return t[0]=a,t[1]=e,t[2]=u,t[3]=o,t[4]=i,t[5]=s,t[6]=h*a+l*o+c,t[7]=h*e+l*i+f,t[8]=h*u+l*s+M,t},n.rotate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],s=n[5],c=n[6],f=n[7],M=n[8],h=Math.sin(r),l=Math.cos(r);return t[0]=l*a+h*o,t[1]=l*e+h*i,t[2]=l*u+h*s,t[3]=l*o-h*a,t[4]=l*i-h*e,t[5]=l*s-h*u,t[6]=c,t[7]=f,t[8]=M,t},n.scale=function(t,n,r){var a=r[0],e=r[1];return t[0]=a*n[0],t[1]=a*n[1],t[2]=a*n[2],t[3]=e*n[3],t[4]=e*n[4],t[5]=e*n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t},n.fromTranslation=function(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=n[0],t[7]=n[1],t[8]=1,t},n.fromRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=a,t[1]=r,t[2]=0,t[3]=-r,t[4]=a,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},n.fromScaling=function(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=n[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},n.fromMat2d=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=0,t[3]=n[2],t[4]=n[3],t[5]=0,t[6]=n[4],t[7]=n[5],t[8]=1,t},n.fromQuat=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=r+r,i=a+a,s=e+e,c=r*o,f=a*o,M=a*i,h=e*o,l=e*i,v=e*s,d=u*o,b=u*i,m=u*s;return t[0]=1-M-v,t[3]=f-m,t[6]=h+b,t[1]=f+m,t[4]=1-c-v,t[7]=l-d,t[2]=h-b,t[5]=l+d,t[8]=1-c-M,t},n.normalFromMat4=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],s=n[6],c=n[7],f=n[8],M=n[9],h=n[10],l=n[11],v=n[12],d=n[13],b=n[14],m=n[15],p=r*i-a*o,P=r*s-e*o,A=r*c-u*o,E=a*s-e*i,O=a*c-u*i,R=e*c-u*s,y=f*d-M*v,q=f*b-h*v,x=f*m-l*v,_=M*b-h*d,Y=M*m-l*d,L=h*m-l*b,S=p*L-P*Y+A*_+E*x-O*q+R*y;if(!S)return null;return S=1/S,t[0]=(i*L-s*Y+c*_)*S,t[1]=(s*x-o*L-c*q)*S,t[2]=(o*Y-i*x+c*y)*S,t[3]=(e*Y-a*L-u*_)*S,t[4]=(r*L-e*x+u*q)*S,t[5]=(a*x-r*Y-u*y)*S,t[6]=(d*R-b*O+m*E)*S,t[7]=(b*A-v*R-m*P)*S,t[8]=(v*O-d*A+m*p)*S,t},n.projection=function(t,n,r){return t[0]=2/n,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/r,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t},n.str=function(t){return\"mat3(\"+t[0]+\", \"+t[1]+\", \"+t[2]+\", \"+t[3]+\", \"+t[4]+\", \"+t[5]+\", \"+t[6]+\", \"+t[7]+\", \"+t[8]+\")\"},n.frob=function(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2))},n.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t},n.subtract=u,n.multiplyScalar=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t},n.multiplyScalarAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t[2]=n[2]+r[2]*a,t[3]=n[3]+r[3]*a,t[4]=n[4]+r[4]*a,t[5]=n[5]+r[5]*a,t[6]=n[6]+r[6]*a,t[7]=n[7]+r[7]*a,t[8]=n[8]+r[8]*a,t},n.exactEquals=function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]},n.equals=function(t,n){var r=t[0],e=t[1],u=t[2],o=t[3],i=t[4],s=t[5],c=t[6],f=t[7],M=t[8],h=n[0],l=n[1],v=n[2],d=n[3],b=n[4],m=n[5],p=n[6],P=n[7],A=n[8];return Math.abs(r-h)<=a.EPSILON*Math.max(1,Math.abs(r),Math.abs(h))&&Math.abs(e-l)<=a.EPSILON*Math.max(1,Math.abs(e),Math.abs(l))&&Math.abs(u-v)<=a.EPSILON*Math.max(1,Math.abs(u),Math.abs(v))&&Math.abs(o-d)<=a.EPSILON*Math.max(1,Math.abs(o),Math.abs(d))&&Math.abs(i-b)<=a.EPSILON*Math.max(1,Math.abs(i),Math.abs(b))&&Math.abs(s-m)<=a.EPSILON*Math.max(1,Math.abs(s),Math.abs(m))&&Math.abs(c-p)<=a.EPSILON*Math.max(1,Math.abs(c),Math.abs(p))&&Math.abs(f-P)<=a.EPSILON*Math.max(1,Math.abs(f),Math.abs(P))&&Math.abs(M-A)<=a.EPSILON*Math.max(1,Math.abs(M),Math.abs(A))};var a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}(r(0));function e(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],s=n[5],c=n[6],f=n[7],M=n[8],h=r[0],l=r[1],v=r[2],d=r[3],b=r[4],m=r[5],p=r[6],P=r[7],A=r[8];return t[0]=h*a+l*o+v*c,t[1]=h*e+l*i+v*f,t[2]=h*u+l*s+v*M,t[3]=d*a+b*o+m*c,t[4]=d*e+b*i+m*f,t[5]=d*u+b*s+m*M,t[6]=p*a+P*o+A*c,t[7]=p*e+P*i+A*f,t[8]=p*u+P*s+A*M,t}function u(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t}n.mul=e,n.sub=u},function(t,n,r){\"use strict\";Object.defineProperty(n,\"__esModule\",{value:!0}),n.forEach=n.sqrLen=n.sqrDist=n.dist=n.div=n.mul=n.sub=n.len=void 0,n.create=e,n.clone=function(t){var n=new a.ARRAY_TYPE(2);return n[0]=t[0],n[1]=t[1],n},n.fromValues=function(t,n){var r=new a.ARRAY_TYPE(2);return r[0]=t,r[1]=n,r},n.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t},n.set=function(t,n,r){return t[0]=n,t[1]=r,t},n.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t},n.subtract=u,n.multiply=o,n.divide=i,n.ceil=function(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t},n.floor=function(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t},n.min=function(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t},n.max=function(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t},n.round=function(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t},n.scale=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t},n.scaleAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t},n.distance=s,n.squaredDistance=c,n.length=f,n.squaredLength=M,n.negate=function(t,n){return t[0]=-n[0],t[1]=-n[1],t},n.inverse=function(t,n){return t[0]=1/n[0],t[1]=1/n[1],t},n.normalize=function(t,n){var r=n[0],a=n[1],e=r*r+a*a;e>0&&(e=1/Math.sqrt(e),t[0]=n[0]*e,t[1]=n[1]*e);return t},n.dot=function(t,n){return t[0]*n[0]+t[1]*n[1]},n.cross=function(t,n,r){var a=n[0]*r[1]-n[1]*r[0];return t[0]=t[1]=0,t[2]=a,t},n.lerp=function(t,n,r,a){var e=n[0],u=n[1];return t[0]=e+a*(r[0]-e),t[1]=u+a*(r[1]-u),t},n.random=function(t,n){n=n||1;var r=2*a.RANDOM()*Math.PI;return t[0]=Math.cos(r)*n,t[1]=Math.sin(r)*n,t},n.transformMat2=function(t,n,r){var a=n[0],e=n[1];return t[0]=r[0]*a+r[2]*e,t[1]=r[1]*a+r[3]*e,t},n.transformMat2d=function(t,n,r){var a=n[0],e=n[1];return t[0]=r[0]*a+r[2]*e+r[4],t[1]=r[1]*a+r[3]*e+r[5],t},n.transformMat3=function(t,n,r){var a=n[0],e=n[1];return t[0]=r[0]*a+r[3]*e+r[6],t[1]=r[1]*a+r[4]*e+r[7],t},n.transformMat4=function(t,n,r){var a=n[0],e=n[1];return t[0]=r[0]*a+r[4]*e+r[12],t[1]=r[1]*a+r[5]*e+r[13],t},n.rotate=function(t,n,r,a){var e=n[0]-r[0],u=n[1]-r[1],o=Math.sin(a),i=Math.cos(a);return t[0]=e*i-u*o+r[0],t[1]=e*o+u*i+r[1],t},n.angle=function(t,n){var r=t[0],a=t[1],e=n[0],u=n[1],o=r*r+a*a;o>0&&(o=1/Math.sqrt(o));var i=e*e+u*u;i>0&&(i=1/Math.sqrt(i));var s=(r*e+a*u)*o*i;return s>1?0:s<-1?Math.PI:Math.acos(s)},n.str=function(t){return\"vec2(\"+t[0]+\", \"+t[1]+\")\"},n.exactEquals=function(t,n){return t[0]===n[0]&&t[1]===n[1]},n.equals=function(t,n){var r=t[0],e=t[1],u=n[0],o=n[1];return Math.abs(r-u)<=a.EPSILON*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(e-o)<=a.EPSILON*Math.max(1,Math.abs(e),Math.abs(o))};var a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}(r(0));function e(){var t=new a.ARRAY_TYPE(2);return a.ARRAY_TYPE!=Float32Array&&(t[0]=0,t[1]=0),t}function u(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t}function o(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t}function i(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t}function s(t,n){var r=n[0]-t[0],a=n[1]-t[1];return Math.sqrt(r*r+a*a)}function c(t,n){var r=n[0]-t[0],a=n[1]-t[1];return r*r+a*a}function f(t){var n=t[0],r=t[1];return Math.sqrt(n*n+r*r)}function M(t){var n=t[0],r=t[1];return n*n+r*r}n.len=f,n.sub=u,n.mul=o,n.div=i,n.dist=s,n.sqrDist=c,n.sqrLen=M,n.forEach=function(){var t=e();return function(n,r,a,e,u,o){var i=void 0,s=void 0;for(r||(r=2),a||(a=0),s=e?Math.min(e*r+a,n.length):n.length,i=a;i<s;i+=r)t[0]=n[i],t[1]=n[i+1],u(t,t,o),n[i]=t[0],n[i+1]=t[1];return n}}()},function(t,n,r){\"use strict\";Object.defineProperty(n,\"__esModule\",{value:!0}),n.sqrLen=n.squaredLength=n.len=n.length=n.dot=n.mul=n.setReal=n.getReal=void 0,n.create=function(){var t=new a.ARRAY_TYPE(8);a.ARRAY_TYPE!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0);return t[3]=1,t},n.clone=function(t){var n=new a.ARRAY_TYPE(8);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n},n.fromValues=function(t,n,r,e,u,o,i,s){var c=new a.ARRAY_TYPE(8);return c[0]=t,c[1]=n,c[2]=r,c[3]=e,c[4]=u,c[5]=o,c[6]=i,c[7]=s,c},n.fromRotationTranslationValues=function(t,n,r,e,u,o,i){var s=new a.ARRAY_TYPE(8);s[0]=t,s[1]=n,s[2]=r,s[3]=e;var c=.5*u,f=.5*o,M=.5*i;return s[4]=c*e+f*r-M*n,s[5]=f*e+M*t-c*r,s[6]=M*e+c*n-f*t,s[7]=-c*t-f*n-M*r,s},n.fromRotationTranslation=i,n.fromTranslation=function(t,n){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=.5*n[0],t[5]=.5*n[1],t[6]=.5*n[2],t[7]=0,t},n.fromRotation=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=0,t[5]=0,t[6]=0,t[7]=0,t},n.fromMat4=function(t,n){var r=e.create();u.getRotation(r,n);var o=new a.ARRAY_TYPE(3);return u.getTranslation(o,n),i(t,r,o),t},n.copy=s,n.identity=function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t},n.set=function(t,n,r,a,e,u,o,i,s){return t[0]=n,t[1]=r,t[2]=a,t[3]=e,t[4]=u,t[5]=o,t[6]=i,t[7]=s,t},n.getDual=function(t,n){return t[0]=n[4],t[1]=n[5],t[2]=n[6],t[3]=n[7],t},n.setDual=function(t,n){return t[4]=n[0],t[5]=n[1],t[6]=n[2],t[7]=n[3],t},n.getTranslation=function(t,n){var r=n[4],a=n[5],e=n[6],u=n[7],o=-n[0],i=-n[1],s=-n[2],c=n[3];return t[0]=2*(r*c+u*o+a*s-e*i),t[1]=2*(a*c+u*i+e*o-r*s),t[2]=2*(e*c+u*s+r*i-a*o),t},n.translate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=.5*r[0],s=.5*r[1],c=.5*r[2],f=n[4],M=n[5],h=n[6],l=n[7];return t[0]=a,t[1]=e,t[2]=u,t[3]=o,t[4]=o*i+e*c-u*s+f,t[5]=o*s+u*i-a*c+M,t[6]=o*c+a*s-e*i+h,t[7]=-a*i-e*s-u*c+l,t},n.rotateX=function(t,n,r){var a=-n[0],u=-n[1],o=-n[2],i=n[3],s=n[4],c=n[5],f=n[6],M=n[7],h=s*i+M*a+c*o-f*u,l=c*i+M*u+f*a-s*o,v=f*i+M*o+s*u-c*a,d=M*i-s*a-c*u-f*o;return e.rotateX(t,n,r),a=t[0],u=t[1],o=t[2],i=t[3],t[4]=h*i+d*a+l*o-v*u,t[5]=l*i+d*u+v*a-h*o,t[6]=v*i+d*o+h*u-l*a,t[7]=d*i-h*a-l*u-v*o,t},n.rotateY=function(t,n,r){var a=-n[0],u=-n[1],o=-n[2],i=n[3],s=n[4],c=n[5],f=n[6],M=n[7],h=s*i+M*a+c*o-f*u,l=c*i+M*u+f*a-s*o,v=f*i+M*o+s*u-c*a,d=M*i-s*a-c*u-f*o;return e.rotateY(t,n,r),a=t[0],u=t[1],o=t[2],i=t[3],t[4]=h*i+d*a+l*o-v*u,t[5]=l*i+d*u+v*a-h*o,t[6]=v*i+d*o+h*u-l*a,t[7]=d*i-h*a-l*u-v*o,t},n.rotateZ=function(t,n,r){var a=-n[0],u=-n[1],o=-n[2],i=n[3],s=n[4],c=n[5],f=n[6],M=n[7],h=s*i+M*a+c*o-f*u,l=c*i+M*u+f*a-s*o,v=f*i+M*o+s*u-c*a,d=M*i-s*a-c*u-f*o;return e.rotateZ(t,n,r),a=t[0],u=t[1],o=t[2],i=t[3],t[4]=h*i+d*a+l*o-v*u,t[5]=l*i+d*u+v*a-h*o,t[6]=v*i+d*o+h*u-l*a,t[7]=d*i-h*a-l*u-v*o,t},n.rotateByQuatAppend=function(t,n,r){var a=r[0],e=r[1],u=r[2],o=r[3],i=n[0],s=n[1],c=n[2],f=n[3];return t[0]=i*o+f*a+s*u-c*e,t[1]=s*o+f*e+c*a-i*u,t[2]=c*o+f*u+i*e-s*a,t[3]=f*o-i*a-s*e-c*u,i=n[4],s=n[5],c=n[6],f=n[7],t[4]=i*o+f*a+s*u-c*e,t[5]=s*o+f*e+c*a-i*u,t[6]=c*o+f*u+i*e-s*a,t[7]=f*o-i*a-s*e-c*u,t},n.rotateByQuatPrepend=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=r[0],s=r[1],c=r[2],f=r[3];return t[0]=a*f+o*i+e*c-u*s,t[1]=e*f+o*s+u*i-a*c,t[2]=u*f+o*c+a*s-e*i,t[3]=o*f-a*i-e*s-u*c,i=r[4],s=r[5],c=r[6],f=r[7],t[4]=a*f+o*i+e*c-u*s,t[5]=e*f+o*s+u*i-a*c,t[6]=u*f+o*c+a*s-e*i,t[7]=o*f-a*i-e*s-u*c,t},n.rotateAroundAxis=function(t,n,r,e){if(Math.abs(e)<a.EPSILON)return s(t,n);var u=Math.sqrt(r[0]*r[0]+r[1]*r[1]+r[2]*r[2]);e*=.5;var o=Math.sin(e),i=o*r[0]/u,c=o*r[1]/u,f=o*r[2]/u,M=Math.cos(e),h=n[0],l=n[1],v=n[2],d=n[3];t[0]=h*M+d*i+l*f-v*c,t[1]=l*M+d*c+v*i-h*f,t[2]=v*M+d*f+h*c-l*i,t[3]=d*M-h*i-l*c-v*f;var b=n[4],m=n[5],p=n[6],P=n[7];return t[4]=b*M+P*i+m*f-p*c,t[5]=m*M+P*c+p*i-b*f,t[6]=p*M+P*f+b*c-m*i,t[7]=P*M-b*i-m*c-p*f,t},n.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t},n.multiply=c,n.scale=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t},n.lerp=function(t,n,r,a){var e=1-a;f(n,r)<0&&(a=-a);return t[0]=n[0]*e+r[0]*a,t[1]=n[1]*e+r[1]*a,t[2]=n[2]*e+r[2]*a,t[3]=n[3]*e+r[3]*a,t[4]=n[4]*e+r[4]*a,t[5]=n[5]*e+r[5]*a,t[6]=n[6]*e+r[6]*a,t[7]=n[7]*e+r[7]*a,t},n.invert=function(t,n){var r=h(n);return t[0]=-n[0]/r,t[1]=-n[1]/r,t[2]=-n[2]/r,t[3]=n[3]/r,t[4]=-n[4]/r,t[5]=-n[5]/r,t[6]=-n[6]/r,t[7]=n[7]/r,t},n.conjugate=function(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t[4]=-n[4],t[5]=-n[5],t[6]=-n[6],t[7]=n[7],t},n.normalize=function(t,n){var r=h(n);if(r>0){r=Math.sqrt(r);var a=n[0]/r,e=n[1]/r,u=n[2]/r,o=n[3]/r,i=n[4],s=n[5],c=n[6],f=n[7],M=a*i+e*s+u*c+o*f;t[0]=a,t[1]=e,t[2]=u,t[3]=o,t[4]=(i-a*M)/r,t[5]=(s-e*M)/r,t[6]=(c-u*M)/r,t[7]=(f-o*M)/r}return t},n.str=function(t){return\"quat2(\"+t[0]+\", \"+t[1]+\", \"+t[2]+\", \"+t[3]+\", \"+t[4]+\", \"+t[5]+\", \"+t[6]+\", \"+t[7]+\")\"},n.exactEquals=function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]},n.equals=function(t,n){var r=t[0],e=t[1],u=t[2],o=t[3],i=t[4],s=t[5],c=t[6],f=t[7],M=n[0],h=n[1],l=n[2],v=n[3],d=n[4],b=n[5],m=n[6],p=n[7];return Math.abs(r-M)<=a.EPSILON*Math.max(1,Math.abs(r),Math.abs(M))&&Math.abs(e-h)<=a.EPSILON*Math.max(1,Math.abs(e),Math.abs(h))&&Math.abs(u-l)<=a.EPSILON*Math.max(1,Math.abs(u),Math.abs(l))&&Math.abs(o-v)<=a.EPSILON*Math.max(1,Math.abs(o),Math.abs(v))&&Math.abs(i-d)<=a.EPSILON*Math.max(1,Math.abs(i),Math.abs(d))&&Math.abs(s-b)<=a.EPSILON*Math.max(1,Math.abs(s),Math.abs(b))&&Math.abs(c-m)<=a.EPSILON*Math.max(1,Math.abs(c),Math.abs(m))&&Math.abs(f-p)<=a.EPSILON*Math.max(1,Math.abs(f),Math.abs(p))};var a=o(r(0)),e=o(r(3)),u=o(r(4));function o(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}function i(t,n,r){var a=.5*r[0],e=.5*r[1],u=.5*r[2],o=n[0],i=n[1],s=n[2],c=n[3];return t[0]=o,t[1]=i,t[2]=s,t[3]=c,t[4]=a*c+e*s-u*i,t[5]=e*c+u*o-a*s,t[6]=u*c+a*i-e*o,t[7]=-a*o-e*i-u*s,t}function s(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t}n.getReal=e.copy;n.setReal=e.copy;function c(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=r[4],s=r[5],c=r[6],f=r[7],M=n[4],h=n[5],l=n[6],v=n[7],d=r[0],b=r[1],m=r[2],p=r[3];return t[0]=a*p+o*d+e*m-u*b,t[1]=e*p+o*b+u*d-a*m,t[2]=u*p+o*m+a*b-e*d,t[3]=o*p-a*d-e*b-u*m,t[4]=a*f+o*i+e*c-u*s+M*p+v*d+h*m-l*b,t[5]=e*f+o*s+u*i-a*c+h*p+v*b+l*d-M*m,t[6]=u*f+o*c+a*s-e*i+l*p+v*m+M*b-h*d,t[7]=o*f-a*i-e*s-u*c+v*p-M*d-h*b-l*m,t}n.mul=c;var f=n.dot=e.dot;var M=n.length=e.length,h=(n.len=M,n.squaredLength=e.squaredLength);n.sqrLen=h},function(t,n,r){\"use strict\";Object.defineProperty(n,\"__esModule\",{value:!0}),n.sub=n.mul=void 0,n.create=function(){var t=new a.ARRAY_TYPE(6);a.ARRAY_TYPE!=Float32Array&&(t[1]=0,t[2]=0,t[4]=0,t[5]=0);return t[0]=1,t[3]=1,t},n.clone=function(t){var n=new a.ARRAY_TYPE(6);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n},n.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t},n.identity=function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t},n.fromValues=function(t,n,r,e,u,o){var i=new a.ARRAY_TYPE(6);return i[0]=t,i[1]=n,i[2]=r,i[3]=e,i[4]=u,i[5]=o,i},n.set=function(t,n,r,a,e,u,o){return t[0]=n,t[1]=r,t[2]=a,t[3]=e,t[4]=u,t[5]=o,t},n.invert=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],s=r*u-a*e;if(!s)return null;return s=1/s,t[0]=u*s,t[1]=-a*s,t[2]=-e*s,t[3]=r*s,t[4]=(e*i-u*o)*s,t[5]=(a*o-r*i)*s,t},n.determinant=function(t){return t[0]*t[3]-t[1]*t[2]},n.multiply=e,n.rotate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],s=n[5],c=Math.sin(r),f=Math.cos(r);return t[0]=a*f+u*c,t[1]=e*f+o*c,t[2]=a*-c+u*f,t[3]=e*-c+o*f,t[4]=i,t[5]=s,t},n.scale=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],s=n[5],c=r[0],f=r[1];return t[0]=a*c,t[1]=e*c,t[2]=u*f,t[3]=o*f,t[4]=i,t[5]=s,t},n.translate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],s=n[5],c=r[0],f=r[1];return t[0]=a,t[1]=e,t[2]=u,t[3]=o,t[4]=a*c+u*f+i,t[5]=e*c+o*f+s,t},n.fromRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=a,t[1]=r,t[2]=-r,t[3]=a,t[4]=0,t[5]=0,t},n.fromScaling=function(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=n[1],t[4]=0,t[5]=0,t},n.fromTranslation=function(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=n[0],t[5]=n[1],t},n.str=function(t){return\"mat2d(\"+t[0]+\", \"+t[1]+\", \"+t[2]+\", \"+t[3]+\", \"+t[4]+\", \"+t[5]+\")\"},n.frob=function(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+1)},n.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t},n.subtract=u,n.multiplyScalar=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t},n.multiplyScalarAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t[2]=n[2]+r[2]*a,t[3]=n[3]+r[3]*a,t[4]=n[4]+r[4]*a,t[5]=n[5]+r[5]*a,t},n.exactEquals=function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]},n.equals=function(t,n){var r=t[0],e=t[1],u=t[2],o=t[3],i=t[4],s=t[5],c=n[0],f=n[1],M=n[2],h=n[3],l=n[4],v=n[5];return Math.abs(r-c)<=a.EPSILON*Math.max(1,Math.abs(r),Math.abs(c))&&Math.abs(e-f)<=a.EPSILON*Math.max(1,Math.abs(e),Math.abs(f))&&Math.abs(u-M)<=a.EPSILON*Math.max(1,Math.abs(u),Math.abs(M))&&Math.abs(o-h)<=a.EPSILON*Math.max(1,Math.abs(o),Math.abs(h))&&Math.abs(i-l)<=a.EPSILON*Math.max(1,Math.abs(i),Math.abs(l))&&Math.abs(s-v)<=a.EPSILON*Math.max(1,Math.abs(s),Math.abs(v))};var a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}(r(0));function e(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],s=n[5],c=r[0],f=r[1],M=r[2],h=r[3],l=r[4],v=r[5];return t[0]=a*c+u*f,t[1]=e*c+o*f,t[2]=a*M+u*h,t[3]=e*M+o*h,t[4]=a*l+u*v+i,t[5]=e*l+o*v+s,t}function u(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t}n.mul=e,n.sub=u},function(t,n,r){\"use strict\";Object.defineProperty(n,\"__esModule\",{value:!0}),n.sub=n.mul=void 0,n.create=function(){var t=new a.ARRAY_TYPE(4);a.ARRAY_TYPE!=Float32Array&&(t[1]=0,t[2]=0);return t[0]=1,t[3]=1,t},n.clone=function(t){var n=new a.ARRAY_TYPE(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n},n.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t},n.identity=function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t},n.fromValues=function(t,n,r,e){var u=new a.ARRAY_TYPE(4);return u[0]=t,u[1]=n,u[2]=r,u[3]=e,u},n.set=function(t,n,r,a,e){return t[0]=n,t[1]=r,t[2]=a,t[3]=e,t},n.transpose=function(t,n){if(t===n){var r=n[1];t[1]=n[2],t[2]=r}else t[0]=n[0],t[1]=n[2],t[2]=n[1],t[3]=n[3];return t},n.invert=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=r*u-e*a;if(!o)return null;return o=1/o,t[0]=u*o,t[1]=-a*o,t[2]=-e*o,t[3]=r*o,t},n.adjoint=function(t,n){var r=n[0];return t[0]=n[3],t[1]=-n[1],t[2]=-n[2],t[3]=r,t},n.determinant=function(t){return t[0]*t[3]-t[2]*t[1]},n.multiply=e,n.rotate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=Math.sin(r),s=Math.cos(r);return t[0]=a*s+u*i,t[1]=e*s+o*i,t[2]=a*-i+u*s,t[3]=e*-i+o*s,t},n.scale=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=r[0],s=r[1];return t[0]=a*i,t[1]=e*i,t[2]=u*s,t[3]=o*s,t},n.fromRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=a,t[1]=r,t[2]=-r,t[3]=a,t},n.fromScaling=function(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=n[1],t},n.str=function(t){return\"mat2(\"+t[0]+\", \"+t[1]+\", \"+t[2]+\", \"+t[3]+\")\"},n.frob=function(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2))},n.LDU=function(t,n,r,a){return t[2]=a[2]/a[0],r[0]=a[0],r[1]=a[1],r[3]=a[3]-t[2]*r[1],[t,n,r]},n.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t},n.subtract=u,n.exactEquals=function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]},n.equals=function(t,n){var r=t[0],e=t[1],u=t[2],o=t[3],i=n[0],s=n[1],c=n[2],f=n[3];return Math.abs(r-i)<=a.EPSILON*Math.max(1,Math.abs(r),Math.abs(i))&&Math.abs(e-s)<=a.EPSILON*Math.max(1,Math.abs(e),Math.abs(s))&&Math.abs(u-c)<=a.EPSILON*Math.max(1,Math.abs(u),Math.abs(c))&&Math.abs(o-f)<=a.EPSILON*Math.max(1,Math.abs(o),Math.abs(f))},n.multiplyScalar=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t},n.multiplyScalarAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t[2]=n[2]+r[2]*a,t[3]=n[3]+r[3]*a,t};var a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}(r(0));function e(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=r[0],s=r[1],c=r[2],f=r[3];return t[0]=a*i+u*s,t[1]=e*i+o*s,t[2]=a*c+u*f,t[3]=e*c+o*f,t}function u(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t}n.mul=e,n.sub=u},function(t,n,r){\"use strict\";Object.defineProperty(n,\"__esModule\",{value:!0}),n.vec4=n.vec3=n.vec2=n.quat2=n.quat=n.mat4=n.mat3=n.mat2d=n.mat2=n.glMatrix=void 0;var a=l(r(0)),e=l(r(9)),u=l(r(8)),o=l(r(5)),i=l(r(4)),s=l(r(3)),c=l(r(7)),f=l(r(6)),M=l(r(2)),h=l(r(1));function l(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}n.glMatrix=a,n.mat2=e,n.mat2d=u,n.mat3=o,n.mat4=i,n.quat=s,n.quat2=c,n.vec2=f,n.vec3=M,n.vec4=h}])});//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MAXY = exports.MAXX = exports.MINY = exports.MINX = undefined;\nexports.set = set;\nexports.create = create;\nexports.clone = clone;\nexports.copy = copy;\nexports.initEmpty = initEmpty;\nexports.initInfinity = initInfinity;\nexports.initSizeFromOrigin = initSizeFromOrigin;\nexports.initSizeFromLocation = initSizeFromLocation;\nexports.initCenterExtents = initCenterExtents;\nexports.isEmpty = isEmpty;\nexports.isInfinite = isInfinite;\nexports.equals = equals;\nexports.getSize = getSize;\nexports.getExtents = getExtents;\nexports.getCenter = getCenter;\nexports.expand = expand;\nexports.area = area;\nexports.hull = hull;\nexports.intersection = intersection;\nexports.overlaps = overlaps;\nexports.contains = contains;\nexports.containsPt = containsPt;\nexports.encapsulatePt = encapsulatePt;\nexports.translate = translate;\nexports.transformMat2 = transformMat2;\nexports.transformMat2d = transformMat2d;\n\nvar _glMatrix = __webpack_require__(1);\n\nvar MINX = exports.MINX = 0;\nvar MINY = exports.MINY = 1;\nvar MAXX = exports.MAXX = 2;\nvar MAXY = exports.MAXY = 3;\n\nvar Constants = {\n  BOX_SIDES: 4\n\n  /**\n   * Sets the boundaries of an existing 2d axis-aligned bounding box\n   * If arguments are not supplied, the aabox is initialized as empty.\n   * @param {AABox2d} out  AAbox2d to set\n   * @param {Number} [minx = Infinity] Minimum x-axis value\n   * @param {Number} [miny = Infinity] Minimum y-axis value\n   * @param {Number} [maxx = -Infinity] Maximum x-axis value\n   * @param {Number} [maxy = -Infinity] Maximum y-axis value\n   * @return {AABox2d}    bounds referenced by out arg\n   */\n};function set(out, minx, miny, maxx, maxy) {\n  out[MINX] = typeof minx === \"number\" ? minx : Infinity;\n  out[MINY] = typeof miny === \"number\" ? miny : Infinity;\n  out[MAXX] = typeof maxx === \"number\" ? maxx : -Infinity;\n  out[MAXY] = typeof maxy === \"number\" ? maxy : -Infinity;\n  return out;\n}\n\n/**\n * Creates a new 2d axis-aligned bounding box object\n * with optional boundaries. If boundaries are not supplied,\n * the aabox is initialized as empty.\n * @param  {Number} [minx = Infinity] Minimum x-axis value\n * @param  {Number} [miny = Infinity] Minimum y-axis value\n * @param  {Number} [maxx = -Infinity] Maximum x-axis value\n * @param  {Number} [maxy = -Infinity] Maximum y-axis value\n * @return {AABox2d}      New AABox2d object\n */\nfunction create(minx, miny, maxx, maxy) {\n  var out = new _glMatrix.glMatrix.ARRAY_TYPE(Constants.BOX_SIDES);\n  return set(out, minx, miny, maxx, maxy);\n}\n\n/**\n * Creates a new 2d axis-aligned bounding box with boundaries copied\n * from an existing aabox.\n * @param  {AABox2d} box existing bounds to copy boundaries from\n * @return {AABox2d}     new AABox2d object\n */\nfunction clone(box) {\n  var out = new _glMatrix.glMatrix.ARRAY_TYPE(Constants.BOX_SIDES);\n  out[MINX] = box[MINX];\n  out[MINY] = box[MINY];\n  out[MAXX] = box[MAXX];\n  out[MAXY] = box[MAXY];\n  return out;\n}\n\n/**\n * Copies the boundaries from one existing aabox to another.\n * @param  {AABox2d} out bounds to copy to\n * @param  {AABox2d} box bounds to copy from\n * @return {AABox2d}     bounds referenced by out arg\n */\nfunction copy(out, box) {\n  out[MINX] = box[MINX];\n  out[MINY] = box[MINY];\n  out[MAXX] = box[MAXX];\n  out[MAXY] = box[MAXY];\n  return out;\n}\n\n/**\n * Re-initializes an existing aabox as empty.\n * An aabox is empty if the minimum value in either of\n * its dimensions exceeds its respective max value.\n * In this case, the minumums will be set to +Infinity\n * and the maximums to -Infinity\n * @param  {AABox2d} out existing bounds to re-initialize as empty\n * @return {AABox2d}     bounds referenced by out arg\n */\nfunction initEmpty(out) {\n  out[MINX] = Infinity;\n  out[MINY] = Infinity;\n  out[MAXX] = -Infinity;\n  out[MAXY] = -Infinity;\n  return out;\n}\n\n/**\n * Re-initializes an existing aabox to infinity, ultimately encompassing\n * all numeric values.\n * @param  {AABox2d} out existing bounds to initialize to infinity\n * @return {AABox2d}     bounds referenced by out arg\n */\nfunction initInfinity(out) {\n  out[MINX] = -Infinity;\n  out[MINY] = -Infinity;\n  out[MAXX] = Infinity;\n  out[MAXY] = Infinity;\n  return out;\n}\n\n/**\n * Initializes an existing aabox with its top-left corner set to be the origin ([0, 0]),\n * an extends outwards in each dimension by its respective size.\n *   minx: 0\n *   miny: 0\n *   maxx: sizes[x]\n *   maxy: sizes[y]\n * @param  {AABox2d} out   existing bounds to re-initialize\n * @param  {Vec2d} sizes   new width/height of the bounds\n * @return {AABox2d}       bounds referenced by out arg\n */\nfunction initSizeFromOrigin(out, sizes) {\n  if (sizes[0] < 0) {\n    out[MINX] = -sizes[0];\n    out[MAXX] = 0;\n  } else {\n    out[MINX] = 0;\n    out[MAXX] = sizes[0];\n  }\n  if (sizes[1] < 0) {\n    out[MINY] = -sizes[1];\n    out[MAXY] = 0;\n  } else {\n    out[MINY] = 0;\n    out[MAXY] = sizes[1];\n  }\n  return out;\n}\n\n/**\n * Initializes an existing aabox with its top-left corner set to be an existing pt and with\n * bounds extending outwards in each dimension by its respective size.\n *   minx: pt[x]\n *   miny: pt[y]\n *   maxx: pt[x] + sizes[x]\n *   maxy: pt[y] + sizes[y]\n * @param  {AABox2d} out   existing bounds to re-initialize\n * @param  {Point2d} pt    new position of the top-left corner of the bounds\n * @param  {Vec2d} sizes   new width/height of the bounds\n * @return {AABox2d}       bounds referenced by out arg\n */\nfunction initSizeFromLocation(out, pt, sizes) {\n  for (var i = 0; i < 2; i += 1) {\n    if (sizes[i] < 0) {\n      out[i] = pt[i] - sizes[i];\n      out[i + 2] = pt[i];\n    } else {\n      out[i] = pt[i];\n      out[i + 2] = pt[i] + sizes[i];\n    }\n  }\n  return out;\n}\n\n/**\n * Initializes an existing aabox with its center set to a specific pt and with bounds\n * extending outward in each dimension so that the aabox's width and height are a\n * specific size\n * @param  {AABox2d} out    existing bounds to re-initialize\n * @param  {Point2d} center new center of the bounds\n * @param  {Vec2d} sizes  new width/height of the bounds\n * @return {AABox2d}        bounds referenced by out arg\n */\nfunction initCenterExtents(out, center, sizes) {\n  for (var i = 0; i < 2; i += 1) {\n    if (sizes[i] < 0) {\n      out[i] = center[i] + sizes[i];\n      out[i + 2] = center[i] - sizes[i];\n    } else {\n      out[i] = center[i] - sizes[i];\n      out[i + 2] = center[i] + sizes[i];\n    }\n  }\n  return out;\n}\n\n/**\n * Returns true if the aabox is empty\n * @param  {AABox2d}  box\n * @return {Boolean}     true if box is empty, false otherwise\n */\nfunction isEmpty(box) {\n  return box[MINX] > box[MAXX] || box[MINY] > box[MAXY];\n}\n\n/**\n * Returns true if an aabox is infinite in either dimension\n * @param  {AABox2d}  box Existing aabox to check\n * @return {Boolean}     True if box extends to +/- inifinity in either dimension, false otherwise\n */\nfunction isInfinite(box) {\n  return !isFinite(box[MINX]) || !isFinite(box[MINY]) || !isFinite(box[MAXX]) || !isFinite(box[MAXY]);\n}\n\n/**\n * Returns true if one aabox approximately equals another\n * @param  {AABox2d} a\n * @param  {AABox2d} b\n * @return {Boolean}   true if a ~= b\n */\nfunction equals(a, b) {\n  var a0 = a[0];\n  var a1 = a[1];\n  var a2 = a[2];\n  var a3 = a[3];\n  var b0 = b[0];\n  var b1 = b[1];\n  var b2 = b[2];\n  var b3 = b[3];\n  return Math.abs(a0 - b0) <= _glMatrix.glMatrix.EPSILON && Math.abs(a1 - b1) <= _glMatrix.glMatrix.EPSILON && Math.abs(a2 - b2) <= _glMatrix.glMatrix.EPSILON && Math.abs(a3 - b3) <= _glMatrix.glMatrix.EPSILON;\n}\n\n/**\n * Returns the width/height of an existing aabox\n * @param  {Vec2d} out 2d vector to store the width/height of an existing aabox\n * @param  {AABox2d} box bounds to extract the width/height from\n * @return {Vec2d}     vector referenced by the out arg\n */\nfunction getSize(out, box) {\n  return _glMatrix.vec2.set(out, box[MAXX] - box[MINX], box[MAXY] - box[MINY]);\n}\n\n/**\n * Returns the extents of an existing aabox.\n * Extents is the size of a bounds in each dimension starting at the center\n * of the bounds. (i.e. extents = [width / 2, height / 2])\n * @param  {Vec2d} out 2d vector to store the extents of an existing aabox\n * @param  {AABox2d} box bounds to extract the extents from\n * @return {Vec2d}     vector referenced by the out arg\n */\nfunction getExtents(out, box) {\n  getSize(out, box);\n  return _glMatrix.vec2.scale(out, out, 0.5); // eslint-disable-line no-magic-numbers\n}\n\n/**\n * Returns the center of an existing aabox\n * @param  {Point2d} out point to store the center of an existing bounds\n * @param  {AABox2d} box bounds to extract the center from\n * @return {Point2d}     point referenced by the out arg\n */\nfunction getCenter(out, box) {\n  getExtents(out, box);\n  out[MINX] += box[MINX];\n  out[MINY] += box[MINY];\n  return out;\n}\n\n/**\n * Expands an existing aabox by a specified size in each dimension.\n * @param  {AABox2d} out        bounds to store the resulting operation in\n * @param  {AABox2d} box        starting bounds to expand\n * @param  {Vec2d} expandSize   size to expand in each dimension\n * @return {AABox2d}            bounds referenced by the out arg\n */\nfunction expand(out, box, expandSize) {\n  out[MINX] = box[MINX] - expandSize[0];\n  out[MAXX] = box[MAXX] + expandSize[0];\n  out[MINY] = box[MINY] - expandSize[1];\n  out[MAXY] = box[MAXY] + expandSize[1];\n}\n\n/**\n * Computes the area of an existing aabox\n * @param  {AABox2d} box\n * @return {Number}     area of the bounds\n */\nfunction area(box) {\n  return (box[MAXX] - box[MINX]) * (box[MAXY] - box[MINY]);\n}\n\n/**\n * Calculates the hull of two aaboxes. The hull is the smallest bounds that contains\n * both of the aaboxes\n * @param  {AABox2d} out bounds to store the resulting operation in\n * @param  {AABox2d} a\n * @param  {AABox2d} b\n * @return {AABox2d}     bounds referenced by out arg\n */\nfunction hull(out, a, b) {\n  return create(Math.min(a[MINX], b[MINX]), Math.min(a[MINY], b[MINY]), Math.max(a[MAXX], b[MAXX]), Math.max(a[MAXY], b[MAXY]));\n}\n\n/**\n * Calculates the intersection of two existing bounds.\n * @param  {AABox2d} out bounds to store the resulting operation in\n * @param  {AABox2d} a\n * @param  {AABox2d} b\n * @return {AABox2d}     bounds referenced by out arg\n */\nfunction intersection(out, a, b) {\n  var boxToUse = out;\n  if (out === a) {\n    boxToUse = create();\n  }\n\n  var minindex = MINX;\n  var maxindex = MAXX;\n  for (; minindex <= MINY; minindex += 1, maxindex += 1) {\n    if (a[maxindex] < b[minindex] || a[minindex] > b[maxindex]) {\n      break;\n    }\n\n    boxToUse[minindex] = Math.max(a[minindex], b[minindex]);\n    boxToUse[maxindex] = Math.min(a[maxindex], b[maxindex]);\n  }\n\n  if (minindex !== MINY + 1) {\n    initEmpty(boxToUse);\n  }\n\n  if (out === a) {\n    copy(out, boxToUse);\n  }\n\n  return out;\n}\n\n/**\n * Returns true if one bounds overlaps another in any way (non-inclusive).\n * @param  {AABox2d} a\n * @param  {AABox2d} b\n * @return {Boolean}   Returns true if a overlaps b, false otherwise\n */\nfunction overlaps(a, b) {\n  return !(a[MAXX] <= b[MINX] || a[MINX] >= b[MAXX] || a[MAXY] <= b[MINY] || a[MINY] >= b[MAXY]);\n}\n\n/**\n * Returns true if one bounds full contains another (inclusive).\n * @param  {AABox2d} a\n * @param  {AABox2d} b\n * @return {Boolean}   true if a fully contains b.\n */\nfunction contains(a, b) {\n  return !(b[MINX] < a[MINX] || b[MAXX] > a[MAXX] || b[MINY] < a[MINY] || b[MAXY] > a[MAXY]);\n}\n\n/**\n * Returns true if an existing bounds contains a specific point (inclusive)\n * @param  {AABox2d} box\n * @param  {Point2d} pt\n * @return {Boolean}     Returns true if pt is inside of box, false otherwise\n */\nfunction containsPt(box, pt) {\n  return pt[MINX] >= box[MINX] && pt[MINX] <= box[MAXX] && pt[MINY] >= box[MINY] && pt[MINY] <= box[MAXY];\n}\n\n/**\n * Extends an existing bounds so that it would contain a specific point\n * @param  {AABox2d} out Bounds containing the operation result\n * @param  {AABox2d} box Starting bounds to possibly extend\n * @param  {Point2d} pt  Point to encapsulate in box\n * @return {AAbox2d}     bounds referenced by out arg\n */\nfunction encapsulatePt(out, box, pt) {\n  if (out !== box) {\n    copy(out, box);\n  }\n  if (isEmpty(box)) {\n    out[MINX] = pt[MINX];\n    out[MAXX] = pt[MINX];\n    out[MINY] = pt[MINY];\n    out[MAXY] = pt[MINY];\n  } else {\n    if (pt[MINX] < out[MINX]) {\n      out[MINX] = pt[MINX];\n    } else if (pt[MINX] > out[MAXX]) {\n      out[MAXX] = pt[MINX];\n    }\n\n    if (pt[MINY] < out[MINY]) {\n      out[MINY] = pt[MINY];\n    } else if (pt[MINY] > out[MAXY]) {\n      out[MAXY] = pt[MINY];\n    }\n  }\n  return out;\n}\n\n/**\n * Translates an existing bounds by a specified offset it each dimension\n * @param  {AABox2d} out bounds resulting from the operation\n * @param  {AABox2d} box starting bounds\n * @param  {Vec2d} pos   translation in each dimension\n * @return {AABox2d}     bounds referenced by out arg\n */\nfunction translate(out, box, pos) {\n  out[MINX] = box[MINX] + pos[0];\n  out[MINY] = box[MINY] + pos[1];\n  out[MAXX] = box[MAXX] + pos[0];\n  out[MAXY] = box[MAXY] + pos[1];\n}\n\nfunction transform(out, box, mat, xformFunc) {\n  var boxToUse = out;\n  if (out === box) {\n    boxToUse = create();\n  }\n  initEmpty(boxToUse);\n\n  var pt1 = _glMatrix.vec2.set(_glMatrix.vec2.create(), box[MINX], box[MINY]);\n  var pt2 = _glMatrix.vec2.create();\n  xformFunc(pt2, pt1, mat);\n  encapsulatePt(boxToUse, boxToUse, pt2);\n  pt1[MINX] = box[MAXX];\n  xformFunc(pt2, pt1, mat);\n  encapsulatePt(boxToUse, boxToUse, pt2);\n  pt1[MINY] = box[MAXY];\n  xformFunc(pt2, pt1, mat);\n  encapsulatePt(boxToUse, boxToUse, pt2);\n  pt1[MINX] = box[MINX];\n  xformFunc(pt2, pt1, mat);\n  encapsulatePt(boxToUse, boxToUse, pt2);\n  if (out === box) {\n    copy(out, boxToUse);\n  }\n  return out;\n}\n\n/**\n * Transforms an existing bounds by a 2x2 matrix\n * @param  {AABox2d} out bounds to contain the operation result\n * @param  {AABox2d} box bounds to transform\n * @param  {Mat2} mat 2x2 matrix transformation\n * @return {AABox2d}     bounds referenced by out arg\n */\nfunction transformMat2(out, box, mat) {\n  return transform(out, box, mat, _glMatrix.vec2.transformMat2);\n}\n\n/**\n * Transforms an existing bounds by a 2x3 matrix.\n * A 2x3 matrix is a 2x2 matrix with a translation component.\n * @param  {AABox2d} out bounds to hold the operation result\n * @param  {AABox2d} box bounds to transform\n * @param  {Mat2d} mat   2x3 matrix\n * @return {AABox2d}     bounds referenced by out arg\n */\nfunction transformMat2d(out, box, mat) {\n  return transform(out, box, mat, _glMatrix.vec2.transformMat2d);\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sqrDist = exports.dist = undefined;\nexports.set = set;\nexports.create = create;\nexports.clone = clone;\nexports.copy = copy;\nexports.initFromValues = initFromValues;\nexports.addVec2 = addVec2;\nexports.sub = sub;\nexports.transformMat2 = transformMat2;\nexports.transformMat2d = transformMat2d;\nexports.str = str;\nexports.distance = distance;\nexports.squaredDistance = squaredDistance;\nexports.lerp = lerp;\nexports.equals = equals;\nexports.exactEquals = exactEquals;\n\nvar _glMatrix = __webpack_require__(1);\n\nvar X = 0;\nvar Y = 1;\n\n/**\n * Sets the coordinates of a 2D point\n * @param {Point2d} out Point to set\n * @param {Number} [x = 0]   X coordinate\n * @param {Number} [y = 0]   Y coordinate\n * @return {Point2d}    Point referenced by out arg\n */\nfunction set(out) {\n  var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  out[X] = x;\n  out[Y] = y;\n  return out;\n}\n\n/**\n * Creates a new Point2d object\n * @param  {Number} [x = 0] X coordinate\n * @param  {Number} [y = 0] Y coordinate\n * @return {Point2d}\n */\nfunction create() {\n  var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  var out = new _glMatrix.glMatrix.ARRAY_TYPE(2);\n  return set(out, x, y);\n}\n\n/**\n * Creates a new Point2d object with coordinates initialized from an existing point.\n * @param  {Point2d} p\n * @return {Point2d}\n */\nfunction clone(p) {\n  var out = new _glMatrix.glMatrix.ARRAY_TYPE(2);\n  out[X] = p[X];\n  out[Y] = p[Y];\n  return out;\n}\n\n/**\n * Copies the coordinates of one point to another.\n * @param  {Point2d} out The point to copy to\n * @param  {Point2d} p   The point to copy from\n * @return {Point2d}     Point referenced by out arg\n */\nfunction copy(out, p) {\n  out[X] = p[X];\n  out[Y] = p[Y];\n  return out;\n}\n\n/**\n * Creates a new point from coordinates\n * @param  {Number} x X coordinate\n * @param  {Number} y Y coordinate\n * @return {Point2d}   New point\n */\nfunction initFromValues(x, y) {\n  return create(x, y);\n}\n\n/**\n * Adds a 2d offset to an existing point\n * @param {Point2d} out Point receiving the operation result\n * @param {Point2d} pt  Existing point\n * @param {Vec2d} v   Vector describing the offset\n * @return {Point2d}   Point referenced by out arg\n */\nfunction addVec2(out, pt, v) {\n  return _glMatrix.vec2.add(out, pt, v);\n}\n\n/**\n * Calculates the difference between two points\n * @param  {Vec2d} out Vector receiving operation result\n * @param  {Point2d} pt1\n * @param  {Point2d} pt2\n * @return {Vec2d}     Vector referenced by out arg\n */\nfunction sub(out, pt1, pt2) {\n  return _glMatrix.vec2.sub(out, pt1, pt2);\n}\n\n/**\n * Performs an 2x2 matrix multiplication on a point\n * @param  {Point2d} out Point receiving operation result\n * @param  {Point2d} p\n * @param  {Mat2} m 2x2 matrix\n * @return {Point2d}     Point referenced by out arg\n */\nfunction transformMat2(out, p, m) {\n  return _glMatrix.vec2.transformMat2(out, p, m);\n}\n\n/**\n * Performs a 2x3 matrix multiplication on a point.\n * A 2x3 matrix is ultimately a 2x2 matrix with a\n * translation component\n * @param  {Point2d} out Point receiving operation result\n * @param  {Point2d} p\n * @param  {Mat2d} m   2x3 matrix\n * @return {Point2d}     Point referenced by out arg\n */\nfunction transformMat2d(out, p, m) {\n  return _glMatrix.vec2.transformMat2d(out, p, m);\n}\n\n/**\n * Creates a string representation of a point\n * @param  {Point2d} p\n * @return {string}\n */\nfunction str(p) {\n  return \"point2d(\" + p[0] + \" , \" + p[1] + \")\";\n}\n\n/**\n * Computes the distance between two 2d points\n * @param  {Point2d} p1\n * @param  {Point2d} p2\n * @return {Number}\n */\nfunction distance(p1, p2) {\n  return _glMatrix.vec2.distance(p1, p2);\n}\n\nvar dist = exports.dist = distance;\n\n/**\n * Returns the squared distance between two points.\n * This is a cheaper operation than the true distance\n * calculation.\n * @param  {Point2d} p1\n * @param  {Point2d} p2\n * @return {Number}    distance^2\n */\nfunction squaredDistance(p1, p2) {\n  return _glMatrix.vec2.squaredDistance(p1, p2);\n}\n\nvar sqrDist = exports.sqrDist = squaredDistance;\n\n/**\n * Calculates the point linearly interpolated\n * between two points according to the relative operator t\n * [t == 0 = p1 & t == 1 = p2]\n * @param  {Point2d} out Point receiving result of operation\n * @param  {Point2d} p1  Start point (t = 0)\n * @param  {Point2d} p2  End point (t = 1)\n * @param  {[type]} t   Interpolate parameter [0, 1]\n * @return {Point2d}     Point referenced by out arg\n */\nfunction lerp(out, p1, p2, t) {\n  return _glMatrix.vec2.lerp(out, p1, p2, t);\n}\n\n/**\n * Returns whether two points are relatively equal\n * @param  {Point2d} a\n * @param  {Point2d} b\n * @return {Boolean}   Returns true if two point are relatively equal, false otherwise\n */\nfunction equals(a, b) {\n  return _glMatrix.vec2.equals(a, b);\n}\n\n/**\n * Returns whether two points are exactly equal.\n * @param  {Point2d} a\n * @param  {Point2d} b\n * @return {Boolean}   Returns true if the two points are exactly equal, false otherwise\n */\nfunction exactEquals(a, b) {\n  return _glMatrix.vec2.exactEquals(a, b);\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _glMatrix = __webpack_require__(1);\n\n/**\n * Singular value decomposition\n * See: http://math.stackexchange.com/questions/861674/decompose-a-2d-arbitrary-transform-into-only-scaling-and-rotation\n */\n\n/**\n * Calculates the singular value decomposition to extract the\n * scale, rotation, and translation from a 2x3 matrix.\n * Any matrix built by affine transformations can be decomposed\n * into a rotation*scale*rotation*translation\n * See: http://math.stackexchange.com/questions/861674/decompose-a-2d-arbitrary-transform-into-only-scaling-and-rotation\n * @param  {Vec2d} outTranslate Vector to hold the translation components\n * @param  {Vec2d} outScale     Vector to hold the x,y scale components\n * @param  {Vec2d} outRotate    Vector to hold the rotation components\n * @param  {Mat2d} mat          Matrix to decompose\n */\n_glMatrix.mat2d.svd = function (outTranslate, outScale, outRotate, mat) {\n  if (outTranslate) {\n    outTranslate[0] = mat[4];\n    outTranslate[1] = mat[5];\n  }\n  if (outScale || outRotate) {\n    var E = (mat[0] + mat[3]) / 2.0;\n    var F = (mat[0] - mat[3]) / 2.0;\n    var G = (mat[1] + mat[2]) / 2.0;\n    var H = (mat[1] - mat[2]) / 2.0;\n    if (outScale) {\n      var Q = Math.sqrt(E * E + H * H);\n      var R = Math.sqrt(F * F + G * G);\n      outScale[0] = Q + R;\n      outScale[1] = Q - R;\n    }\n    if (outRotate) {\n      var a1 = Math.atan2(G, F);\n      var a2 = Math.atan2(H, E);\n      outRotate[0] = (a2 - a1) / 2.0;\n      outRotate[1] = (a2 + a1) / 2.0;\n    }\n  }\n};\n\nexports.default = _glMatrix.mat2d;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb3JlL21hdDJkLmpzPzY0YTUiXSwibmFtZXMiOlsiTWF0MmQiLCJzdmQiLCJvdXRUcmFuc2xhdGUiLCJvdXRTY2FsZSIsIm91dFJvdGF0ZSIsIm1hdCIsIkUiLCJGIiwiRyIsIkgiLCJRIiwiTWF0aCIsInNxcnQiLCJSIiwiYTEiLCJhdGFuMiIsImEyIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUE7O0FBRUE7Ozs7O0FBS0M7Ozs7Ozs7Ozs7O0FBV0RBLGdCQUFNQyxHQUFOLEdBQVksVUFBQ0MsWUFBRCxFQUFlQyxRQUFmLEVBQXlCQyxTQUF6QixFQUFvQ0MsR0FBcEMsRUFBNEM7QUFDdEQsTUFBSUgsWUFBSixFQUFrQjtBQUNoQkEsaUJBQWEsQ0FBYixJQUFrQkcsSUFBSSxDQUFKLENBQWxCO0FBQ0FILGlCQUFhLENBQWIsSUFBa0JHLElBQUksQ0FBSixDQUFsQjtBQUNEO0FBQ0QsTUFBSUYsWUFBWUMsU0FBaEIsRUFBMkI7QUFDekIsUUFBTUUsSUFBSSxDQUFDRCxJQUFJLENBQUosSUFBU0EsSUFBSSxDQUFKLENBQVYsSUFBb0IsR0FBOUI7QUFDQSxRQUFNRSxJQUFJLENBQUNGLElBQUksQ0FBSixJQUFTQSxJQUFJLENBQUosQ0FBVixJQUFvQixHQUE5QjtBQUNBLFFBQU1HLElBQUksQ0FBQ0gsSUFBSSxDQUFKLElBQVNBLElBQUksQ0FBSixDQUFWLElBQW9CLEdBQTlCO0FBQ0EsUUFBTUksSUFBSSxDQUFDSixJQUFJLENBQUosSUFBU0EsSUFBSSxDQUFKLENBQVYsSUFBb0IsR0FBOUI7QUFDQSxRQUFJRixRQUFKLEVBQWM7QUFDWixVQUFNTyxJQUFJQyxLQUFLQyxJQUFMLENBQVVOLElBQUlBLENBQUosR0FBUUcsSUFBSUEsQ0FBdEIsQ0FBVjtBQUNBLFVBQU1JLElBQUlGLEtBQUtDLElBQUwsQ0FBVUwsSUFBSUEsQ0FBSixHQUFRQyxJQUFJQSxDQUF0QixDQUFWO0FBQ0FMLGVBQVMsQ0FBVCxJQUFjTyxJQUFJRyxDQUFsQjtBQUNBVixlQUFTLENBQVQsSUFBY08sSUFBSUcsQ0FBbEI7QUFDRDtBQUNELFFBQUlULFNBQUosRUFBZTtBQUNiLFVBQU1VLEtBQUtILEtBQUtJLEtBQUwsQ0FBV1AsQ0FBWCxFQUFjRCxDQUFkLENBQVg7QUFDQSxVQUFNUyxLQUFLTCxLQUFLSSxLQUFMLENBQVdOLENBQVgsRUFBY0gsQ0FBZCxDQUFYO0FBQ0FGLGdCQUFVLENBQVYsSUFBZSxDQUFDWSxLQUFLRixFQUFOLElBQVksR0FBM0I7QUFDQVYsZ0JBQVUsQ0FBVixJQUFlLENBQUNZLEtBQUtGLEVBQU4sSUFBWSxHQUEzQjtBQUNEO0FBQ0Y7QUFDRixDQXZCRDs7a0JBeUJlZCxlIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuXG5pbXBvcnQge21hdDJkIGFzIE1hdDJkfSBmcm9tIFwiZ2wtbWF0cml4XCJcblxuLyoqXG4gKiBTaW5ndWxhciB2YWx1ZSBkZWNvbXBvc2l0aW9uXG4gKiBTZWU6IGh0dHA6Ly9tYXRoLnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy84NjE2NzQvZGVjb21wb3NlLWEtMmQtYXJiaXRyYXJ5LXRyYW5zZm9ybS1pbnRvLW9ubHktc2NhbGluZy1hbmQtcm90YXRpb25cbiAqL1xuXG4gLyoqXG4gICogQ2FsY3VsYXRlcyB0aGUgc2luZ3VsYXIgdmFsdWUgZGVjb21wb3NpdGlvbiB0byBleHRyYWN0IHRoZVxuICAqIHNjYWxlLCByb3RhdGlvbiwgYW5kIHRyYW5zbGF0aW9uIGZyb20gYSAyeDMgbWF0cml4LlxuICAqIEFueSBtYXRyaXggYnVpbHQgYnkgYWZmaW5lIHRyYW5zZm9ybWF0aW9ucyBjYW4gYmUgZGVjb21wb3NlZFxuICAqIGludG8gYSByb3RhdGlvbipzY2FsZSpyb3RhdGlvbip0cmFuc2xhdGlvblxuICAqIFNlZTogaHR0cDovL21hdGguc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzg2MTY3NC9kZWNvbXBvc2UtYS0yZC1hcmJpdHJhcnktdHJhbnNmb3JtLWludG8tb25seS1zY2FsaW5nLWFuZC1yb3RhdGlvblxuICAqIEBwYXJhbSAge1ZlYzJkfSBvdXRUcmFuc2xhdGUgVmVjdG9yIHRvIGhvbGQgdGhlIHRyYW5zbGF0aW9uIGNvbXBvbmVudHNcbiAgKiBAcGFyYW0gIHtWZWMyZH0gb3V0U2NhbGUgICAgIFZlY3RvciB0byBob2xkIHRoZSB4LHkgc2NhbGUgY29tcG9uZW50c1xuICAqIEBwYXJhbSAge1ZlYzJkfSBvdXRSb3RhdGUgICAgVmVjdG9yIHRvIGhvbGQgdGhlIHJvdGF0aW9uIGNvbXBvbmVudHNcbiAgKiBAcGFyYW0gIHtNYXQyZH0gbWF0ICAgICAgICAgIE1hdHJpeCB0byBkZWNvbXBvc2VcbiAgKi9cbk1hdDJkLnN2ZCA9IChvdXRUcmFuc2xhdGUsIG91dFNjYWxlLCBvdXRSb3RhdGUsIG1hdCkgPT4ge1xuICBpZiAob3V0VHJhbnNsYXRlKSB7XG4gICAgb3V0VHJhbnNsYXRlWzBdID0gbWF0WzRdXG4gICAgb3V0VHJhbnNsYXRlWzFdID0gbWF0WzVdXG4gIH1cbiAgaWYgKG91dFNjYWxlIHx8IG91dFJvdGF0ZSkge1xuICAgIGNvbnN0IEUgPSAobWF0WzBdICsgbWF0WzNdKSAvIDIuMFxuICAgIGNvbnN0IEYgPSAobWF0WzBdIC0gbWF0WzNdKSAvIDIuMFxuICAgIGNvbnN0IEcgPSAobWF0WzFdICsgbWF0WzJdKSAvIDIuMFxuICAgIGNvbnN0IEggPSAobWF0WzFdIC0gbWF0WzJdKSAvIDIuMFxuICAgIGlmIChvdXRTY2FsZSkge1xuICAgICAgY29uc3QgUSA9IE1hdGguc3FydChFICogRSArIEggKiBIKVxuICAgICAgY29uc3QgUiA9IE1hdGguc3FydChGICogRiArIEcgKiBHKVxuICAgICAgb3V0U2NhbGVbMF0gPSBRICsgUlxuICAgICAgb3V0U2NhbGVbMV0gPSBRIC0gUlxuICAgIH1cbiAgICBpZiAob3V0Um90YXRlKSB7XG4gICAgICBjb25zdCBhMSA9IE1hdGguYXRhbjIoRywgRilcbiAgICAgIGNvbnN0IGEyID0gTWF0aC5hdGFuMihILCBFKVxuICAgICAgb3V0Um90YXRlWzBdID0gKGEyIC0gYTEpIC8gMi4wXG4gICAgICBvdXRSb3RhdGVbMV0gPSAoYTIgKyBhMSkgLyAyLjBcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWF0MmRcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvbWF0MmQuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar EPS = 1e-5;\nvar quarter = 0.25;\nvar half = 0.5;\nvar two = 2;\n\nMath.QUATER_PI = quarter * Math.PI;\nMath.HALF_PI = half * Math.PI;\nMath.HALF_NPI = -half * Math.PI;\nMath.TWO_PI = two * Math.PI;\nMath.NPI = -Math.PI;\nMath.NQUATER_PI = quarter * Math.NPI;\nMath.NHALF_PI = half * Math.NPI;\nMath.NTWO_PI = two * Math.NPI;\nMath.INV_PI = 1 / Math.PI;\nMath.RAD_TO_DEG = 180 / Math.PI;\nMath.DEG_TO_RAD = Math.PI / 180;\n\n// this could be useful to tweak in your app, depends on your world resolution\nMath.EPS = EPS;\n\n/**\n * Clamp f to be between a min and max.\n * @param {Number} f\n * @param {Number} minv\n * @param {Number} maxv\n * @return {Number}\n */\nfunction clamp(f, minv, maxv) {\n  return f < minv ? minv : f > maxv ? maxv : f;\n}\n\n/**\n * Clamp f to be between 0 and 1.\n * @param {Number} f\n * @return {Number}\n */\nfunction clamp01(f) {\n  return f < 0 ? 0 : f > 1 ? 1 : f;\n}\n\n/**\n * Linearly interpolate (or extrapolate) between @c f1 and @c f2 by @c t percent.\n * @param {Number} f1\n * @param {Number} f2\n * @param {Number} t\n * @return {Number}\n */\nfunction lerp(f1, f2, t) {\n  return f1 * (1 - t) + f2 * t;\n}\n\nMath.clamp = clamp;\nMath.clamp01 = clamp01;\nMath.lerp = lerp;\n\nexports.default = Math;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9tYXRoL21hdGguanM/MDU5NiJdLCJuYW1lcyI6WyJFUFMiLCJxdWFydGVyIiwiaGFsZiIsInR3byIsIk1hdGgiLCJRVUFURVJfUEkiLCJQSSIsIkhBTEZfUEkiLCJIQUxGX05QSSIsIlRXT19QSSIsIk5QSSIsIk5RVUFURVJfUEkiLCJOSEFMRl9QSSIsIk5UV09fUEkiLCJJTlZfUEkiLCJSQURfVE9fREVHIiwiREVHX1RPX1JBRCIsImNsYW1wIiwiZiIsIm1pbnYiLCJtYXh2IiwiY2xhbXAwMSIsImxlcnAiLCJmMSIsImYyIiwidCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFNQSxNQUFNLElBQVo7QUFDQSxJQUFNQyxVQUFVLElBQWhCO0FBQ0EsSUFBTUMsT0FBTyxHQUFiO0FBQ0EsSUFBTUMsTUFBTSxDQUFaOztBQUVBQyxLQUFLQyxTQUFMLEdBQWlCSixVQUFVRyxLQUFLRSxFQUFoQztBQUNBRixLQUFLRyxPQUFMLEdBQWVMLE9BQU9FLEtBQUtFLEVBQTNCO0FBQ0FGLEtBQUtJLFFBQUwsR0FBZ0IsQ0FBQ04sSUFBRCxHQUFRRSxLQUFLRSxFQUE3QjtBQUNBRixLQUFLSyxNQUFMLEdBQWNOLE1BQU1DLEtBQUtFLEVBQXpCO0FBQ0FGLEtBQUtNLEdBQUwsR0FBVyxDQUFDTixLQUFLRSxFQUFqQjtBQUNBRixLQUFLTyxVQUFMLEdBQWtCVixVQUFVRyxLQUFLTSxHQUFqQztBQUNBTixLQUFLUSxRQUFMLEdBQWdCVixPQUFPRSxLQUFLTSxHQUE1QjtBQUNBTixLQUFLUyxPQUFMLEdBQWVWLE1BQU1DLEtBQUtNLEdBQTFCO0FBQ0FOLEtBQUtVLE1BQUwsR0FBYyxJQUFJVixLQUFLRSxFQUF2QjtBQUNBRixLQUFLVyxVQUFMLEdBQWtCLE1BQU1YLEtBQUtFLEVBQTdCO0FBQ0FGLEtBQUtZLFVBQUwsR0FBa0JaLEtBQUtFLEVBQUwsR0FBVSxHQUE1Qjs7QUFFQTtBQUNBRixLQUFLSixHQUFMLEdBQVdBLEdBQVg7O0FBRUE7Ozs7Ozs7QUFPQSxTQUFTaUIsS0FBVCxDQUFlQyxDQUFmLEVBQWtCQyxJQUFsQixFQUF3QkMsSUFBeEIsRUFBOEI7QUFDNUIsU0FBT0YsSUFBSUMsSUFBSixHQUFXQSxJQUFYLEdBQW1CRCxJQUFJRSxJQUFKLEdBQVdBLElBQVgsR0FBa0JGLENBQTVDO0FBQ0Q7O0FBRUQ7Ozs7O0FBS0EsU0FBU0csT0FBVCxDQUFpQkgsQ0FBakIsRUFBb0I7QUFDbEIsU0FBT0EsSUFBSSxDQUFKLEdBQVEsQ0FBUixHQUFhQSxJQUFJLENBQUosR0FBUSxDQUFSLEdBQVlBLENBQWhDO0FBQ0Q7O0FBRUQ7Ozs7Ozs7QUFPQSxTQUFTSSxJQUFULENBQWNDLEVBQWQsRUFBa0JDLEVBQWxCLEVBQXNCQyxDQUF0QixFQUF5QjtBQUN2QixTQUFPRixNQUFNLElBQUlFLENBQVYsSUFBZUQsS0FBS0MsQ0FBM0I7QUFDRDs7QUFFRHJCLEtBQUthLEtBQUwsR0FBYUEsS0FBYjtBQUNBYixLQUFLaUIsT0FBTCxHQUFlQSxPQUFmO0FBQ0FqQixLQUFLa0IsSUFBTCxHQUFZQSxJQUFaOztrQkFFZWxCLEkiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEVQUyA9IDFlLTVcbmNvbnN0IHF1YXJ0ZXIgPSAwLjI1XG5jb25zdCBoYWxmID0gMC41XG5jb25zdCB0d28gPSAyXG5cbk1hdGguUVVBVEVSX1BJID0gcXVhcnRlciAqIE1hdGguUElcbk1hdGguSEFMRl9QSSA9IGhhbGYgKiBNYXRoLlBJXG5NYXRoLkhBTEZfTlBJID0gLWhhbGYgKiBNYXRoLlBJXG5NYXRoLlRXT19QSSA9IHR3byAqIE1hdGguUElcbk1hdGguTlBJID0gLU1hdGguUElcbk1hdGguTlFVQVRFUl9QSSA9IHF1YXJ0ZXIgKiBNYXRoLk5QSVxuTWF0aC5OSEFMRl9QSSA9IGhhbGYgKiBNYXRoLk5QSVxuTWF0aC5OVFdPX1BJID0gdHdvICogTWF0aC5OUElcbk1hdGguSU5WX1BJID0gMSAvIE1hdGguUElcbk1hdGguUkFEX1RPX0RFRyA9IDE4MCAvIE1hdGguUElcbk1hdGguREVHX1RPX1JBRCA9IE1hdGguUEkgLyAxODBcblxuLy8gdGhpcyBjb3VsZCBiZSB1c2VmdWwgdG8gdHdlYWsgaW4geW91ciBhcHAsIGRlcGVuZHMgb24geW91ciB3b3JsZCByZXNvbHV0aW9uXG5NYXRoLkVQUyA9IEVQU1xuXG4vKipcbiAqIENsYW1wIGYgdG8gYmUgYmV0d2VlbiBhIG1pbiBhbmQgbWF4LlxuICogQHBhcmFtIHtOdW1iZXJ9IGZcbiAqIEBwYXJhbSB7TnVtYmVyfSBtaW52XG4gKiBAcGFyYW0ge051bWJlcn0gbWF4dlxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5mdW5jdGlvbiBjbGFtcChmLCBtaW52LCBtYXh2KSB7XG4gIHJldHVybiBmIDwgbWludiA/IG1pbnYgOiAoZiA+IG1heHYgPyBtYXh2IDogZilcbn1cblxuLyoqXG4gKiBDbGFtcCBmIHRvIGJlIGJldHdlZW4gMCBhbmQgMS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBmXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGNsYW1wMDEoZikge1xuICByZXR1cm4gZiA8IDAgPyAwIDogKGYgPiAxID8gMSA6IGYpXG59XG5cbi8qKlxuICogTGluZWFybHkgaW50ZXJwb2xhdGUgKG9yIGV4dHJhcG9sYXRlKSBiZXR3ZWVuIEBjIGYxIGFuZCBAYyBmMiBieSBAYyB0IHBlcmNlbnQuXG4gKiBAcGFyYW0ge051bWJlcn0gZjFcbiAqIEBwYXJhbSB7TnVtYmVyfSBmMlxuICogQHBhcmFtIHtOdW1iZXJ9IHRcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuZnVuY3Rpb24gbGVycChmMSwgZjIsIHQpIHtcbiAgcmV0dXJuIGYxICogKDEgLSB0KSArIGYyICogdFxufVxuXG5NYXRoLmNsYW1wID0gY2xhbXBcbk1hdGguY2xhbXAwMSA9IGNsYW1wMDFcbk1hdGgubGVycCA9IGxlcnBcblxuZXhwb3J0IGRlZmF1bHQgTWF0aFxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbWF0aC9tYXRoLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _aabox2d = __webpack_require__(2);\n\nvar AABox2d = _interopRequireWildcard(_aabox2d);\n\nvar _fillStyle = __webpack_require__(17);\n\nvar _fillStyle2 = _interopRequireDefault(_fillStyle);\n\nvar _strokeStyle = __webpack_require__(18);\n\nvar _strokeStyle2 = _interopRequireDefault(_strokeStyle);\n\nvar _transform2d = __webpack_require__(11);\n\nvar _transform2d2 = _interopRequireDefault(_transform2d);\n\nvar _aggregation2 = __webpack_require__(7);\n\nvar _aggregation3 = _interopRequireDefault(_aggregation2);\n\nvar _basicStyle = __webpack_require__(8);\n\nvar _basicStyle2 = _interopRequireDefault(_basicStyle);\n\nvar _eventHandler = __webpack_require__(12);\n\nvar _eventHandler2 = _interopRequireDefault(_eventHandler);\n\nvar _glMatrix = __webpack_require__(1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @typedef {object} CoreShapeOptions\n * @property {number} [zIndex=0] Z index draw order of the shape. Lower numbers get drawn before larger numbers\n */\n\n/**\n * Shape geom modification event\n * @event Shape#geomChanged\n * @type {object}\n * @property {string} attr Name of the attribute modified\n * @property {} prevVal Previous value of the attribute prior to modification\n * @property {} currVal Value of the attribute post modification\n */\n\n/**\n * Shape modification event\n * @event EventedShape#changed\n * @type {object}\n * @property {string} attr Name of the attribute modified\n * @property {} prevVal Previous value of the attribute prior to modification\n * @property {} currVal Value of the attribute post modification\n */\n\n/**\n * @class Defines the core functionality for all shapes\n * @extends {EventHandler}\n */\nvar CoreBaseShape = function (_EventHandler) {\n  _inherits(CoreBaseShape, _EventHandler);\n\n  /**\n   * Creates new core functionality for a shape\n   * @param  {CoreShapeOptions} [opts]\n   * @return {CoreBaseShape}\n   */\n  function CoreBaseShape(opts) {\n    _classCallCheck(this, CoreBaseShape);\n\n    var _this = _possibleConstructorReturn(this, (CoreBaseShape.__proto__ || Object.getPrototypeOf(CoreBaseShape)).call(this, [\"changed:xform\", \"changed:style\", \"changed:order\", \"changed:visibility\", \"changed:geom\"]));\n\n    _this._aabox = AABox2d.create();\n    _this._zIndex = opts && opts.zIndex ? opts.zIndex : 0;\n    _this._visible = true;\n    _this._geomDirty = false;\n\n    _this._fullXform = _glMatrix.mat2d.create();\n    return _this;\n  }\n\n  /**\n   * Sets the z index (back to front draw order) of the shape\n   * @param  {number} zIndex\n   * @fires  EventedShape#changed\n   * @return {CoreBaseShape}        this\n   */\n\n\n  _createClass(CoreBaseShape, [{\n    key: \"zIndex\",\n    set: function set(zIndex) {\n      if (!Number.isInteger(zIndex)) {\n        throw new Error(\"zIndex must be an integer\");\n      }\n      if (zIndex !== this._zIndex) {\n        var prev = this._zIndex;\n        this._zIndex = zIndex;\n        this.fire(\"changed:order\", {\n          attr: \"zIndex\",\n          prevVal: prev,\n          currVal: this._zIndex\n        });\n      }\n      return this;\n    }\n\n    /**\n     * Gets the current z index (i.e. draw/layer order) of the shape\n     * @return {number}\n     */\n    ,\n    get: function get() {\n      return this._zIndex;\n    }\n\n    /**\n     * Gets a reference to the current axis-aligned bounding box of the\n     * shape\n     * @return {AABox2d}\n     * @readOnly\n     */\n\n  }, {\n    key: \"aabox\",\n    get: function get() {\n      this._updateAABox();\n      return this._aabox;\n    }\n\n    /**\n     * Sets the visibility of the shape\n     * @param  {Boolean} visible If true, the shape is considered visible\n     * @fires  EventedShape#changed\n     * @return {CoreBaseShape}         this\n     * @throws {Error} If argument is not a boolean type\n     */\n\n  }, {\n    key: \"visible\",\n    set: function set(visible) {\n      if (typeof visible !== \"boolean\") {\n        throw new Error(\"visible must be a boolean\");\n      }\n\n      if (visible !== this._visible) {\n        this._visible = visible;\n        this.fire(\"changed:visibility\", {\n          attr: \"visible\",\n          prevVal: !this._visible,\n          currVal: this._visible\n        });\n      }\n\n      return this;\n    }\n\n    /**\n     * Gets the current visibility of the shape\n     * @return {boolean}\n     */\n    ,\n    get: function get() {\n      return this._visible;\n    }\n  }]);\n\n  return CoreBaseShape;\n}(_eventHandler2.default);\n\n/**\n * @class Defines the basic functionality of all shapes. This includes\n *        mixing in from EventedTransform2d so that affine transformations\n *        can be applied to the shape. Also includes mixing in fill and stroke\n *        properties so that the shape's renderable properties can be modified.\n * @extends {CoreBaseShape}\n * @mixin {EventedTransform2d}\n * @mixin {EventedFillStyle}\n * @mixin {EventedStrokeStyle}\n */\n\n\nvar BaseShape = function (_aggregation) {\n  _inherits(BaseShape, _aggregation);\n\n  /**\n   * Creates new basic functionality (including transform, fill style, and stroke style properties)\n   * for a shape\n   * @param  {object} opts\n   * @return {BaseShape}\n   */\n  function BaseShape(opts) {\n    _classCallCheck(this, BaseShape);\n\n    var _this2 = _possibleConstructorReturn(this, (BaseShape.__proto__ || Object.getPrototypeOf(BaseShape)).call(this, opts));\n\n    _this2._stateStack = [];\n    return _this2;\n  }\n\n  /**\n   * Saves the current state of the shape so that it can be restored later.\n   * @return {BaseShape} this\n   */\n\n\n  _createClass(BaseShape, [{\n    key: \"save\",\n    value: function save() {\n      // Currently only the state of the fill/stroke style properties\n      // and the z index are saved. May want to expand this to include\n      // all modifiable properties (i.e. transform props and visibility prop)\n      var state = new _basicStyle2.default();\n      _basicStyle2.default.copyBasicStyle(this, state);\n      state.zIndex = this.zIndex;\n      this._stateStack.push(state);\n      return this;\n    }\n\n    /**\n     * Pops a saved state from the top of the saved state stack\n     * @return {BaseShape} this\n     */\n\n  }, {\n    key: \"restore\",\n    value: function restore() {\n      // Currently only restores the state of the fill/stroke style properties\n      // and the z index. May want to expand this to include\n      // all modifiable properties (i.e. transform props and visibility prop)\n      var state = this._stateStack.pop();\n      if (state) {\n        _basicStyle2.default.copyBasicStyle(state, this);\n        this.zIndex = state.zIndex;\n      }\n      return this;\n    }\n\n    /**\n     * Gets the visibility of the shape\n     * @return {boolean}\n     * @override\n     */\n\n  }, {\n    key: \"getGlobalDimensions\",\n\n\n    /**\n     * Gets the width/height of the shape after the parent transforms are applied\n     * @return {Vec2d} Width/Height of the shape after all parent transforms applied\n     */\n    value: function getGlobalDimensions() {\n      var scale = [0, 0];\n      _glMatrix.mat2d.svd(null, scale, null, this.globalXform);\n      scale[0] *= this.width;\n      scale[1] *= this.height;\n      return scale;\n    }\n\n    /**\n     * Returns true the shape contains a screen/world space point\n     * @param  {Point2d} screenPt           The point to check in screen/pixel space\n     * @param  {Poitn2d} worldPt            The point to check in world space\n     * @param  {Mat2d} worldToScreenMatrix  The transform matrix from world to screen space\n     * @param  {CanvasRenderingContext2D} ctx The 2d rendering context\n     * @return {boolean}                    True if the shape contains the point, false otherwise\n     */\n\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(screenPt, worldPt, worldToScreenMatrix, ctx) {\n      // Should we update here, or is it safe to\n      // say that this is stateful, meaning a render\n      // should have been performed beforehand which\n      // would've updated its state\n      var rtn = false;\n      var aabox = this.aabox;\n\n      // Check if the point is contained by the shape's bounds first\n      if (this.visible && AABox2d.containsPt(aabox, worldPt)) {\n        // re-draw the shape (invisible) so that we can use canvas's\n        // isPointInPath/isPointInStroke api calls. Doing that\n        // as this should be compatible across all browsers\n        ctx.save();\n        ctx.setTransform(this._fullXform[0], this._fullXform[1], this._fullXform[2], this._fullXform[3], this._fullXform[4], this._fullXform[5]);\n        ctx.beginPath();\n        this._draw(ctx);\n        ctx.strokeStyle = \"rgba(0,0,0,0)\";\n        ctx.lineWidth = this.strokeWidth + 5; // eslint-disable-line no-magic-numbers\n        ctx.dashPattern = [];\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.stroke();\n        if (this.isFillVisible() && ctx.isPointInPath(screenPt[0], screenPt[1]) || this.isStrokeVisible() && ctx.isPointInStroke(screenPt[0], screenPt[1])) {\n          rtn = true;\n        }\n        ctx.restore();\n      }\n      return rtn;\n    }\n\n    /**\n     * Debug function to draw the bounds of the shape\n     * @param  {CanvasRenderingContext2D} ctx                 2d rendering context\n     * @param  {Mat2d} worldToScreenMatrix Transform from world to screen space\n     * @param  {StrokeStyle} boundsStrokeStyle   The stroke style to use to render the bounds\n     */\n\n  }, {\n    key: \"renderBounds\",\n    value: function renderBounds(ctx, worldToScreenMatrix, boundsStrokeStyle) {\n      ctx.save();\n      ctx.setTransform(worldToScreenMatrix[0], worldToScreenMatrix[1], worldToScreenMatrix[2], worldToScreenMatrix[3], worldToScreenMatrix[4], worldToScreenMatrix[5]);\n      boundsStrokeStyle.setStrokeCtx(ctx);\n      var center = [0, 0];\n      var extents = [0, 0];\n      var aabox = this.aabox;\n      AABox2d.getCenter(center, aabox);\n      AABox2d.getExtents(extents, aabox);\n      ctx.beginPath();\n      ctx.rect(center[0] - extents[0], center[1] - extents[1], extents[0] * 2, extents[1] * 2);\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    /**\n     * Called when the local transform (does not include parent transforms) of the Transform2d\n     * mixin is modified. Used to be notified internally that the shape's bounds needs updating\n     * @private\n     */\n\n  }, {\n    key: \"_localXformUpdated\",\n    value: function _localXformUpdated() {\n      this._boundsOutOfDate = true;\n    }\n\n    /**\n     * Called when the global transform (includes parent transforms) of the Transform2d\n     * mixin is modified. Used to be notified internally that the shape's bounds needs updating\n     * @private\n     */\n\n  }, {\n    key: \"_globalXformUpdated\",\n    value: function _globalXformUpdated() {\n      this._boundsOutOfDate = true;\n    }\n\n    /**\n     * Renders the shape using a 2d rendering context\n     * @param  {CanvasRenderingContext2d} ctx                 2d rendering context\n     * @param  {Mat2d} worldToScreenMatrix Transform from world to screen space,\n     *                                     usually provided by a camera\n     * @param  {DrawStyleState} styleState Manages the current state of the fill/stroke style attrs\n     *                                     of the 2d rendering context. This is self-managed to minimize\n     *                                     context state switches\n     * @param  {boolean} [doFill=null]     If provided, used to manually override whether to fill the\n     *                                     shape.\n     * @param  {boolean} [doStroke=null]   If provided, used to manually override whether to stroke the\n     *                                     shape.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render(ctx, worldToScreenMatrix, styleState) {\n      var doFill = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var doStroke = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n      this.transformCtx(ctx, this._fullXform, worldToScreenMatrix);\n\n      ctx.beginPath();\n\n      var rtn = this._draw(ctx);\n      if (rtn || typeof rtn === \"undefined\") {\n        if (this.isFillVisible() && (doFill === null || Boolean(doFill))) {\n          styleState.setFillStyle(ctx, this);\n          ctx.fill();\n        }\n\n        if (this.isStrokeVisible() && (doStroke === null || Boolean(doStroke))) {\n          styleState.setStrokeStyle(ctx, this);\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n          ctx.stroke();\n        }\n      }\n    }\n\n    /**\n     * Copies the fill/stroke style from one BasicStyle object to this shape\n     * @param {BasicStyle} newStyle The style to copy from.\n     * @return {BaseShape} this\n     */\n\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(newStyle) {\n      _basicStyle2.default.copyBasicStyle(newStyle, this);\n      return this;\n    }\n\n    /**\n     * Returns a JSON object containing the properties of this shape\n     * @return {object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var state = this; // eslint-disable-line consistent-this\n      if (this._stateStack && this._stateStack.length) {\n        state = this._stateStack[0];\n      }\n      return Object.assign({\n        // type: this.constructor.name,\n        // NOTE: I wanted to use the above call, which would keep the type\n        // consistent with the name of the class, but this isn't always\n        // the case, as was found out a few times when trying to add\n        // this to immerse\n        visible: this.visible,\n        zIndex: state.zIndex\n      }, _basicStyle2.default.toJSON(state), _transform2d2.default.toJSON(this));\n    }\n\n    /**\n     * Compares two shapes, usually used to sort the shapes for drawing\n     * @param  {BaseShape} shape1\n     * @param  {BaseShape} shape2\n     * @return {number}        Returns < 0 if shape1 < shape2, > 0 if shape1 > shape2, 0 if shape1 === shape2\n     */\n\n  }, {\n    key: \"visible\",\n    get: function get() {\n      return this._visible && (this.isFillVisible() || this.isStrokeVisible());\n    }\n  }], [{\n    key: \"shapeCompare\",\n    value: function shapeCompare(shape1, shape2) {\n      var zIndex1 = shape1.zIndex;\n      var zIndex2 = shape2.zIndex;\n      if (zIndex1 < zIndex2) {\n        return -1;\n      } else if (zIndex1 > zIndex2) {\n        return 1;\n      }\n\n      var rtn = _fillStyle2.default.compareFillStyle(shape1, shape2);\n      if (!rtn) {\n        rtn = _strokeStyle2.default.compareStrokeStyle(shape1, shape2);\n      }\n\n      return rtn;\n    }\n  }]);\n\n  return BaseShape;\n}((0, _aggregation3.default)(CoreBaseShape, (0, _transform2d.createEventedTransform2dMixin)(\"changed:xform\"), (0, _fillStyle.createEventedFillStyleMixin)(\"changed:style\"), (0, _strokeStyle.createEventedStrokeStyleMixin)(\"changed:style\")));\n\nexports.default = BaseShape;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/*\n **  Aggregation -- Aggregation of Base Class and Mixin Classes\n **  Copyright (c) 2015 Ralf S. Engelschall <rse@engelschall.com>\n **\n **  Permission is hereby granted, free of charge, to any person obtaining\n **  a copy of this software and associated documentation files (the\n **  \"Software\"), to deal in the Software without restriction, including\n **  without limitation the rights to use, copy, modify, merge, publish,\n **  distribute, sublicense, and/or sell copies of the Software, and to\n **  permit persons to whom the Software is furnished to do so, subject to\n **  the following conditions:\n **\n **  The above copyright notice and this permission notice shall be included\n **  in all copies or substantial portions of the Software.\n **\n **  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n **  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n **  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n **  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n **  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n **  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n **  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/*  ==== ECMAScript 6 variant ====  */\n\n/**\n * Creates a new class constructor function using an optional base class\n * and an optional list of mixins. If mixins need initializing, then\n * they should contain an 'initializer' member function\n * @param  {function}    base   base class construct function, if null, a bare-bones\n *                              base class is used by default\n * @param  {...[function]} mixins mixin classes\n * @return {function}           new class constructor function\n */\nvar aggregation = function aggregation(base) {\n  for (var _len = arguments.length, mixins = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    mixins[_key - 1] = arguments[_key];\n  }\n\n  /*  create aggregation class  */\n  var aggregate = base ? function (_base) {\n    _inherits(__Aggregate, _base);\n\n    function __Aggregate() {\n      var _ref;\n\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _classCallCheck(this, __Aggregate);\n\n      /*  call mixin's initializer  */\n      var _this = _possibleConstructorReturn(this, (_ref = __Aggregate.__proto__ || Object.getPrototypeOf(__Aggregate)).call.apply(_ref, [this].concat(args)));\n      /*  call base class constructor  */\n\n\n      mixins.forEach(function (mixin) {\n        if (typeof mixin.prototype.initializer === \"function\") {\n          var _mixin$prototype$init;\n\n          (_mixin$prototype$init = mixin.prototype.initializer).call.apply(_mixin$prototype$init, [_this].concat(args));\n        }\n      });\n      return _this;\n    }\n\n    return __Aggregate;\n  }(base) : function () {/* do nothing */};\n\n  /*  copy properties  */\n  var copyProps = function copyProps(target, source) {\n    Object.getOwnPropertyNames(source).concat(Object.getOwnPropertySymbols(source)).forEach(function (prop) {\n      if (prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/)) {\n        return;\n      }\n      if (base && prop.match(/^(?:initializer)$/)) {\n        return;\n      }\n      Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop));\n    });\n  };\n\n  /*  copy all properties of all mixins into aggregation class  */\n  mixins.forEach(function (mixin) {\n    copyProps(aggregate.prototype, mixin.prototype);\n    copyProps(aggregate, mixin);\n  });\n\n  return aggregate;\n};\n\nexports.default = aggregation;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi91dGlsL2FnZ3JlZ2F0aW9uLmpzP2I4ODAiXSwibmFtZXMiOlsiYWdncmVnYXRpb24iLCJiYXNlIiwibWl4aW5zIiwiYWdncmVnYXRlIiwiYXJncyIsImZvckVhY2giLCJtaXhpbiIsInByb3RvdHlwZSIsImluaXRpYWxpemVyIiwiY2FsbCIsImNvcHlQcm9wcyIsInRhcmdldCIsInNvdXJjZSIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJjb25jYXQiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wIiwibWF0Y2giLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCQTs7QUFFQTs7Ozs7Ozs7O0FBU0EsSUFBTUEsY0FBYyxTQUFkQSxXQUFjLENBQUNDLElBQUQsRUFBcUI7QUFBQSxvQ0FBWEMsTUFBVztBQUFYQSxVQUFXO0FBQUE7O0FBRXZDO0FBQ0EsTUFBTUMsWUFBYUY7QUFBQTs7QUFDakIsMkJBQXFCO0FBQUE7O0FBQUEseUNBQU5HLElBQU07QUFBTkEsWUFBTTtBQUFBOztBQUFBOztBQUluQjtBQUptQix1SkFFVkEsSUFGVTtBQUNuQjs7O0FBSUFGLGFBQU9HLE9BQVAsQ0FBZSxVQUFDQyxLQUFELEVBQVc7QUFDeEIsWUFBSSxPQUFPQSxNQUFNQyxTQUFOLENBQWdCQyxXQUF2QixLQUF1QyxVQUEzQyxFQUF1RDtBQUFBOztBQUFFLHlDQUFNRCxTQUFOLENBQWdCQyxXQUFoQixFQUE0QkMsSUFBNUIsNkNBQTBDTCxJQUExQztBQUFpRDtBQUMzRyxPQUZEO0FBTG1CO0FBUXBCOztBQVRnQjtBQUFBLElBQWlDSCxJQUFqQyxJQVVmLFlBQU0sQ0FBRSxnQkFBa0IsQ0FWOUI7O0FBWUE7QUFDQSxNQUFNUyxZQUFZLFNBQVpBLFNBQVksQ0FBQ0MsTUFBRCxFQUFTQyxNQUFULEVBQW9CO0FBQ3BDQyxXQUFPQyxtQkFBUCxDQUEyQkYsTUFBM0IsRUFDR0csTUFESCxDQUNVRixPQUFPRyxxQkFBUCxDQUE2QkosTUFBN0IsQ0FEVixFQUVHUCxPQUZILENBRVcsVUFBQ1ksSUFBRCxFQUFVO0FBQ2pCLFVBQUlBLEtBQUtDLEtBQUwsQ0FBVyxtRkFBWCxDQUFKLEVBQXFHO0FBQUU7QUFBUTtBQUMvRyxVQUFJakIsUUFBUWdCLEtBQUtDLEtBQUwsQ0FBVyxtQkFBWCxDQUFaLEVBQTZDO0FBQUU7QUFBUTtBQUN2REwsYUFBT00sY0FBUCxDQUFzQlIsTUFBdEIsRUFBOEJNLElBQTlCLEVBQW9DSixPQUFPTyx3QkFBUCxDQUFnQ1IsTUFBaEMsRUFBd0NLLElBQXhDLENBQXBDO0FBQ0QsS0FOSDtBQU9ELEdBUkQ7O0FBVUE7QUFDQWYsU0FBT0csT0FBUCxDQUFlLFVBQUNDLEtBQUQsRUFBVztBQUN4QkksY0FBVVAsVUFBVUksU0FBcEIsRUFBK0JELE1BQU1DLFNBQXJDO0FBQ0FHLGNBQVVQLFNBQVYsRUFBcUJHLEtBQXJCO0FBQ0QsR0FIRDs7QUFLQSxTQUFPSCxTQUFQO0FBQ0QsQ0FqQ0Q7O2tCQW1DZUgsVyIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqKiAgQWdncmVnYXRpb24gLS0gQWdncmVnYXRpb24gb2YgQmFzZSBDbGFzcyBhbmQgTWl4aW4gQ2xhc3Nlc1xuICoqICBDb3B5cmlnaHQgKGMpIDIwMTUgUmFsZiBTLiBFbmdlbHNjaGFsbCA8cnNlQGVuZ2Vsc2NoYWxsLmNvbT5cbiAqKlxuICoqICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcbiAqKiAgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gKiogIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuICoqICB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4gKiogIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICoqICBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cbiAqKiAgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICoqXG4gKiogIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiogIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICoqXG4gKiogIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiogIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICoqICBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuXG4gKiogIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiogIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG4gKiogIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4gKiogIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbi8qICA9PT09IEVDTUFTY3JpcHQgNiB2YXJpYW50ID09PT0gICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBjbGFzcyBjb25zdHJ1Y3RvciBmdW5jdGlvbiB1c2luZyBhbiBvcHRpb25hbCBiYXNlIGNsYXNzXG4gKiBhbmQgYW4gb3B0aW9uYWwgbGlzdCBvZiBtaXhpbnMuIElmIG1peGlucyBuZWVkIGluaXRpYWxpemluZywgdGhlblxuICogdGhleSBzaG91bGQgY29udGFpbiBhbiAnaW5pdGlhbGl6ZXInIG1lbWJlciBmdW5jdGlvblxuICogQHBhcmFtICB7ZnVuY3Rpb259ICAgIGJhc2UgICBiYXNlIGNsYXNzIGNvbnN0cnVjdCBmdW5jdGlvbiwgaWYgbnVsbCwgYSBiYXJlLWJvbmVzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2UgY2xhc3MgaXMgdXNlZCBieSBkZWZhdWx0XG4gKiBAcGFyYW0gIHsuLi5bZnVuY3Rpb25dfSBtaXhpbnMgbWl4aW4gY2xhc3Nlc1xuICogQHJldHVybiB7ZnVuY3Rpb259ICAgICAgICAgICBuZXcgY2xhc3MgY29uc3RydWN0b3IgZnVuY3Rpb25cbiAqL1xuY29uc3QgYWdncmVnYXRpb24gPSAoYmFzZSwgLi4ubWl4aW5zKSA9PiB7XG5cbiAgLyogIGNyZWF0ZSBhZ2dyZWdhdGlvbiBjbGFzcyAgKi9cbiAgY29uc3QgYWdncmVnYXRlID0gKGJhc2UgPyBjbGFzcyBfX0FnZ3JlZ2F0ZSBleHRlbmRzIGJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgIC8qICBjYWxsIGJhc2UgY2xhc3MgY29uc3RydWN0b3IgICovXG4gICAgICBzdXBlciguLi5hcmdzKVxuXG4gICAgICAvKiAgY2FsbCBtaXhpbidzIGluaXRpYWxpemVyICAqL1xuICAgICAgbWl4aW5zLmZvckVhY2goKG1peGluKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgbWl4aW4ucHJvdG90eXBlLmluaXRpYWxpemVyID09PSBcImZ1bmN0aW9uXCIpIHsgbWl4aW4ucHJvdG90eXBlLmluaXRpYWxpemVyLmNhbGwodGhpcywgLi4uYXJncykgfVxuICAgICAgfSlcbiAgICB9XG4gIH0gOiAoKSA9PiB7IC8qIGRvIG5vdGhpbmcgKi8gfSlcblxuICAvKiAgY29weSBwcm9wZXJ0aWVzICAqL1xuICBjb25zdCBjb3B5UHJvcHMgPSAodGFyZ2V0LCBzb3VyY2UpID0+IHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2UpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKSlcbiAgICAgIC5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICAgIGlmIChwcm9wLm1hdGNoKC9eKD86Y29uc3RydWN0b3J8cHJvdG90eXBlfGFyZ3VtZW50c3xjYWxsZXJ8bmFtZXxiaW5kfGNhbGx8YXBwbHl8dG9TdHJpbmd8bGVuZ3RoKSQvKSkgeyByZXR1cm4gfVxuICAgICAgICBpZiAoYmFzZSAmJiBwcm9wLm1hdGNoKC9eKD86aW5pdGlhbGl6ZXIpJC8pKSB7IHJldHVybiB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3AsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBwcm9wKSlcbiAgICAgIH0pXG4gIH1cblxuICAvKiAgY29weSBhbGwgcHJvcGVydGllcyBvZiBhbGwgbWl4aW5zIGludG8gYWdncmVnYXRpb24gY2xhc3MgICovXG4gIG1peGlucy5mb3JFYWNoKChtaXhpbikgPT4ge1xuICAgIGNvcHlQcm9wcyhhZ2dyZWdhdGUucHJvdG90eXBlLCBtaXhpbi5wcm90b3R5cGUpXG4gICAgY29weVByb3BzKGFnZ3JlZ2F0ZSwgbWl4aW4pXG4gIH0pXG5cbiAgcmV0dXJuIGFnZ3JlZ2F0ZVxufVxuXG5leHBvcnQgZGVmYXVsdCBhZ2dyZWdhdGlvblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vdXRpbC9hZ2dyZWdhdGlvbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _aggregation2 = __webpack_require__(7);\n\nvar _aggregation3 = _interopRequireDefault(_aggregation2);\n\nvar _fillStyle = __webpack_require__(17);\n\nvar _fillStyle2 = _interopRequireDefault(_fillStyle);\n\nvar _strokeStyle = __webpack_require__(18);\n\nvar _strokeStyle2 = _interopRequireDefault(_strokeStyle);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @class  Basic shape style for a 2d rendering context\n * @extends {FillStyle}\n * @extends {StrokeStyle}\n */\nvar BasicStyle = function (_aggregation) {\n  _inherits(BasicStyle, _aggregation);\n\n  function BasicStyle() {\n    _classCallCheck(this, BasicStyle);\n\n    return _possibleConstructorReturn(this, (BasicStyle.__proto__ || Object.getPrototypeOf(BasicStyle)).apply(this, arguments));\n  }\n\n  _createClass(BasicStyle, null, [{\n    key: \"copyBasicStyle\",\n\n    /**\n     * Copies the properties from one BasicStyle to another\n     * @param  {BasicStyle} srcBasicStyle The style to copy from\n     * @param  {BasicStyle} dstBasicStyle The style to copy to\n     */\n    value: function copyBasicStyle(srcBasicStyle, dstBasicStyle) {\n      _fillStyle2.default.copyFillStyle(srcBasicStyle, dstBasicStyle);\n      _strokeStyle2.default.copyStrokeStyle(srcBasicStyle, dstBasicStyle);\n    }\n\n    /**\n     * Converts a BasicStyle instance to a JSON object\n     * @param  {BasicStyle} basicStyleObj\n     * @return {{fillColor   : string,\n     *           strokeColor : string,\n     *           strokeWidth : number,\n     *           lineJoin    : string,\n     *           lineCap     : string,\n     *           dashPattern : number[],\n     *           dashOffset  : number\n     *          }}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(basicStyleObj) {\n      return Object.assign(_fillStyle2.default.toJSON(basicStyleObj), _strokeStyle2.default.toJSON(basicStyleObj));\n    }\n  }]);\n\n  return BasicStyle;\n}((0, _aggregation3.default)(function BaseBasicStyle() {\n  _classCallCheck(this, BaseBasicStyle);\n}, _fillStyle2.default, _strokeStyle2.default));\n\nexports.default = BasicStyle;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdHlsZS9iYXNpYy1zdHlsZS5qcz9kNTU5Il0sIm5hbWVzIjpbIkJhc2ljU3R5bGUiLCJzcmNCYXNpY1N0eWxlIiwiZHN0QmFzaWNTdHlsZSIsIkZpbGxTdHlsZSIsImNvcHlGaWxsU3R5bGUiLCJTdHJva2VTdHlsZSIsImNvcHlTdHJva2VTdHlsZSIsImJhc2ljU3R5bGVPYmoiLCJPYmplY3QiLCJhc3NpZ24iLCJ0b0pTT04iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7Ozs7O0FBRUE7Ozs7O0lBS3FCQSxVOzs7Ozs7Ozs7Ozs7QUFDbkI7Ozs7O21DQUtzQkMsYSxFQUFlQyxhLEVBQWU7QUFDbERDLDBCQUFVQyxhQUFWLENBQXdCSCxhQUF4QixFQUF1Q0MsYUFBdkM7QUFDQUcsNEJBQVlDLGVBQVosQ0FBNEJMLGFBQTVCLEVBQTJDQyxhQUEzQztBQUNEOztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7MkJBWWNLLGEsRUFBZTtBQUMzQixhQUFPQyxPQUFPQyxNQUFQLENBQWNOLG9CQUFVTyxNQUFWLENBQWlCSCxhQUFqQixDQUFkLEVBQStDRixzQkFBWUssTUFBWixDQUFtQkgsYUFBbkIsQ0FBL0MsQ0FBUDtBQUNEOzs7O0VBekJxQztBQUFBO0FBQUEsR0FBcUNKLG1CQUFyQyxFQUFnREUscUJBQWhELEM7O2tCQUFuQkwsVSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCJcblxuaW1wb3J0IGFnZ3JlZ2F0aW9uIGZyb20gXCIuLi91dGlsL2FnZ3JlZ2F0aW9uXCJcbmltcG9ydCBGaWxsU3R5bGUgZnJvbSBcIi4uL3N0eWxlL2ZpbGwtc3R5bGVcIlxuaW1wb3J0IFN0cm9rZVN0eWxlIGZyb20gXCIuLi9zdHlsZS9zdHJva2Utc3R5bGVcIlxuXG4vKipcbiAqIEBjbGFzcyAgQmFzaWMgc2hhcGUgc3R5bGUgZm9yIGEgMmQgcmVuZGVyaW5nIGNvbnRleHRcbiAqIEBleHRlbmRzIHtGaWxsU3R5bGV9XG4gKiBAZXh0ZW5kcyB7U3Ryb2tlU3R5bGV9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2ljU3R5bGUgZXh0ZW5kcyBhZ2dyZWdhdGlvbihjbGFzcyBCYXNlQmFzaWNTdHlsZSB7fSwgRmlsbFN0eWxlLCBTdHJva2VTdHlsZSkge1xuICAvKipcbiAgICogQ29waWVzIHRoZSBwcm9wZXJ0aWVzIGZyb20gb25lIEJhc2ljU3R5bGUgdG8gYW5vdGhlclxuICAgKiBAcGFyYW0gIHtCYXNpY1N0eWxlfSBzcmNCYXNpY1N0eWxlIFRoZSBzdHlsZSB0byBjb3B5IGZyb21cbiAgICogQHBhcmFtICB7QmFzaWNTdHlsZX0gZHN0QmFzaWNTdHlsZSBUaGUgc3R5bGUgdG8gY29weSB0b1xuICAgKi9cbiAgc3RhdGljIGNvcHlCYXNpY1N0eWxlKHNyY0Jhc2ljU3R5bGUsIGRzdEJhc2ljU3R5bGUpIHtcbiAgICBGaWxsU3R5bGUuY29weUZpbGxTdHlsZShzcmNCYXNpY1N0eWxlLCBkc3RCYXNpY1N0eWxlKVxuICAgIFN0cm9rZVN0eWxlLmNvcHlTdHJva2VTdHlsZShzcmNCYXNpY1N0eWxlLCBkc3RCYXNpY1N0eWxlKVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgQmFzaWNTdHlsZSBpbnN0YW5jZSB0byBhIEpTT04gb2JqZWN0XG4gICAqIEBwYXJhbSAge0Jhc2ljU3R5bGV9IGJhc2ljU3R5bGVPYmpcbiAgICogQHJldHVybiB7e2ZpbGxDb2xvciAgIDogc3RyaW5nLFxuICAgKiAgICAgICAgICAgc3Ryb2tlQ29sb3IgOiBzdHJpbmcsXG4gICAqICAgICAgICAgICBzdHJva2VXaWR0aCA6IG51bWJlcixcbiAgICogICAgICAgICAgIGxpbmVKb2luICAgIDogc3RyaW5nLFxuICAgKiAgICAgICAgICAgbGluZUNhcCAgICAgOiBzdHJpbmcsXG4gICAqICAgICAgICAgICBkYXNoUGF0dGVybiA6IG51bWJlcltdLFxuICAgKiAgICAgICAgICAgZGFzaE9mZnNldCAgOiBudW1iZXJcbiAgICogICAgICAgICAgfX1cbiAgICovXG4gIHN0YXRpYyB0b0pTT04oYmFzaWNTdHlsZU9iaikge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKEZpbGxTdHlsZS50b0pTT04oYmFzaWNTdHlsZU9iaiksIFN0cm9rZVN0eWxlLnRvSlNPTihiYXNpY1N0eWxlT2JqKSlcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3R5bGUvYmFzaWMtc3R5bGUuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _glMatrix = __webpack_require__(1);\n\n/**\n * Returns the Z coordinate of a 2D crossproduct\n * @param  {Vec2d} v1\n * @param  {Vec2d} v2\n * @return {Number}    z coord of the 2D crossproduct\n */\n_glMatrix.vec2.cross2d = function (v1, v2) {\n  return v1[0] * v2[1] - v1[1] * v2[0];\n};\n\n/**\n * Calculates the angle between two vectors when directionality\n * is unnecessary (only returns an angle between 0 and PI, inclusive)\n * @param  {Vec2d} v1\n * @param  {Vec2d} v2\n * @return {Number}    The angle between two vectors in radians [0, PI]\n */\n_glMatrix.vec2.angleFast = function (v1, v2) {\n  return Math.acos(_glMatrix.vec2.dot(v1, v2));\n};\n\n/**\n * Returns the true angle between two vectors\n * @param  {Vec2d} v1\n * @param  {Vec2d} v2\n * @return {Number}    The angle between two vectors in radians [-PI, PI]\n */\n_glMatrix.vec2.angle = function (v1, v2) {\n  var c = _glMatrix.vec2.dot(v1, v2);\n  var s = _glMatrix.vec2.cross2d(v1, v2);\n  var angle = Math.atan2(s, c);\n  return angle;\n};\n\n/**\n * Returns the angle of a vector from the positive X direction\n * in a cartesian coordinate system\n * @param  {Vec2d} v1\n * @return {Number}    The angle in radians [-PI, PI]\n */\n_glMatrix.vec2.anglePosX = function (v) {\n  var angle = Math.atan2(v[1], v[0]);\n  if (angle < 0) {\n    angle *= -1;\n  }\n  return angle;\n};\n\nexports.default = _glMatrix.vec2;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb3JlL3ZlYzJkLmpzPzhkZDMiXSwibmFtZXMiOlsiVmVjMmQiLCJjcm9zczJkIiwidjEiLCJ2MiIsImFuZ2xlRmFzdCIsIk1hdGgiLCJhY29zIiwiZG90IiwiYW5nbGUiLCJjIiwicyIsImF0YW4yIiwiYW5nbGVQb3NYIiwidiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBOztBQUVBOzs7Ozs7QUFNQUEsZUFBTUMsT0FBTixHQUFnQixVQUFDQyxFQUFELEVBQUtDLEVBQUw7QUFBQSxTQUFZRCxHQUFHLENBQUgsSUFBUUMsR0FBRyxDQUFILENBQVIsR0FBZ0JELEdBQUcsQ0FBSCxJQUFRQyxHQUFHLENBQUgsQ0FBcEM7QUFBQSxDQUFoQjs7QUFFQTs7Ozs7OztBQU9BSCxlQUFNSSxTQUFOLEdBQWtCLFVBQUNGLEVBQUQsRUFBS0MsRUFBTDtBQUFBLFNBQVlFLEtBQUtDLElBQUwsQ0FBVU4sZUFBTU8sR0FBTixDQUFVTCxFQUFWLEVBQWNDLEVBQWQsQ0FBVixDQUFaO0FBQUEsQ0FBbEI7O0FBRUE7Ozs7OztBQU1BSCxlQUFNUSxLQUFOLEdBQWMsVUFBQ04sRUFBRCxFQUFLQyxFQUFMLEVBQVk7QUFDeEIsTUFBTU0sSUFBSVQsZUFBTU8sR0FBTixDQUFVTCxFQUFWLEVBQWNDLEVBQWQsQ0FBVjtBQUNBLE1BQU1PLElBQUlWLGVBQU1DLE9BQU4sQ0FBY0MsRUFBZCxFQUFrQkMsRUFBbEIsQ0FBVjtBQUNBLE1BQU1LLFFBQVFILEtBQUtNLEtBQUwsQ0FBV0QsQ0FBWCxFQUFjRCxDQUFkLENBQWQ7QUFDQSxTQUFPRCxLQUFQO0FBQ0QsQ0FMRDs7QUFPQTs7Ozs7O0FBTUFSLGVBQU1ZLFNBQU4sR0FBa0IsYUFBSztBQUNyQixNQUFJSixRQUFRSCxLQUFLTSxLQUFMLENBQVdFLEVBQUUsQ0FBRixDQUFYLEVBQWlCQSxFQUFFLENBQUYsQ0FBakIsQ0FBWjtBQUNBLE1BQUlMLFFBQVEsQ0FBWixFQUFlO0FBQ2JBLGFBQVMsQ0FBQyxDQUFWO0FBQ0Q7QUFDRCxTQUFPQSxLQUFQO0FBQ0QsQ0FORDs7a0JBUWVSLGMiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiXG5cbmltcG9ydCB7dmVjMiBhcyBWZWMyZH0gZnJvbSBcImdsLW1hdHJpeFwiXG5cbi8qKlxuICogUmV0dXJucyB0aGUgWiBjb29yZGluYXRlIG9mIGEgMkQgY3Jvc3Nwcm9kdWN0XG4gKiBAcGFyYW0gIHtWZWMyZH0gdjFcbiAqIEBwYXJhbSAge1ZlYzJkfSB2MlxuICogQHJldHVybiB7TnVtYmVyfSAgICB6IGNvb3JkIG9mIHRoZSAyRCBjcm9zc3Byb2R1Y3RcbiAqL1xuVmVjMmQuY3Jvc3MyZCA9ICh2MSwgdjIpID0+IHYxWzBdICogdjJbMV0gLSB2MVsxXSAqIHYyWzBdXG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgYW5nbGUgYmV0d2VlbiB0d28gdmVjdG9ycyB3aGVuIGRpcmVjdGlvbmFsaXR5XG4gKiBpcyB1bm5lY2Vzc2FyeSAob25seSByZXR1cm5zIGFuIGFuZ2xlIGJldHdlZW4gMCBhbmQgUEksIGluY2x1c2l2ZSlcbiAqIEBwYXJhbSAge1ZlYzJkfSB2MVxuICogQHBhcmFtICB7VmVjMmR9IHYyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgIFRoZSBhbmdsZSBiZXR3ZWVuIHR3byB2ZWN0b3JzIGluIHJhZGlhbnMgWzAsIFBJXVxuICovXG5WZWMyZC5hbmdsZUZhc3QgPSAodjEsIHYyKSA9PiBNYXRoLmFjb3MoVmVjMmQuZG90KHYxLCB2MikpXG5cbi8qKlxuICogUmV0dXJucyB0aGUgdHJ1ZSBhbmdsZSBiZXR3ZWVuIHR3byB2ZWN0b3JzXG4gKiBAcGFyYW0gIHtWZWMyZH0gdjFcbiAqIEBwYXJhbSAge1ZlYzJkfSB2MlxuICogQHJldHVybiB7TnVtYmVyfSAgICBUaGUgYW5nbGUgYmV0d2VlbiB0d28gdmVjdG9ycyBpbiByYWRpYW5zIFstUEksIFBJXVxuICovXG5WZWMyZC5hbmdsZSA9ICh2MSwgdjIpID0+IHtcbiAgY29uc3QgYyA9IFZlYzJkLmRvdCh2MSwgdjIpXG4gIGNvbnN0IHMgPSBWZWMyZC5jcm9zczJkKHYxLCB2MilcbiAgY29uc3QgYW5nbGUgPSBNYXRoLmF0YW4yKHMsIGMpXG4gIHJldHVybiBhbmdsZVxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGFuZ2xlIG9mIGEgdmVjdG9yIGZyb20gdGhlIHBvc2l0aXZlIFggZGlyZWN0aW9uXG4gKiBpbiBhIGNhcnRlc2lhbiBjb29yZGluYXRlIHN5c3RlbVxuICogQHBhcmFtICB7VmVjMmR9IHYxXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgIFRoZSBhbmdsZSBpbiByYWRpYW5zIFstUEksIFBJXVxuICovXG5WZWMyZC5hbmdsZVBvc1ggPSB2ID0+IHtcbiAgbGV0IGFuZ2xlID0gTWF0aC5hdGFuMih2WzFdLCB2WzBdKVxuICBpZiAoYW5nbGUgPCAwKSB7XG4gICAgYW5nbGUgKj0gLTFcbiAgfVxuICByZXR1cm4gYW5nbGVcbn1cblxuZXhwb3J0IGRlZmF1bHQgVmVjMmRcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvcmUvdmVjMmQuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/* eslint-disable no-magic-numbers */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _aabox2d = __webpack_require__(2);\n\nvar AABox2d = _interopRequireWildcard(_aabox2d);\n\nvar _point2d = __webpack_require__(3);\n\nvar Point2d = _interopRequireWildcard(_point2d);\n\nvar _baseShape = __webpack_require__(6);\n\nvar _baseShape2 = _interopRequireDefault(_baseShape);\n\nvar _glMatrix = __webpack_require__(1);\n\nvar _math = __webpack_require__(5);\n\nvar _math2 = _interopRequireDefault(_math);\n\nvar _convexHull = __webpack_require__(14);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar identityMatrix = _glMatrix.mat2d.create();\n\n/**\n * Expands an axis-aligned bounding box to encapsulate a 2d vertex\n * defined in an array of vertices, and updates a struct used to\n * store the indices of the vertices that define the final bounds\n * of the vertices\n * @param  {AABox2d} box          Bounds to expand\n * @param  {Point2d} pt           2d vertex to encapsulate\n * @param  {number} ptIdx         Index of the vertex in its list of vertices\n * @param  {number[]} extentIndices Struct to store the indices of the bounding vertices\n * @private\n */\nfunction aaboxEncapsulatePt(box, pt, ptIdx, extentIndices) {\n  if (AABox2d.isEmpty(box)) {\n    box[0] = pt[0];\n    box[2] = pt[0];\n    extentIndices[0] = extentIndices[2] = ptIdx;\n    box[1] = pt[1];\n    box[3] = pt[1];\n    extentIndices[1] = extentIndices[3] = ptIdx;\n  } else {\n    if (pt[0] < box[0]) {\n      box[0] = pt[0];\n      extentIndices[0] = ptIdx;\n    } else if (pt[0] > box[2]) {\n      box[2] = pt[0];\n      extentIndices[2] = ptIdx;\n    }\n\n    if (pt[1] < box[1]) {\n      box[1] = pt[1];\n      extentIndices[1] = ptIdx;\n    } else if (pt[1] > box[3]) {\n      box[3] = pt[1];\n      extentIndices[3] = ptIdx;\n    }\n  }\n}\n\n/**\n * Function called sequentially to calculate the centroid of a polygon\n * @param  {Point2d} centroidPt Current centroid point\n * @param  {Point2d} pt1        Point describing one end of an edge of a polygon\n * @param  {Point2d} pt2        Point describing other end of an edge of a polygon\n * @private\n */\nfunction buildCentroid(centroidPt, pt1, pt2) {\n  var a = pt1[0] * pt2[1] - pt2[0] * pt1[1];\n  centroidPt[0] += (pt1[0] + pt2[0]) * a;\n  centroidPt[1] += (pt1[1] + pt2[1]) * a;\n  return a;\n}\n\n/**\n * Utility function used to check whether an argument is an array\n * of an arraybuffer\n * @param  {}  obj\n * @return {Boolean}     Returns true if object is array-like\n */\nfunction isArray(obj) {\n  return Array.isArray(obj) || ArrayBuffer && ArrayBuffer.isView(obj);\n}\n\n/**\n * @typedef {object} PolyLineOptions\n * @property {number[]|Point2d[]} [verts=[]] Initial vertices of the polyline\n */\n\n/**\n * @class Class defining a poly line\n * @extends {BaseShape}\n */\n\nvar PolyLine = function (_BaseShape) {\n  _inherits(PolyLine, _BaseShape);\n\n  /**\n   * Creates a new poly line shape\n   * @param  {PolyLineOptions} [opts] [description]\n   * @return {PolyLine}\n   */\n  function PolyLine(opts) {\n    _classCallCheck(this, PolyLine);\n\n    var verts = opts.verts || [];\n\n    var _this = _possibleConstructorReturn(this, (PolyLine.__proto__ || Object.getPrototypeOf(PolyLine)).call(this, opts));\n\n    if (!isArray(verts) || verts.length === 0 || isArray(verts[0]) && verts.length < 1 || !isArray(verts[0]) && (verts.length < 2 || verts.length % 2 !== 0)) {\n      throw new Error(\"PolyLine shapes must be initialized with an array of 2d points and contain at least 1 points\");\n    }\n\n    // going to build the aabox and store the indices for each vertex\n    // that defines the bounds\n    _this._extentIndices = [-1, -1, -1, -1];\n    _this._localaabox = AABox2d.create();\n    _this._verts = [];\n    _this._centroid = [0, 0];\n    AABox2d.initEmpty(_this._aabox);\n    var signedArea = 0;\n    var i = 0;\n    if (isArray(verts[0])) {\n      for (i = 0; i < verts.length - 1; i += 1) {\n        _this._verts.push(Point2d.clone(verts[i]));\n        aaboxEncapsulatePt(_this._aabox, verts[i], i, _this._extentIndices);\n        signedArea += buildCentroid(_this._centroid, verts[i], verts[i + 1]);\n      }\n      _this._verts.push(Point2d.clone(verts[i]));\n      aaboxEncapsulatePt(_this._aabox, verts[i], i, _this._extentIndices);\n      signedArea += buildCentroid(_this._centroid, verts[i], verts[0]);\n    } else {\n      _this._verts.push(Point2d.create(verts[0], verts[1]));\n      aaboxEncapsulatePt(_this._aabox, _this._verts[0], 0, _this._extentIndices);\n      var idx = 1;\n      for (i = 2; i < verts.length - 2; i += 2, idx += 1) {\n        _this._verts.push(Point2d.create(verts[i], verts[i + 1]));\n        aaboxEncapsulatePt(_this._aabox, _this._verts[idx], idx, _this._extentIndices);\n        signedArea += buildCentroid(_this._centroid, _this._verts[idx - 1], _this._verts[idx]);\n      }\n      _this._verts.push(Point2d.create(verts[i], verts[i + 1]));\n      aaboxEncapsulatePt(_this._aabox, _this._verts[idx], idx, _this._extentIndices);\n      signedArea += buildCentroid(_this._centroid, _this._verts[idx], _this._verts[0]);\n    }\n    signedArea *= 0.5;\n    _this._centroid[0] /= 6.0 * signedArea;\n    _this._centroid[1] /= 6.0 * signedArea;\n\n    // extract the center of the aabox. We are going to use this as the\n    // shape's pivot, so all rotation/scale transformations will be sourced\n    // at this location\n    var pivot = Point2d.create();\n    AABox2d.getCenter(pivot, _this._aabox);\n    _this.pivot = pivot;\n\n    // now build the convex hull of the vertices.\n    // When rebuilding the axis aligned box (a transform is applied for example),\n    // there's no need to traverse all the points. All we need to do is traverse\n    // the points that define the convex hull to rebuild the bounds\n    if (_this._verts.length < 3) {\n      _this._convexHull = _this._verts.map(function (val, idx) {\n        return idx;\n      });\n    } else {\n      _this._convexHull = (0, _convexHull.simpleHull_2D)(_this._verts);\n    }\n    return _this;\n  }\n\n  /**\n   * Get the untransformed width/height of the polyline. This is essentially\n   * the width/height of the poly's bounds\n   * @return {Vec2d} Width/height of the bounds of the polyline\n   */\n\n\n  _createClass(PolyLine, [{\n    key: \"getDimensions\",\n    value: function getDimensions() {\n      return [this.width, this.height];\n    }\n\n    /**\n     * Get the untransformed width of the polyline. This is the width of the\n     * axis-aligned bounds of the poly\n     * @return {number} Width of the poly in world-space units\n     */\n\n  }, {\n    key: \"_collapseVerts\",\n\n\n    /**\n     * Utility function that collapses all the verts, meaning the verts\n     * are flattened to their position with local-space transforms applied\n     * and then the local transforms are cleared. This is done whenever\n     * the vertices of the polygon are modified as it can be a little tricky\n     * to re-adjust the pivot/transforms of the vert when new verts are added,\n     * deleted, etc.\n     * @return {boolean} Returns true if the points were indeed flattened\n     *                   The points wouldn't be flattened if there are no\n     *                   transforms to apply, for example\n     * @private\n     */\n    value: function _collapseVerts() {\n      var _this2 = this;\n\n      Point2d.set(this._pivot, 0, 0);\n\n      // TODO(croot): what if this poly is\n      // parented to another transform?\n\n      var xform = this.localXform;\n      if (_glMatrix.mat2d.equals(xform, identityMatrix)) {\n        // if there are no transforms to apply,\n        // do nothing - fast out\n        return false;\n      }\n\n      AABox2d.initEmpty(this._aabox);\n\n      // flatten all the points to their current world-space position\n      // with transforms applied\n      for (var i = 0; i < this._verts.length; i += 1) {\n        Point2d.transformMat2d(this._verts[i], this._verts[i], xform);\n      }\n\n      // now recalcute the convex hull of all the transformed points\n      if (this._verts.length < 3) {\n        this._convexHull = this._verts.map(function (val, idx) {\n          return idx;\n        });\n      } else {\n        this._convexHull = (0, _convexHull.simpleHull_2D)(this._verts);\n      }\n      // use the convex hull points to rebuild the bounds\n      this._convexHull.forEach(function (idx) {\n        aaboxEncapsulatePt(_this2._aabox, _this2._verts[idx], idx, _this2._extentIndices);\n      });\n\n      // reset the local transforms\n      this.setTransformations(0, 0, 1, 1, 0);\n\n      return true;\n    }\n\n    /**\n     * Translates a specific vertex of the polygon by an offset\n     * @param  {number} vertIndex Index of the vertex to translate\n     * @param  {Vec2d} t         Translation offset, in world-space units\n     * @return {PolyLine}           this\n     * @fires {Shape#geomChanged}\n     * @throws {Error} If vertIndex is invalid.\n     */\n\n  }, {\n    key: \"translateVert\",\n    value: function translateVert(vertIndex, t) {\n      if (vertIndex >= this._verts.length) {\n        throw new Error(\"Cannot translate vertex at index \" + vertIndex + \". There are only \" + this._verts.length + \" vertices in the polygon.\");\n      }\n\n      if (t[0] || t[1]) {\n        var prev = Point2d.clone(this._verts[vertIndex]);\n        var newPt = Point2d.clone(this._verts[vertIndex]);\n        Point2d.addVec2(newPt, newPt, t);\n\n        // TODO(croot): this could be made smarter by determining whether\n        // this point affects the convex hull or not by checking it's relationship\n        // with its neighbors\n        this._collapseVerts();\n        this._resetAABox = true;\n        this._geomDirty = true;\n        Point2d.copy(newPt);\n        this.fire(\"changed:geom\", {\n          attr: \"verts[\" + vertIndex + \"]\",\n          prevVal: prev,\n          currVal: newPt\n        });\n      }\n      return this;\n    }\n  }, {\n    key: \"setVertPosition\",\n    value: function setVertPosition(vertIndex, pos) {\n      if (vertIndex >= this._verts.length) {\n        throw new Error(\"Cannot translate vertex at index \" + vertIndex + \". There are only \" + this._verts.length + \" vertices in the polygon.\");\n      }\n\n      if (!Point2d.equals(pos, this._verts[vertIndex])) {\n        var prev = Point2d.clone(this._verts[vertIndex]);\n        this._collapseVerts();\n        Point2d.copy(this._verts[vertIndex], pos);\n\n        // TODO(croot): this could be made smarter by determining whether\n        // this point affects the convex hull or not by checking it's relationship\n        // with its neighbors\n        this._resetAABox = true;\n        this._geomDirty = true;\n        this.fire(\"changed:geom\", {\n          attr: \"verts[\" + vertIndex + \"]\",\n          prevVal: prev,\n          currVal: pos\n        });\n      }\n    }\n  }, {\n    key: \"insertVert\",\n    value: function insertVert(vertIndex, pos) {\n      var idx = _math2.default.min(_math2.default.max(vertIndex, 0), this._verts.length);\n      this._collapseVerts();\n      if (vertIndex >= this._verts.length) {\n        this._verts.push(Point2d.clone(pos));\n        idx = this._verts.length - 1;\n      } else {\n        this._verts.splice(vertIndex, 0, Point2d.clone(pos));\n      }\n      this._resetAABox = true;\n      this._geomDirty = true;\n\n      this.fire(\"changed:geom:addvert\", {\n        attr: \"verts[\" + idx + \"]\",\n        currVal: pos\n      });\n\n      return idx;\n    }\n  }, {\n    key: \"appendVert\",\n    value: function appendVert(pos) {\n      return this.insertVert(this._verts.length, pos);\n    }\n  }, {\n    key: \"removeVert\",\n    value: function removeVert(vertIndex) {\n      if (vertIndex >= this._verts.length || vertIndex < 0) {\n        throw new Error(\"Cannot remove vertex \" + vertIndex + \". Invalid index. There are only \" + this._verts.length + \" vertices in the shape.\");\n      }\n\n      var pos = this._verts[vertIndex];\n      this._verts.splice(vertIndex, 1);\n      this._collapseVerts();\n      this._resetAABox = true;\n      this._geomDirty = true;\n\n      this.fire(\"changed:geom:removevert\", {\n        attr: \"verts[\" + vertIndex + \"]\",\n        currVal: pos\n      });\n\n      return vertIndex;\n    }\n  }, {\n    key: \"_rebuildAABox\",\n    value: function _rebuildAABox() {\n      var _this3 = this;\n\n      AABox2d.initEmpty(this._aabox);\n      if (this._verts.length < 3) {\n        this._convexHull = this._verts.map(function (val, idx) {\n          return idx;\n        });\n      } else {\n        this._convexHull = (0, _convexHull.simpleHull_2D)(this._verts);\n      }\n      this._convexHull.forEach(function (idx) {\n        aaboxEncapsulatePt(_this3._aabox, _this3._verts[idx], idx, _this3._extentIndices);\n      });\n\n      var pivot = Point2d.create(0, 0);\n      AABox2d.getCenter(pivot, this._aabox);\n      this.pivot = pivot;\n    }\n  }, {\n    key: \"_updateAABox\",\n    value: function _updateAABox() {\n      var _this4 = this;\n\n      if (this._resetAABox) {\n        this._rebuildAABox();\n        this._resetAABox = false;\n      }\n\n      if (this._boundsOutOfDate || this._geomDirty) {\n        AABox2d.initEmpty(this._aabox);\n        var tmppt = [0, 0];\n        var xform = this.globalXform;\n        this._convexHull.forEach(function (idx) {\n          AABox2d.encapsulatePt(_this4._aabox, _this4._aabox, Point2d.transformMat2d(tmppt, _this4._verts[idx], xform));\n        });\n        this._boundsOutOfDate = false;\n\n        if (this._geomDirty) {\n          var pivot = Point2d.create();\n          pivot[0] = this._verts[this._extentIndices[0]][0] + 0.5 * (this._verts[this._extentIndices[2]][0] - this._verts[this._extentIndices[0]][0]);\n          pivot[1] = this._verts[this._extentIndices[1]][1] + 0.5 * (this._verts[this._extentIndices[3]][1] - this._verts[this._extentIndices[1]][1]);\n          this.pivot = pivot;\n          this._geomDirty = false;\n        }\n      }\n    }\n  }, {\n    key: \"_draw\",\n    value: function _draw(ctx) {\n      var rtn = false;\n      if (this._verts.length >= 2) {\n        ctx.moveTo(this._verts[0][0], this._verts[0][1]);\n        for (var i = 1; i < this._verts.length; i += 1) {\n          ctx.lineTo(this._verts[i][0], this._verts[i][1]);\n        }\n        rtn = true;\n      }\n      return rtn;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Object.assign({\n        type: \"PolyLine\", // NOTE: this much match the name of the class\n        verts: this.vertsRef.map(function (vert) {\n          return [vert[0], vert[1]];\n        })\n      }, _get(PolyLine.prototype.__proto__ || Object.getPrototypeOf(PolyLine.prototype), \"toJSON\", this).call(this));\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      this._updateAABox();\n      if (!this._verts.length || this._extentIndices[0] < 0 || this._extentIndices[2] < 0) {\n        return 0;\n      }\n\n      return this._verts[this._extentIndices[2]][0] - this._verts[this._extentIndices[0]][0];\n    }\n\n    /**\n     * Gets the untransformed height of the polyline. This is the height of the axis-aligned\n     * bounds of the poly\n     * @return {number} Height of the poly in world-space units\n     */\n\n  }, {\n    key: \"height\",\n    get: function get() {\n      this._updateAABox();\n      if (!this._verts.length || this._extentIndices[0] < 0 || this._extentIndices[2] < 0) {\n        return 0;\n      }\n\n      return this._verts[this._extentIndices[3]][1] - this._verts[this._extentIndices[1]][1];\n    }\n\n    /**\n     * Gets a reference to the vertex array of the polyline\n     * @return {Point2d[]}\n     * @readOnly\n     */\n\n  }, {\n    key: \"vertsRef\",\n    get: function get() {\n      return this._verts;\n    }\n\n    /**\n     * Gets the number of vertices in the polyline\n     * @return {number}\n     */\n\n  }, {\n    key: \"numVerts\",\n    get: function get() {\n      return this._verts.length;\n    }\n  }]);\n\n  return PolyLine;\n}(_baseShape2.default);\n\nexports.default = PolyLine;\n\n\nPolyLine.aaboxEncapsulatePt = aaboxEncapsulatePt;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.buildXformMatrix = buildXformMatrix;\nexports.createEventedTransform2dMixin = createEventedTransform2dMixin;\n\nvar _point2d = __webpack_require__(3);\n\nvar Point2d = _interopRequireWildcard(_point2d);\n\nvar _glMatrix = __webpack_require__(1);\n\nvar _aggregation = __webpack_require__(7);\n\nvar _aggregation2 = _interopRequireDefault(_aggregation);\n\nvar _math = __webpack_require__(5);\n\nvar _math2 = _interopRequireDefault(_math);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Builds a 2D transformation matrix (2x3 matrix) from a rotation (in degrees),\n * an x,y scale, a translation, and a pivot (an offset from the origin to\n * apply the transformation around)\n * @param  {Mat2d} mat   Matrix to store the result of the operation\n * @param  {number} rdeg  rotation, in degrees\n * @param  {Vec2d} s     Scale vector, in x & y\n * @param  {Vec2d} t     Translation vector, in x & y\n * @param  {Vec2d} pivot Offset from origin to apply the transformation\n * @return {Mat2d}       Matrix referenced by the mat argument\n */\nfunction buildXformMatrix(mat, rdeg, s, t, pivot) {\n  _glMatrix.mat2d.identity(mat);\n  _glMatrix.mat2d.translate(mat, mat, [t[0] + pivot[0], t[1] + pivot[1]]);\n  _glMatrix.mat2d.rotate(mat, mat, _math2.default.DEG_TO_RAD * rdeg);\n  _glMatrix.mat2d.scale(mat, mat, s);\n  _glMatrix.mat2d.translate(mat, mat, [-pivot[0], -pivot[1]]);\n  return mat;\n}\n\n/**\n * Utility function to dirty all the descendants of a transform node.\n * This is called when a transform node has been modified in some way\n * that it's children need to be notified about.\n * @param  {Transform2d[]} children\n */\nfunction dirtyChildren(children) {\n  children.forEach(function (child) {\n    child._xformDirty = true;\n    dirtyChildren(child._children);\n  });\n}\n\n/**\n * @typedef {object} Transform2dOptions\n * @property {Point2d} [position = [0,0]] Position in world space coords\n * @property {Vec2d} [scale = [1,1]] Scale in world space coords\n * @property {number} [rotation = 0] Rotation in degrees\n * @property {Vec2d} [pivot = [0, 0]] Offset from origin to apply the setTransformations\n */\n\n/**\n * @class Class to manage basic 2d affine transformations\n * @mixin Can also be used as a mixin\n */\n\nvar Transform2d = function () {\n  /**\n   * Creates a new Transform2d\n   * @param  {Transform2dOptions} [opts]\n   * @return {Transform2d}\n   */\n  function Transform2d(opts) {\n    _classCallCheck(this, Transform2d);\n\n    this.initializer(opts);\n  }\n\n  /**\n   * Initializes a transform 2d object from options\n   * @param  {Transform2dOptions} [opts]\n   * @private\n   */\n\n\n  _createClass(Transform2d, [{\n    key: \"_initTransformFromOptions\",\n    value: function _initTransformFromOptions(opts) {\n      if (!opts) {\n        return;\n      }\n\n      if (typeof opts.position !== \"undefined\") {\n        this.setPosition(opts.position);\n      }\n\n      if (typeof opts.scale !== \"undefined\") {\n        this.setScale(opts.scale);\n      }\n\n      if (typeof opts.rotation !== \"undefined\") {\n        this.setRotation(opts.rotation);\n      }\n\n      if (typeof opts.pivot !== \"undefined\") {\n        this.pivot = opts.pivot;\n      }\n    }\n\n    /**\n     * Initializes a transform 2d object from options,\n     * called from either constructor (if used as base class)\n     * or base mixin class (if used as a mixin)\n     * @param  {Transform2dOptions} [opts]\n     * @protected\n     */\n\n  }, {\n    key: \"initializer\",\n    value: function initializer(opts) {\n      this._localXform = _glMatrix.mat2d.create();\n      this._lxformDirty = false;\n\n      this._pivot = Point2d.create(0, 0);\n\n      this._pos = Point2d.create(0, 0);\n      this._scale = _glMatrix.vec2.fromValues(1, 1);\n      this._rotDeg = 0;\n\n      this._globalXform = _glMatrix.mat2d.create();\n      this._xformDirty = false;\n      this._parent = null;\n      this._children = new Set();\n\n      this._initTransformFromOptions(opts);\n    }\n\n    /**\n     * Adds a child to this transform node\n     * @param {Transform2d} childXform\n     */\n\n  }, {\n    key: \"addChildXform\",\n    value: function addChildXform(childXform) {\n      if (!this._children.has(childXform)) {\n        this._children.add(childXform);\n        if (childXform._parent) {\n          childXform._parent.removeChild(childXform);\n        }\n        childXform._parent = this;\n        childXform._xformDirty = true;\n        dirtyChildren(childXform._children);\n      }\n    }\n\n    /**\n     * Removes a child from this transform node\n     * @param  {Transform2d} childXform\n     */\n\n  }, {\n    key: \"removeChildXform\",\n    value: function removeChildXform(childXform) {\n      this._children.delete(childXform);\n    }\n\n    /**\n     * Unparents this node from its parent, if it has one\n     */\n\n  }, {\n    key: \"unparentXform\",\n    value: function unparentXform() {\n      if (this._parent) {\n        this._parent.removeChild(this);\n        this._parent = null;\n        _glMatrix.mat2d.copy(this._globalXform, this.localXform);\n      }\n    }\n\n    /**\n     * Sets the pivot of the transform\n     * @param  {Vec2d} pivot Offset vector from the origin to apply the transformations\n     * @return {Transform2d}\n     */\n\n  }, {\n    key: \"getPosition\",\n\n\n    /**\n     * Gets the current unparented position of the transform\n     * @return {Point2d} This is the position of the node as if it were unparented\n     */\n    value: function getPosition() {\n      return _glMatrix.vec2.clone(this._pos);\n    }\n\n    /**\n     * Gets the reference to the unparented position of the transform, avoiding\n     * a copy\n     * @return {Point2d}\n     * @readOnly\n     */\n\n  }, {\n    key: \"getPositionRef\",\n    value: function getPositionRef() {\n      return this._pos;\n    }\n\n    /**\n     * Gets the current world position of the transform, this is its position\n     * after all parent transformations have been applied\n     * @return {Point2d}\n     */\n\n  }, {\n    key: \"getWorldPosition\",\n    value: function getWorldPosition() {\n      var xform = this.globalXform;\n      return Point2d.create(xform[4], xform[5]);\n    }\n\n    /**\n     * Sets the unparented world position of the transform\n     * @param {Point2d} pos\n     */\n\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(pos) {\n      Point2d.copy(this._pos, pos);\n      this._lxformDirty = true;\n      dirtyChildren(this._children);\n    }\n\n    /**\n     * Translates the unparented world position of the transform by an offset\n     * @param  {Vec2d} translation\n     * @return {Transform2d}\n     */\n\n  }, {\n    key: \"translate\",\n    value: function translate(translation) {\n      if (translation[0] || translation[1]) {\n        Point2d.addVec2(this._pos, this._pos, translation);\n        this._lxformDirty = true;\n        dirtyChildren(this._children);\n      }\n      return this;\n    }\n\n    /**\n     * Gets the current unparented x,y scale of the transform\n     * @return {Vec2d}\n     */\n\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      return _glMatrix.vec2.clone(this._scale);\n    }\n\n    /**\n     * Gets the current unparented x/y scale reference of the transform\n     * avoiding a copy\n     * @return {Vec2d}\n     * @readOnly\n     */\n\n  }, {\n    key: \"getScaleRef\",\n    value: function getScaleRef() {\n      return this._scale;\n    }\n\n    /**\n     * Sets the unparented scale of the transform\n     * @param {Vec2d} scale\n     * @return {Transform2d}\n     */\n\n  }, {\n    key: \"setScale\",\n    value: function setScale(scale) {\n      _glMatrix.vec2.copy(this._scale, scale);\n      this._lxformDirty = true;\n      dirtyChildren(this._children);\n      return this;\n    }\n\n    /**\n     * Scales the current unparented scale by a 2d multiplier\n     * @param  {Vec2d} scaleMult\n     * @return {Transform2d}\n     */\n\n  }, {\n    key: \"scale\",\n    value: function scale(scaleMult) {\n      if (scaleMult[0] !== 1 || scaleMult[1] !== 1) {\n        _glMatrix.vec2.multiply(this._scale, this._scale, scaleMult);\n        this._lxformDirty = true;\n        dirtyChildren(this._children);\n      }\n      return this;\n    }\n\n    /**\n     * Gets the current unparented rotation in degrees of the transform\n     * @return {number}\n     */\n\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      return this._rotDeg;\n    }\n\n    /**\n     * Sets the unparented rotation of the transform\n     * @param {number} deg Rotation in degrees\n     * @return {Transform2d}\n     */\n\n  }, {\n    key: \"setRotation\",\n    value: function setRotation(deg) {\n      this._rotDeg = deg;\n      this._lxformDirty = true;\n      dirtyChildren(this._children);\n      return this;\n    }\n\n    /**\n     * Adds an additional rotation in degrees to the current rotation\n     * of the transform\n     * @param  {number} deg Rotation offset in degrees\n     * @return {Transform2d}\n     */\n\n  }, {\n    key: \"rotate\",\n    value: function rotate(deg) {\n      if (deg) {\n        this._rotDeg += deg;\n        this._lxformDirty = true;\n        dirtyChildren(this._children);\n      }\n      return this;\n    }\n\n    /**\n     * Utility function to dirty all the descendants of this node\n     * @private\n     */\n\n  }, {\n    key: \"_dirtyChildren\",\n    value: function _dirtyChildren() {\n      dirtyChildren(this._children);\n    }\n\n    /**\n     * Updates the local affine matrix if marked as dirty\n     * If derived/mixin classes have a _localXformUpdates method\n     * defined, that will be called here when the local transform\n     * is updated.\n     * @private\n     */\n\n  }, {\n    key: \"_updatelocalxform\",\n    value: function _updatelocalxform() {\n      if (this._lxformDirty) {\n        buildXformMatrix(this._localXform, this._rotDeg, this._scale, this._pos, this._pivot);\n        if (this._localXformUpdated) {\n          this._localXformUpdated();\n        }\n        this._lxformDirty = false;\n      }\n    }\n\n    /**\n     * Updates the global 2x3 matrix of the transform if marked dirty\n     * If derived/mixin classes have a _globalXformUpdates method\n     * defined, that will be called here when the global transform\n     * is updated.\n     * @private\n     */\n\n  }, {\n    key: \"_updateglobalxform\",\n    value: function _updateglobalxform() {\n      if (this._lxformDirty || this._xformDirty) {\n        this._updatelocalxform();\n        if (this._parent) {\n          _glMatrix.mat2d.multiply(this._globalXform, this._parent.globalXform, this._localXform);\n        } else {\n          _glMatrix.mat2d.copy(this._globalXform, this._localXform);\n        }\n        if (this._globalXformUpdated) {\n          this._globalXformUpdated();\n        }\n        this._xformDirty = false;\n      }\n    }\n\n    /**\n     * Gets the current local transformation matrix of the node.\n     * @return {Mat2d}\n     */\n\n  }, {\n    key: \"transformCtx\",\n\n\n    /**\n     * Sets the transform state of a 2d rendering context\n     * @param  {CanvasRenderingContext2D} ctx\n     * @param  {Mat2d} currMatrix          The current matrix used to store the result of the\n     *                                     model-view-projection-screen matrix multiplication for this node\n     * @param  {Mat2d} worldToScreenMatrix The current world-to-screen tranform\n     */\n    value: function transformCtx(ctx, currMatrix, worldToScreenMatrix) {\n      _glMatrix.mat2d.multiply(currMatrix, worldToScreenMatrix, this.globalXform);\n\n      ctx.setTransform(currMatrix[0], currMatrix[1], currMatrix[2], currMatrix[3], currMatrix[4], currMatrix[5]);\n    }\n\n    /**\n     * Converts a Transform2d instance to a JSON object\n     * @param  {Transform2d} xformObj\n     * @return {{position: Point2d, scale: Vec2d, rotation: number, pivot: Vec2d}}\n     */\n\n  }, {\n    key: \"pivot\",\n    set: function set(pivot) {\n      Point2d.copy(this._pivot, pivot);\n      this._lxformDirty = true;\n      dirtyChildren(this._children);\n      return this;\n    }\n\n    /**\n     * Gets the current pivot of the transform\n     * @return {Vec2d}\n     */\n    ,\n    get: function get() {\n      return Point2d.clone(this._pivot);\n    }\n\n    /**\n     * Gets the current pivot reference of the transform.\n     * @return {[type]} [description]\n     * @readOnly\n     */\n\n  }, {\n    key: \"pivotRef\",\n    get: function get() {\n      return this._pivot;\n    }\n\n    /**\n     * Gets the parent transform node, if one is attached\n     * @return {Transform2d}\n     */\n\n  }, {\n    key: \"parent\",\n    get: function get() {\n      return this._parent;\n    }\n  }, {\n    key: \"localXform\",\n    get: function get() {\n      this._updatelocalxform();\n      return this._localXform;\n    }\n\n    /**\n     * Gets the current global transformation matrix of the node. This is essentially\n     * its local transform multiplied against all the local transforms of its parents.\n     * This is ultimately used to convert a point from object space to world space, and\n     * inversely, from world space to object space.\n     * @return {Mat2d}\n     */\n\n  }, {\n    key: \"globalXform\",\n    get: function get() {\n      this._updateglobalxform();\n      return this._globalXform;\n    }\n  }], [{\n    key: \"toJSON\",\n    value: function toJSON(xformObj) {\n      // TODO(croot): How do we deal with parenting here?\n      // To properly deal with this, we may need to supply an\n      // identifier for every created object... This may likely\n      // need to be a name string supplied by the user\n      var pos = xformObj.getPositionRef();\n      var scale = xformObj.getScaleRef();\n      var pivot = xformObj.pivotRef;\n      return {\n        position: [pos[0], pos[1]],\n        scale: [scale[0], scale[1]],\n        rotation: xformObj.getRotation(),\n        pivot: [pivot[0], pivot[1]]\n      };\n    }\n  }]);\n\n  return Transform2d;\n}();\n\n/**\n * Creates a new Transform2d mixin class that is intended to be mixed in with\n * a class that inherits from the EventHandler class\n * @param  {string} eventName Type name of the event fired when the transform is modified\n * @return {function}           Mixin\n */\n\n\nexports.default = Transform2d;\nfunction createEventedTransform2dMixin(eventName) {\n  /**\n   * Transform2d modification event\n   * @event EventedTransform2d#changed\n   * @type {object}\n   * @property {string} attr Name of the attribute modified\n   * @property {} prevVal Previous value of the attribute prior to modification\n   * @property {} currVal Value of the attribute post modification\n   */\n\n  /**\n   * @mixin Transform2d mixin with event firing when modified\n   */\n  return (0, _aggregation2.default)(null, Transform2d, function () {\n    function EventedTransform2d() {\n      _classCallCheck(this, EventedTransform2d);\n    }\n\n    _createClass(EventedTransform2d, [{\n      key: \"setPosition\",\n\n\n      /**\n       * Sets the unparented position of the transform.\n       * @param {Point2d} pos\n       * @fires  EventedTransform2d#changed\n       * @return {EventedTransform2d}\n       */\n      value: function setPosition(pos) {\n        if (!Point2d.equals(pos, this._pos)) {\n          var prev = [this._pos[0], this._pos[1]];\n          Point2d.copy(this._pos, pos);\n          this._lxformDirty = true;\n          dirtyChildren(this._children);\n          this.fire(eventName, {\n            attr: \"position\",\n            prevVal: prev,\n            currVal: pos\n          });\n        }\n        return this;\n      }\n\n      /**\n       * Translates the unparented position of a transform by an offset.\n       * @param  {Vec2d} translation\n       * @fires  EventedTransform2d#changed\n       * @return {EventedTransform2d}\n       */\n\n    }, {\n      key: \"translate\",\n      value: function translate(translation) {\n        if (translation[0] || translation[1]) {\n          var prev = [this._pos[0], this._pos[1]];\n          Point2d.addVec2(this._pos, this._pos, translation);\n          this._lxformDirty = true;\n          dirtyChildren(this._children);\n          this.fire(eventName, {\n            attr: \"position\",\n            prevVal: prev,\n            currVal: [this._pos[0], this._pos[1]]\n          });\n        }\n        return this;\n      }\n\n      /**\n       * Sets the unparented 2d scale of the transform\n       * @param {Vec2d} scale\n       * @fires  EventedTransform2d#changed\n       * @return {EventedTransform2d}\n       */\n\n    }, {\n      key: \"setScale\",\n      value: function setScale(scale) {\n        if (!_glMatrix.vec2.equals(scale, this._scale)) {\n          var prev = [this._scale[0], this._scale[1]];\n          _glMatrix.vec2.copy(this._scale, scale);\n          this._lxformDirty = true;\n          dirtyChildren(this._children);\n          this.fire(eventName, {\n            attr: \"size\",\n            prevVal: prev,\n            currVal: scale\n          });\n        }\n        return this;\n      }\n\n      /**\n       * Multiplies the current unparented scale of the transform by a 2d scalar\n       * @param  {Vec2d} scaleMult\n       * @fires  EventedTransform2d#changed\n       * @return {EventedTransform2d}\n       */\n\n    }, {\n      key: \"scale\",\n      value: function scale(scaleMult) {\n        if (scaleMult[0] !== 1 || scaleMult[1] !== 1) {\n          var prev = [this._scale[0], this._scale[1]];\n          _glMatrix.vec2.multiply(this._scale, this._scale, scaleMult);\n          this._lxformDirty = true;\n          dirtyChildren(this._children);\n          this.fire(eventName, {\n            attr: \"size\",\n            prevVal: prev,\n            currVal: [this._scale[0], this._scale[1]]\n          });\n        }\n        return this;\n      }\n\n      /**\n       * Sets the unparented rotation of the transform in degrees\n       * @param {number} deg Rotation angle in degrees\n       * @fires  EventedTransform2d#changed\n       * @return {EventedTransform2d}\n       */\n\n    }, {\n      key: \"setRotation\",\n      value: function setRotation(deg) {\n        var degToUse = deg % 360;\n        if (degToUse !== this._rotDeg) {\n          var prev = this._rotDeg;\n          this._rotDeg = degToUse;\n          this._lxformDirty = true;\n          dirtyChildren(this._children);\n          this.fire(eventName, {\n            attr: \"orientation\",\n            prevVal: prev,\n            curral: this._rotDeg\n          });\n        }\n      }\n\n      /**\n       * Adds a rotation angle in degrees to the current unparented\n       * rotation of the transform.\n       * @param  {number} deg Additional rotation angle in degrees\n       * @fires  EventedTransform2d#changed\n       * @return {EventedTransform2d}\n       */\n\n    }, {\n      key: \"rotate\",\n      value: function rotate(deg) {\n        if (deg) {\n          var prev = this._rotDeg;\n          this._rotDeg += deg;\n          this._rotDeg %= 360;\n          this._lxformDirty = true;\n          dirtyChildren(this._children);\n          this.fire(eventName, {\n            attr: \"orientation\",\n            prevVal: prev,\n            curral: this._rotDeg\n          });\n        }\n        return this;\n      }\n\n      /**\n       * Utility function to reset all the unparented transform parameters\n       * @param {number} tx  Translation in x in world units\n       * @param {number} ty  Translation in y in world units\n       * @param {number} sx  Scale in x in world units\n       * @param {number} sy  Scale in y in world units\n       * @param {number} deg Rotation angle degrees\n       * @fires  EventedTransform2d#changed\n       * @return {EventedTransform2d}\n       */\n\n    }, {\n      key: \"setTransformations\",\n      value: function setTransformations(tx, ty, sx, sy, deg) {\n        var attrs = [];\n        var prevVals = [];\n        var currVals = [];\n        if (typeof tx !== \"undefined\" && typeof ty !== \"undefined\" && (!_glMatrix.glMatrix.equals(tx, this._pos[0]) || !_glMatrix.glMatrix.equals(ty, this._pos[1]))) {\n          var prev = Point2d.clone(this._pos);\n          this._pos[0] = tx;\n          this._pos[1] = ty;\n          attrs.push(\"position\");\n          prevVals.push(prev);\n          currVals.push(Point2d.clone(this._pos));\n        }\n\n        if (typeof sx !== \"undefined\" && typeof sy !== \"undefined\" && (!_glMatrix.glMatrix.equals(sx, this._scale[0]) || !_glMatrix.glMatrix.equals(sy, this._scale[1]))) {\n          var _prev = _glMatrix.vec2.clone(this._scale);\n          _glMatrix.vec2.set(this._scale, sx, sy);\n          attrs.push(\"size\");\n          prevVals.push(_prev);\n          currVals.push(_glMatrix.vec2.clone(this._scale));\n        }\n\n        if (typeof deg !== \"undefined\") {\n          var degToUse = deg % 360;\n          if (!_glMatrix.glMatrix.equals(degToUse, this._rotDeg)) {\n            var _prev2 = this._rotDeg;\n            this._rotDeg = degToUse;\n            attrs.push(\"orientation\");\n            prevVals.push(_prev2);\n            currVals.push(this._rotDeg);\n          }\n        }\n\n        if (attrs.length) {\n          this._lxformDirty = true;\n          dirtyChildren(this._children);\n          this.fire(eventName, {\n            attrs: attrs,\n            prevVals: prevVals,\n            currVals: currVals\n          });\n        }\n        return this;\n      }\n    }, {\n      key: \"pivot\",\n\n      /**\n       * Sets the unparented pivot of the transform. The pivot is\n       * the offset from the transform's primary position where the\n       * transformation is applied.\n       * @param {Vec2d} pivot\n       * @fires  EventedTransform2d#changed\n       * @return {EventedTransform2d}\n       */\n      set: function set(pivot) {\n        if (!Point2d.equals(pivot, this._pivot)) {\n          var prev = [this._pivot[0], this._pivot[1]];\n          Point2d.copy(this._pivot, pivot);\n          this._lxformDirty = true;\n          dirtyChildren(this._children);\n          this.fire(eventName, {\n            attr: \"pivot\",\n            prevVal: prev,\n            currVal: pivot\n          });\n        }\n        return this;\n      }\n\n      /**\n       * Gets a copy of the unparented pivot of the transform\n       * @return {Vec2d}\n       */\n      ,\n      get: function get() {\n        return Point2d.clone(this._pivot);\n      }\n    }]);\n\n    return EventedTransform2d;\n  }());\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 12 */
/***/ (function(module, exports) {

	eval("\"use strict\";\n\n/**\n  @typedef EventObject\n  @type {object}\n  @property {string} type - the type of the event\n  @property {string} target - the target object that fired the event\n /\n\n/**\n * This callback is displayed as a global member.\n * @callback EventCallback\n * @param {EventObject} Event object describing the event being fired\n */\n\n/**\n * Recursively fires hierarchical events from an handler's registered\n * event types. For example, if an event is registered as \"changed:color\",\n * both a \"changed:color\" and \"changed\" event is fired, so listeners who\n * only generically care if something changed on an object can be notified.\n * @param  {Map} currMap  map datastructure holding all hierarchical events and callbacks\n * @param  {string[]} subtypes the \":\" separated list of the event\n * @param  {number} currIdx  the current index of subtypes being processed\n * @param  {Object} fireData the event object to fire\n * @return {number}          total number of listeners called\n * @private\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction recursiveFire(currMap, subtypes, currIdx, fireData) {\n  var _this = this;\n\n  if (currIdx >= subtypes.length) {\n    return 0;\n  }\n\n  var cnt = 0;\n  var data = null;\n  data = currMap.get(subtypes[currIdx]);\n  if (data) {\n    cnt = recursiveFire(data[0], subtypes, currIdx + 1, fireData);\n    data[1].forEach(function (listener) {\n      return listener.call(_this, fireData);\n    });\n    cnt += data[1].length;\n  }\n  return cnt;\n}\n\n/**\n * Recursively deletes specific listeners from a handlers event\n * data structure. For instance, if the same callback is used for both\n * a \"changed\" and a \"changed:color\" event, and that callback is deleted\n * from the \"changed\" event, it is also deleted from the \"changed:color\" event\n * @param  {Object} currNode  Current node of the map data structure being processed\n * @param  {function[]} listeners Array of listeners to delete\n * @private\n */\nfunction recursiveDelete(currNode, listeners) {\n  var index = -1;\n  var subnodes = currNode[0];\n  var nodelisteners = currNode[1];\n  if (nodelisteners.length) {\n    listeners.forEach(function (listener) {\n      if ((index = nodelisteners.indexOf(listener)) >= 0) {\n        nodelisteners.splice(index, 1);\n      }\n    });\n  }\n  subnodes.forEach(function (node) {\n    recursiveDelete(node, listeners);\n  });\n}\n\n/**\n * Validates that an input is a string or an array of strings, and if the former\n * returns a 1-element string array\n * @param  {string|string[]} intype\n * @return {string[]}\n * @private\n */\nfunction arrayify(intype) {\n  var arrayToUse = intype;\n  if (typeof intype === \"string\") {\n    arrayToUse = [intype];\n  } else if (!Array.isArray(intype)) {\n    throw new Error(\"Input must be an array of strings\");\n  }\n  return arrayToUse;\n}\n\n/** Class for managing events and listeners. Can be used as a base class or a mixin (using @see {@link aggregation}) */\n\nvar EventHandler = function () {\n\n  /**\n   * Create a new event handler\n   * @param  {string|string[]} eventsToRegister initial events to register\n   */\n  function EventHandler(eventsToRegister) {\n    _classCallCheck(this, EventHandler);\n\n    this.initializer(eventsToRegister);\n  }\n\n  /**\n   * Initializes an event handler object\n   * @param  {string|string[]} eventsToRegister events to initialize event handler with\n   * @see  {@link aggregation}\n   */\n\n\n  _createClass(EventHandler, [{\n    key: \"initializer\",\n    value: function initializer(eventsToRegister) {\n      this._listeners = new Map();\n      this.registerEvents(eventsToRegister);\n    }\n\n    /**\n     * Registers new events for the event handler\n     * @param  {string|string[]} events new event(s) to register\n     */\n\n  }, {\n    key: \"registerEvents\",\n    value: function registerEvents(events) {\n      var _this2 = this;\n\n      if (!events) {\n        return;\n      }\n\n      var eventsToUse = arrayify(events);\n      if (typeof events === \"string\") {\n        eventsToUse = [events];\n      } else if (!Array.isArray(events)) {\n        throw new Error(\"Events must be an array of strings\");\n      }\n\n      eventsToUse.forEach(function (event) {\n        var subevents = event.split(\":\");\n        var currMap = _this2._listeners;\n        for (var i = 0; i < subevents.length; i += 1) {\n          var data = currMap.get(subevents[i]);\n          if (!data) {\n            data = [new Map(), []];\n            currMap.set(subevents[i], data);\n          }\n          currMap = data[0];\n        }\n      });\n    }\n\n    /**\n     * Adds a new listener to a specific event or list of different events\n     * @param  {string|string[]} types    event(s) this listener is listening to\n     * @param  {EventCallback} listener function to be called when events destribed by types is fired\n     * @return {EventHandler}          this\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(types, listener) {\n      var _this3 = this;\n\n      var typesToUse = arrayify(types);\n      typesToUse.forEach(function (type) {\n        var subtypes = type.split(\":\");\n        var currMap = _this3._listeners;\n        var data = null;\n        subtypes.forEach(function (subtype) {\n          data = currMap.get(subtype);\n          if (!data) {\n            var keys = [];\n            currMap.forEach(function (val, key) {\n              return keys.push(key);\n            });\n            throw new Error(type + \" is not a valid event type. The registered event types at this level are [\" + keys + \"]\");\n          }\n          currMap = data[0];\n        });\n        if (data[1].indexOf(listener) < 0) {\n          data[1].push(listener);\n        }\n      });\n\n      return this;\n    }\n\n    /**\n     * Removes a listener from specific events\n     * @param  {string|string[]} types    event(s) the listener is being removed from\n     * @param  {EventCallback} listener callback function to be cleared from the specified event types\n     * @return {EventHandler}          this\n     */\n\n  }, {\n    key: \"off\",\n    value: function off(types, listener) {\n      var _this4 = this;\n\n      var typesToUse = arrayify(types);\n      var listeners = listener;\n      if (!Array.isArray(listeners)) {\n        listeners = [listener];\n      }\n      typesToUse.forEach(function (type) {\n        var subtypes = type.split(\":\");\n        var currMap = _this4._listeners;\n        var data = null;\n        var i = 0;\n        for (i = 0; i < subtypes.length; i += 1) {\n          data = currMap.get(subtypes[i]);\n          if (!data) {\n            break;\n          }\n          currMap = data[0];\n        }\n        if (data) {\n          recursiveDelete(data, listeners);\n        }\n      });\n      return this;\n    }\n\n    /**\n     * Sets up a lister callback to only be called once\n     * @param  {string|string[]} types    event(s) the listener is listening to\n     * @param  {EventCallback} listener callback function to be called with event(s) are fired\n     * @return {EventHandler}          this\n     */\n\n  }, {\n    key: \"once\",\n    value: function once(types, listener) {\n      var _this5 = this;\n\n      var wrapper = function wrapper(data) {\n        _this5.off(types, wrapper);\n        listener.call(_this5, data);\n      };\n      this.on(types, wrapper);\n      return this;\n    }\n\n    /**\n     * Fires a specific event and calls any listeners of that event type.\n     * @param  {string} type Event type to fire\n     * @param  {Object} data Additional data to fire with the event\n     * @return {EventHandler}      this\n     */\n\n  }, {\n    key: \"fire\",\n    value: function fire(type, data) {\n      var subtypes = type.split(\":\");\n\n      var fireData = {\n        type: type,\n        target: this\n      };\n\n      Object.assign(fireData, data);\n\n      recursiveFire(this._listeners, subtypes, 0, fireData);\n\n      // To ensure that no error events are dropped, print them to the\n      // console if they have no listeners.\n      // if (!numFires && endsWith(type, \"error\")) {\n      //   console.error((data && data.error) || data || \"Empty error event\")\n      // }\n\n      if (this._eventParent) {\n        fireData = {};\n        Object.getOwnPropertyNames(data).forEach(function (key) {\n          fireData[key] = data[key];\n        });\n        this._eventParent.fire(type, fireData);\n      }\n\n      return this;\n    }\n\n    /**\n     * Returns whether or not this event hander fires a specific event type\n     * @param  {string} type Event type\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"listens\",\n    value: function listens(type) {\n      var subtypes = type.split(\":\");\n      var currMap = this._listeners;\n      var data = null;\n      for (var i = 0; i < subtypes.length; i += 1) {\n        data = currMap.get(subtypes[i]);\n        if (!data) {\n          break;\n        }\n        currMap = data[0];\n      }\n      return data || this._eventParent && this._eventParent.listens(type);\n    }\n\n    /**\n     * Sets a parent event handler\n     * @param {EventHandler} parent\n     * @param {object} data\n     */\n\n  }, {\n    key: \"setEventedParent\",\n    value: function setEventedParent(parent, data) {\n      this._eventParent = parent;\n      this._eventParentData = data;\n\n      return this;\n    }\n  }]);\n\n  return EventHandler;\n}();\n\nexports.default = EventHandler;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventConstants = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _canvasUtils = __webpack_require__(26);\n\nvar CanvasUtils = _interopRequireWildcard(_canvasUtils);\n\nvar _point2d = __webpack_require__(3);\n\nvar Point2d = _interopRequireWildcard(_point2d);\n\nvar _baseShape = __webpack_require__(6);\n\nvar _baseShape2 = _interopRequireDefault(_baseShape);\n\nvar _basicStyle = __webpack_require__(8);\n\nvar _basicStyle2 = _interopRequireDefault(_basicStyle);\n\nvar _utils = __webpack_require__(27);\n\nvar _camera2d = __webpack_require__(28);\n\nvar _camera2d2 = _interopRequireDefault(_camera2d);\n\nvar _eventHandler = __webpack_require__(12);\n\nvar _eventHandler2 = _interopRequireDefault(_eventHandler);\n\nvar _ResizeSensor = __webpack_require__(29);\n\nvar _ResizeSensor2 = _interopRequireDefault(_ResizeSensor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar mouseevents = [\"mousedown\", \"mouseup\", \"mousemove\", \"click\", \"dblclick\", \"mouseover\", \"mouseout\", \"touchstart\", \"touchend\", \"touchmove\"];\nvar marginProps = [\"top\", \"bottom\", \"left\", \"right\"];\n\nvar EventConstants = exports.EventConstants = {\n  MOUSEDOWN: \"mousedown\",\n  MOUSEUP: \"mouseup\",\n  MOUSEMOVE: \"mousemove\",\n  CLICK: \"click\",\n  DBLCLICK: \"dblclick\",\n  MOUSEOVER: \"mouseover\",\n  MOUSEOUT: \"mouseout\",\n  SHAPE_ADD: \"shape:add\",\n  SHAPE_DELETE: \"shape:delete\",\n  TOUCHSTART: \"touchstart\",\n  TOUCHEND: \"touchend\",\n  TOUCHMOVE: \"touchmove\"\n};\n\nvar DrawStyleState = function (_BasicStyle) {\n  _inherits(DrawStyleState, _BasicStyle);\n\n  function DrawStyleState() {\n    var _ref;\n\n    _classCallCheck(this, DrawStyleState);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _this = _possibleConstructorReturn(this, (_ref = DrawStyleState.__proto__ || Object.getPrototypeOf(DrawStyleState)).call.apply(_ref, [this].concat(args)));\n\n    _this._defaults = {\n      packedFillColor: _this.packedFillColor,\n      packedStrokeColor: _this.packedStrokeColor,\n      strokeWidth: _this.strokeWidth,\n      lineJoin: _this.lineJoin,\n      lineCap: _this.lineCap,\n      dashPattern: _this.dashPattern,\n      dashOffset: _this.dashOffset\n    };\n    return _this;\n  }\n\n  _createClass(DrawStyleState, [{\n    key: \"setFillStyle\",\n    value: function setFillStyle(ctx, fillStyle) {\n      if (fillStyle.packedFillColor !== this.packedFillColor) {\n        this.packedFillColor = fillStyle.packedFillColor;\n        ctx.fillStyle = this.fillColor;\n      }\n    }\n  }, {\n    key: \"setStrokeStyle\",\n    value: function setStrokeStyle(ctx, strokeStyle) {\n      if (strokeStyle.packedStrokeColor !== this.packedStrokeColor) {\n        this.packedStrokeColor = strokeStyle.packedStrokeColor;\n        ctx.strokeStyle = this.strokeColor;\n      }\n      if (strokeStyle.strokeWidth !== this._strokeWidth) {\n        this.strokeWidth = strokeStyle.strokeWidth;\n        ctx.lineWidth = this._strokeWidth;\n      }\n      if (strokeStyle.lineJoin !== this._lineJoin) {\n        this.lineJoin = strokeStyle.lineJoin;\n        ctx.lineJoin = this._lineJoin;\n      }\n      if (strokeStyle.lineCap !== this._lineCap) {\n        this.lineCap = strokeStyle.lineCap;\n        ctx.lineCap = this._lineCap;\n      }\n\n      var dashPattern = strokeStyle._dashPattern;\n      var diff = false;\n      if (dashPattern.length === this._dashPattern.length) {\n        for (var i = 0; i < dashPattern.length; i += 1) {\n          if (dashPattern[i] !== this._dashPattern[i]) {\n            diff = true;\n            break;\n          }\n        }\n      } else {\n        diff = true;\n      }\n\n      if (diff) {\n        this.dashPattern = dashPattern;\n        ctx.setLineDash(this._dashPattern);\n      }\n\n      if (strokeStyle.dashOffset !== this._dashOffset) {\n        this.dashOffset = strokeStyle.dashOffset;\n        ctx.lineDashOffset = this._dashOffset;\n      }\n    }\n  }, {\n    key: \"applyDefaults\",\n    value: function applyDefaults(ctx) {\n      var _this2 = this;\n\n      Object.getOwnPropertyNames(this._defaults).forEach(function (prop) {\n        _this2[prop] = _this2._defaults[prop];\n      });\n      this.setFillCtx(ctx);\n      this.setStrokeCtx(ctx);\n    }\n  }]);\n\n  return DrawStyleState;\n}(_basicStyle2.default);\n\nfunction addClass(element, className) {\n  if (element && (\" \" + element.className + \" \").indexOf(\" \" + className + \" \") < 0) {\n    element.className += (element.className ? \" \" : \"\") + className;\n  }\n}\n\nfunction createCanvas(parent) {\n  var canvasContainer = document.createElement(\"div\");\n  addClass(canvasContainer, \"mapd-draw-canvas-container\");\n\n  var canvas = document.createElement(\"canvas\");\n  var canvasContext = canvas.getContext(\"2d\");\n  var ratio = CanvasUtils.makeCanvasAutoHighDPI(canvasContext);\n  // const ratio = 1\n\n  // add class?\n  addClass(canvas, \"mapd-draw-canvas\");\n  canvas.style.position = \"absolute\";\n  canvas.style.pointerEvents = \"none\";\n\n  canvasContainer.appendChild(canvas);\n\n  // canvas.setAttribute(\"width\", ratio * parent.offsetX)\n  // canvas.setAttribute(\"height\", ratio * parent.offsetY)\n  // parent.insertBefore(canvas, parent.firstChild)\n  parent.appendChild(canvasContainer);\n\n  return {\n    canvasContainer: canvasContainer,\n    canvas: canvas,\n    canvasContext: canvasContext,\n    ratio: ratio\n  };\n}\n\nfunction addShapesToMap(newShapes, existingObjectsMap, currIds, reorderCb, redrawCb) {\n  newShapes.forEach(function (shape) {\n    existingObjectsMap.set(shape, {\n      shapeObj: shape,\n      shapeId: currIds.shapeId,\n      shapeIdx: -1\n    });\n    shape.on([\"changed:order\", \"changed:visibility\", \"changed:style\"], reorderCb);\n    shape.on([\"changed:geom\", \"changed:visibility\", \"changed:xform\"], redrawCb);\n    currIds.shapeId += 1;\n  });\n}\n\nfunction deleteShapesFromMap(shapes, existingObjectsMap, reorderCb, redrawCb) {\n  var idxs = [];\n  shapes.forEach(function (shape) {\n    var shapeInfo = existingObjectsMap.get(shape);\n    if (shapeInfo) {\n      idxs.push(shapeInfo.shapeIdx);\n    }\n    existingObjectsMap.delete(shape);\n    shape.off([\"changed\"], [reorderCb, redrawCb]);\n  });\n  return idxs;\n}\n\nvar DrawEngine = function (_EventHander) {\n  _inherits(DrawEngine, _EventHander);\n\n  function DrawEngine(parent, opts) {\n    _classCallCheck(this, DrawEngine);\n\n    var _this3 = _possibleConstructorReturn(this, (DrawEngine.__proto__ || Object.getPrototypeOf(DrawEngine)).call(this));\n\n    _this3._init(parent, opts);\n    return _this3;\n  }\n\n  _createClass(DrawEngine, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _this4 = this;\n\n      this._destroyCanvas();\n\n      if (this._objects) {\n        this._objects.forEach(function (shapeInfo, shape) {\n          shape.off(\"changed\", [_this4._reorderCb, _this4._redrawCb]);\n        });\n        this._objects.clear();\n        this._sortedObjs = [];\n        this._reorderedObjIdxs.clear();\n      }\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(opts) {\n      var width = 0;\n      if (this._parent.offsetWidth) {\n        width = Math.max(width, this._parent.offsetWidth - this._margins.left - this._margins.right);\n      }\n\n      var height = 0;\n      if (this._parent.offsetHeight) {\n        height = Math.max(height, this._parent.offsetHeight - this._margins.top - this._margins.bottom);\n      }\n\n      this._drawCanvas.width = width * this._pixelRatio;\n      this._drawCanvas.height = height * this._pixelRatio;\n\n      this._drawCanvas.style.left = this._margins.left + \"px\";\n      this._drawCanvas.style.top = this._margins.top + \"px\";\n      this._drawCanvas.style.width = width + \"px\";\n      this._drawCanvas.style.height = height + \"px\";\n\n      if (this._camera) {\n        // const currViewport = this._camera.viewport\n        // const currSpace = this._camera.projectionBounds\n        // const viewportExtents = [0, 0]\n        // AABox2d.getExtents(viewportExtents, currViewport)\n        // const spaceCenter = [0, 0]\n        // const spaceExtents = [0, 0]\n        // AABox2d.getCenter(spaceCenter, currSpace)\n        // AABox2d.getExtents(spaceExtents, currSpace)\n        // const ratio = spaceExtents\n        // Vec2d.div(ratio, spaceExtents, viewportExtents)\n        // AABox2d.set(currViewport, 0, 0, width, height)\n        // AABox2d.getExtents(viewportExtents, currViewport)\n        // Vec2d.multiply(spaceExtents, ratio, viewportExtents)\n        // AABox2d.initCenterExtents(currSpace, spaceCenter, spaceExtents)\n        // this._camera.viewport = currViewport\n        // this._camera.projectionBounds = currSpace\n        //   // this._camera.viewport = [0, 0, width, height]\n        //   // this._camera.projectionBounds = [0, 0, width, height]\n      } else {\n        var projDims = opts && opts.projectionDimensions ? opts.projectionDimensions : [width, height];\n        this._camera = new _camera2d2.default([0, 0, width, height], projDims, opts.flipY ? Boolean(opts.flipY) : false);\n        this._camera.setPosition(opts && opts.cameraPosition ? opts.cameraPosition : [width / 2.0, height / 2.0]);\n        this._camera.on(\"changed\", this._rerenderCb);\n      }\n      // this._camera = new Camera2d([0, 0, this.width, this.height], [0, 0, this.width, this.height])\n      // this._camera.on(\"changed\", this._rerenderCb)\n\n      this._rerenderCb();\n    }\n  }, {\n    key: \"_mousedownCB\",\n    value: function _mousedownCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n\n      this.fire(\"mousedown\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_touchstartCB\",\n    value: function _touchstartCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n      this.fire(\"touchstart\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_mouseupCB\",\n    value: function _mouseupCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n\n      this.fire(\"mouseup\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_touchendCB\",\n    value: function _touchendCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n\n      this.fire(\"touchend\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_mousemoveCB\",\n    value: function _mousemoveCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n\n      this.fire(\"mousemove\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_touchmoveCB\",\n    value: function _touchmoveCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n\n      this.fire(\"touchmove\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_clickCB\",\n    value: function _clickCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n\n      this.fire(\"click\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_dblclickCB\",\n    value: function _dblclickCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n\n      this.fire(\"dblclick\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_mouseoverCB\",\n    value: function _mouseoverCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n\n      this.fire(\"mouseover\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_mouseoutCB\",\n    value: function _mouseoutCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n\n      this.fire(\"mouseout\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_enableEvents\",\n    value: function _enableEvents() {\n      this.registerEvents(mouseevents);\n      var callbacks = mouseevents.map(function (event) {\n        return \"_\" + event + \"CB\";\n      });\n      // bindAll(callbacks, this)\n      for (var i = 0; i < mouseevents.length; i += 1) {\n        document.addEventListener(mouseevents[i], this[callbacks[i]], true);\n      }\n    }\n  }, {\n    key: \"_disableEvents\",\n    value: function _disableEvents() {\n      var callbacks = mouseevents.map(function (event) {\n        return \"_\" + event + \"CB\";\n      });\n      for (var i = 0; i < mouseevents.length; i += 1) {\n        document.removeEventListener(mouseevents[i], this[callbacks[i]], true);\n      }\n    }\n  }, {\n    key: \"_initCanvas\",\n    value: function _initCanvas(parent, opts) {\n      var _this5 = this;\n\n      var forceEvents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      this._margins = opts && opts.margins ? Object.assign({}, opts.margins) : {};\n      marginProps.forEach(function (prop) {\n        if (typeof _this5._margins[prop] !== \"number\") {\n          _this5._margins[prop] = 0;\n        }\n      });\n\n      var _createCanvas = createCanvas(parent),\n          canvasContainer = _createCanvas.canvasContainer,\n          canvas = _createCanvas.canvas,\n          canvasContext = _createCanvas.canvasContext,\n          ratio = _createCanvas.ratio;\n\n      this._container = canvasContainer;\n      this._drawCanvas = canvas;\n      this._drawCtx = canvasContext;\n      this._pixelRatio = ratio;\n      this._parent = parent;\n\n      (0, _utils.bindAll)([\"_resize\"], this);\n      this._resize(opts);\n      this._resizeSensor = new _ResizeSensor2.default(parent, this._resize);\n\n      if (forceEvents || forceEvents === null && opts && opts.enableEvents) {\n        this._enableEvents();\n      }\n    }\n  }, {\n    key: \"_destroyCanvas\",\n    value: function _destroyCanvas() {\n      if (this._drawCanvas) {\n        this._disableEvents();\n      }\n\n      if (this._parent) {\n        this._parent.removeChild(this._drawCanvas);\n\n        if (this._resizeSensor) {\n          this._resizeSensor.detach(this._parent, this._resize);\n        }\n      }\n\n      this._drawCanvas = null;\n      this._drawCtx = null;\n      this._parent = null;\n    }\n  }, {\n    key: \"_init\",\n    value: function _init(parent, opts) {\n      var forceEvents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      this.registerEvents([EventConstants.SHAPE_ADD, EventConstants.SHAPE_DELETE]);\n\n      (0, _utils.bindAll)([\"_reorderCb\", \"_rerenderCb\"], this);\n      (0, _utils.bindAll)([\"_mousedownCB\", \"_mouseupCB\", \"_mousemoveCB\", \"_clickCB\", \"_dblclickCB\", \"_mouseoverCB\", \"_mouseoutCB\", \"_touchstartCB\", \"_touchendCB\", \"_touchmoveCB\"], this);\n\n      this._renderFrameCb = this.renderAll.bind(this);\n      this._renderRequestId = 0;\n      this._ids = {\n        shapeId: 1\n      };\n\n      this._objects = new Map();\n      this._sortedObjs = [];\n      this._reorderedObjIdxs = new Set();\n\n      this._initCanvas(parent, opts, forceEvents);\n\n      this._styleState = new DrawStyleState({\n        fillColor: \"red\"\n      });\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer() {\n      return this._parent;\n    }\n  }, {\n    key: \"getCanvasContainer\",\n    value: function getCanvasContainer() {\n      return this._container;\n    }\n  }, {\n    key: \"getCanvas\",\n    value: function getCanvas() {\n      return this._drawCanvas;\n    }\n  }, {\n    key: \"project\",\n    value: function project(out, screenPt) {\n      var screenToWorldMatrix = this._camera.screenToWorldMatrix;\n      return Point2d.transformMat2d(out, screenPt, screenToWorldMatrix);\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(out, worldPt) {\n      var worldToScreenMatrix = this._camera.worldToScreenMatrix;\n      return Point2d.transformMat2d(out, worldPt, worldToScreenMatrix);\n    }\n  }, {\n    key: \"hasShape\",\n    value: function hasShape(shape) {\n      return this._objects.has(shape);\n    }\n  }, {\n    key: \"addShape\",\n    value: function addShape(shape) {\n      var shapes = shape;\n      if (!Array.isArray(shapes)) {\n        shapes = [shape];\n      }\n\n      addShapesToMap(shapes, this._objects, this._ids, this._reorderCb, this._rerenderCb);\n\n      // fire add event\n      this.fire(\"shape:add\", {\n        shape: shapes\n      });\n\n      var proxyEvent = {\n        target: shapes\n      };\n      this._reorderCb(proxyEvent);\n\n      return this;\n    }\n  }, {\n    key: \"deleteShape\",\n    value: function deleteShape(shape) {\n      var shapes = shape;\n      if (!Array.isArray(shapes)) {\n        shapes = [shape];\n      }\n\n      var idxs = deleteShapesFromMap(shapes, this._objects, this._reorderCb, this._rerenderCb);\n      var index = -1;\n      for (var i = 0; i < shapes.length; i += 1) {\n        if ((index = this._sortedObjs.indexOf(shapes[i])) >= 0) {\n          this._sortedObjs.splice(index, 1);\n        }\n        this._reorderedObjIdxs.add(idxs[i]);\n      }\n      this._rerenderCb();\n\n      this.fire(\"shape:delete\", {\n        shape: shapes\n      });\n\n      return this;\n    }\n  }, {\n    key: \"deleteAllShapes\",\n    value: function deleteAllShapes() {\n      this.deleteShape(this.sortedShapes.slice());\n      return this;\n    }\n  }, {\n    key: \"moveShapeToTop\",\n    value: function moveShapeToTop(shape) {\n      if (this._objects.has(shape)) {\n        var shapes = this.sortedShapes;\n        var zindex = shapes[shapes.length - 1].zIndex;\n        shape.zIndex = zindex + 1;\n      }\n    }\n  }, {\n    key: \"moveShapeToBack\",\n    value: function moveShapeToBack(shape) {\n      if (this._objects.has(shape)) {\n        var shapes = this.sortedShapes;\n        var zindex = shapes[0].zIndex;\n        shape.zIndex = zindex;\n      }\n    }\n  }, {\n    key: \"getShapesAsJSON\",\n    value: function getShapesAsJSON() {\n      var shapes = this.sortedShapes;\n      return shapes.map(function (shape) {\n        return shape.toJSON();\n      });\n    }\n  }, {\n    key: \"_rerenderCb\",\n    value: function _rerenderCb() {\n      if (this._renderRequestId) {\n        window.cancelAnimationFrame(this._renderRequestId);\n      }\n      this._renderRequestId = window.requestAnimationFrame(this._renderFrameCb);\n    }\n  }, {\n    key: \"_reorderCb\",\n    value: function _reorderCb(event) {\n      var _this6 = this;\n\n      var changedShapes = event.target;\n      if (!Array.isArray(changedShapes)) {\n        changedShapes = [event.target];\n      }\n      changedShapes.forEach(function (changedShape) {\n        console.assert(changedShape, \"A changed event doesn't have an object\");\n        var shapeInfo = _this6._objects.get(changedShape);\n        console.assert(shapeInfo, \"A changed event target isn't in the list of shapes \" + changedShape);\n        if (shapeInfo.shapeIdx < 0) {\n          shapeInfo.shapeIdx = _this6._sortedObjs.push(changedShape) - 1;\n        }\n        _this6._reorderedObjIdxs.add(shapeInfo.shapeIdx);\n      });\n      this._rerenderCb();\n    }\n  }, {\n    key: \"_renderShapes\",\n    value: function _renderShapes(ctx, drawShapes, camera) {\n      var _this7 = this;\n\n      var worldToScreenMat = camera.worldToScreenMatrix;\n      drawShapes.forEach(function (shape) {\n        if (shape.visible) {\n          shape.render(ctx, worldToScreenMat, _this7._styleState);\n        }\n      });\n    }\n  }, {\n    key: \"renderAll\",\n    value: function renderAll() {\n      var ctx = this._drawCtx;\n      // ctx.clearRect(0, 0, this.width, this.height)\n      ctx.clearRect(0, 0, this._drawCanvas.offsetWidth, this._drawCanvas.offsetHeight);\n\n      if (!this._objects.size) {\n        return;\n      }\n\n      ctx.save();\n      var drawShapes = this.sortedShapes;\n      this._styleState.applyDefaults(ctx);\n      this._renderShapes(ctx, drawShapes, this._camera);\n      ctx.restore();\n    }\n  }, {\n    key: \"sortedShapes\",\n    get: function get() {\n      if (this._reorderedObjIdxs.size) {\n        console.assert(this._sortedObjs.length === this._objects.size, \"Size mismatch when rendering objets. Something got out of sync - sorted objs length: \" + this._sortedObjs.length + \", objects length: \" + this._objects.size);\n\n        // if (this._reorderedObjIdxs.length / this._sortedObjs.length > 0.7) {\n        //   // might as well just resort the whole thing over\n        //   this._sortedObjs.sort(shapeInfoCompare)\n        // } else {\n        // }\n\n        this._sortedObjs.sort(_baseShape2.default.shapeCompare);\n        this._reorderedObjIdxs.clear();\n      }\n      return this._sortedObjs;\n    }\n  }, {\n    key: \"margins\",\n    get: function get() {\n      var _this8 = this;\n\n      var rtn = {};\n      marginProps.forEach(function (prop) {\n        rtn[prop] = _this8._margins[prop];\n      });\n      return rtn;\n    },\n    set: function set(margins) {\n      var _this9 = this;\n\n      marginProps.forEach(function (prop) {\n        if (typeof margins[prop] === \"number\" && margins[prop] !== _this9._margins[prop]) {\n          _this9._margins[prop] = margins.prop;\n        }\n      });\n\n      this._resize();\n    }\n  }, {\n    key: \"viewport\",\n    get: function get() {\n      return this._camera.viewport;\n    },\n    set: function set(viewport) {\n      this._camera.viewport = viewport;\n    }\n  }, {\n    key: \"projectionDimensions\",\n    get: function get() {\n      return this._camera.projectionDimensions;\n    },\n    set: function set(projectionDimensions) {\n      this._camera.projectionDimensions = projectionDimensions;\n      return this;\n    }\n  }, {\n    key: \"cameraPosition\",\n    get: function get() {\n      return this._camera.getPosition();\n    },\n    set: function set(pos) {\n      this._camera.setPosition(pos);\n      return this;\n    }\n  }]);\n\n  return DrawEngine;\n}(_eventHandler2.default);\n\nexports.default = DrawEngine;\n\n\nDrawEngine.EventConstants = EventConstants;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	eval("/* eslint-disable */\n// Copyright 2001 softSurfer, 2012 Dan Sunday\n// This code may be freely used and modified for any purpose\n// providing that this copyright notice is included with it.\n// SoftSurfer makes no warranty for this code, and cannot be held\n// liable for any real or imagined damage resulting from its use.\n// Users of this code must verify correctness for their application.\n\n// from http://geomalgorithms.com/a12-_hull-3.html\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.simpleHull_2D = simpleHull_2D;\nvar X = 0;\nvar Y = 1;\n\n/**\n * Test if a point is Left|On|Right of an infinite line.\n * @param  {Point2d}  P0 [description]\n * @param  {Point2d}  P1 [description]\n * @param  {Point2d}  P2 [description]\n * @return {Boolean}  Returns > 0 if P2 is left of the line thru P0 & P1,\n *                    Returns < 0 if P2 is to the right\n *                    Returns 0 if P2 is on the line\n */\nfunction isLeft(P0, P1, P2) {\n  return (P1[X] - P0[X]) * (P2[Y] - P0[Y]) - (P2[X] - P0[X]) * (P1[Y] - P0[Y]);\n}\n\n/**\n * Melkman's 2D simple polyline O(n) convex hull algorithm\n * @param  {Point2d[]} verts [description]\n * @return {number[]}       [description]\n */\nfunction simpleHull_2D(verts) {\n  // initialize a deque D[] from bottom to top so that the\n  // 1st three vertices of P[] are a ccw triangle\n  var H = [];\n  var n = verts.length;\n\n  if (n < 3) {\n    for (var i = 0; i < n; i += 1) {\n      H[i] = i;\n    }\n    return H;\n  }\n\n  var D = new Array(2 * n + 1);\n  D.fill(-1);\n  var bot = n - 2;\n  var top = bot + 3; // initial bottom and top deque indices\n\n  D[bot] = D[top] = 2; // 3rd vertex is at both bot and top\n  if (isLeft(verts[0], verts[1], verts[2]) > 0) {\n    D[bot + 1] = 0;\n    D[bot + 2] = 1; // ccw vertices are: 2,0,1,2\n  } else {\n    D[bot + 1] = 1;\n    D[bot + 2] = 0; // ccw vertices are: 2,1,0,2\n  }\n\n  // compute the hull on the deque D[]\n  for (var _i = 3; _i < n; _i += 1) {\n    // process the rest of vertices\n    // test if next vertex is outside the deque hull\n    if (isLeft(verts[D[bot]], verts[D[bot + 1]], verts[_i]) <= 0 || isLeft(verts[D[top - 1]], verts[D[top]], verts[_i]) <= 0) {\n\n      // incrementally add an exterior vertex to the deque hull\n      // get the rightmost tangent at the deque bot\n      while (D[bot] >= 0 && D[bot + 1] >= 0 && isLeft(verts[D[bot]], verts[D[bot + 1]], verts[_i]) <= 0) {\n        bot += 1; // remove bot of deque\n      }\n      bot -= 1;\n      D[bot] = _i; // insert verts[i] at bot of deque\n\n      // get the leftmost tangent at the deque top\n      while (D[top] >= 0 && D[top + 1] >= 0 && isLeft(verts[D[top - 1]], verts[D[top]], verts[_i]) <= 0) {\n        top -= 1; // pop top of deque\n      }\n      top += 1;\n      D[top] = _i; // push verts[i] onto top of deque\n    }\n  }\n\n  // transcribe deque D[] to the output hull array H[]\n  var h = 0;\n  for (h = 0; h <= top - bot - 1; h += 1) {\n    H[h] = D[bot + h];\n  }\n\n  if (D[bot + h] !== H[0]) {\n    H[h] = D[bot + h];\n  }\n\n  return H;\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9tYXRoL2NvbnZleC1odWxsLmpzPzBkYTkiXSwibmFtZXMiOlsic2ltcGxlSHVsbF8yRCIsIlgiLCJZIiwiaXNMZWZ0IiwiUDAiLCJQMSIsIlAyIiwidmVydHMiLCJIIiwibiIsImxlbmd0aCIsImkiLCJEIiwiQXJyYXkiLCJmaWxsIiwiYm90IiwidG9wIiwiaCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7Ozs7O1FBd0JnQkEsYSxHQUFBQSxhO0FBdEJoQixJQUFNQyxJQUFJLENBQVY7QUFDQSxJQUFNQyxJQUFJLENBQVY7O0FBR0E7Ozs7Ozs7OztBQVNBLFNBQVNDLE1BQVQsQ0FBZ0JDLEVBQWhCLEVBQW9CQyxFQUFwQixFQUF3QkMsRUFBeEIsRUFBNEI7QUFDMUIsU0FBTyxDQUFDRCxHQUFHSixDQUFILElBQVFHLEdBQUdILENBQUgsQ0FBVCxLQUFtQkssR0FBR0osQ0FBSCxJQUFRRSxHQUFHRixDQUFILENBQTNCLElBQW9DLENBQUNJLEdBQUdMLENBQUgsSUFBUUcsR0FBR0gsQ0FBSCxDQUFULEtBQW1CSSxHQUFHSCxDQUFILElBQVFFLEdBQUdGLENBQUgsQ0FBM0IsQ0FBM0M7QUFDRDs7QUFFRDs7Ozs7QUFLTyxTQUFTRixhQUFULENBQXVCTyxLQUF2QixFQUE4QjtBQUNuQztBQUNBO0FBQ0EsTUFBTUMsSUFBSSxFQUFWO0FBQ0EsTUFBTUMsSUFBSUYsTUFBTUcsTUFBaEI7O0FBRUEsTUFBSUQsSUFBSSxDQUFSLEVBQVc7QUFDVCxTQUFLLElBQUlFLElBQUksQ0FBYixFQUFnQkEsSUFBSUYsQ0FBcEIsRUFBdUJFLEtBQUssQ0FBNUIsRUFBK0I7QUFDN0JILFFBQUVHLENBQUYsSUFBT0EsQ0FBUDtBQUNEO0FBQ0QsV0FBT0gsQ0FBUDtBQUNEOztBQUVELE1BQU1JLElBQUksSUFBSUMsS0FBSixDQUFVLElBQUlKLENBQUosR0FBUSxDQUFsQixDQUFWO0FBQ0FHLElBQUVFLElBQUYsQ0FBTyxDQUFDLENBQVI7QUFDQSxNQUFJQyxNQUFNTixJQUFJLENBQWQ7QUFDQSxNQUFJTyxNQUFNRCxNQUFNLENBQWhCLENBaEJtQyxDQWdCakI7O0FBRWxCSCxJQUFFRyxHQUFGLElBQVNILEVBQUVJLEdBQUYsSUFBUyxDQUFsQixDQWxCbUMsQ0FrQmY7QUFDcEIsTUFBSWIsT0FBT0ksTUFBTSxDQUFOLENBQVAsRUFBaUJBLE1BQU0sQ0FBTixDQUFqQixFQUEyQkEsTUFBTSxDQUFOLENBQTNCLElBQXVDLENBQTNDLEVBQThDO0FBQzVDSyxNQUFFRyxNQUFNLENBQVIsSUFBYSxDQUFiO0FBQ0FILE1BQUVHLE1BQU0sQ0FBUixJQUFhLENBQWIsQ0FGNEMsQ0FFN0I7QUFDaEIsR0FIRCxNQUdPO0FBQ0xILE1BQUVHLE1BQU0sQ0FBUixJQUFhLENBQWI7QUFDQUgsTUFBRUcsTUFBTSxDQUFSLElBQWEsQ0FBYixDQUZLLENBRVU7QUFDaEI7O0FBRUQ7QUFDQSxPQUFLLElBQUlKLEtBQUksQ0FBYixFQUFnQkEsS0FBSUYsQ0FBcEIsRUFBdUJFLE1BQUssQ0FBNUIsRUFBK0I7QUFBRTtBQUMvQjtBQUNBLFFBQUtSLE9BQU9JLE1BQU1LLEVBQUVHLEdBQUYsQ0FBTixDQUFQLEVBQXNCUixNQUFNSyxFQUFFRyxNQUFNLENBQVIsQ0FBTixDQUF0QixFQUF5Q1IsTUFBTUksRUFBTixDQUF6QyxLQUFzRCxDQUF2RCxJQUNEUixPQUFPSSxNQUFNSyxFQUFFSSxNQUFNLENBQVIsQ0FBTixDQUFQLEVBQTBCVCxNQUFNSyxFQUFFSSxHQUFGLENBQU4sQ0FBMUIsRUFBeUNULE1BQU1JLEVBQU4sQ0FBekMsS0FBc0QsQ0FEekQsRUFDNkQ7O0FBRTNEO0FBQ0E7QUFDQSxhQUFPQyxFQUFFRyxHQUFGLEtBQVUsQ0FBVixJQUFlSCxFQUFFRyxNQUFNLENBQVIsS0FBYyxDQUE3QixJQUFrQ1osT0FBT0ksTUFBTUssRUFBRUcsR0FBRixDQUFOLENBQVAsRUFBc0JSLE1BQU1LLEVBQUVHLE1BQU0sQ0FBUixDQUFOLENBQXRCLEVBQXlDUixNQUFNSSxFQUFOLENBQXpDLEtBQXNELENBQS9GLEVBQWtHO0FBQ2hHSSxlQUFPLENBQVAsQ0FEZ0csQ0FDdkY7QUFDVjtBQUNEQSxhQUFPLENBQVA7QUFDQUgsUUFBRUcsR0FBRixJQUFTSixFQUFULENBUjJELENBUWhEOztBQUVYO0FBQ0EsYUFBT0MsRUFBRUksR0FBRixLQUFVLENBQVYsSUFBZUosRUFBRUksTUFBTSxDQUFSLEtBQWMsQ0FBN0IsSUFBa0NiLE9BQU9JLE1BQU1LLEVBQUVJLE1BQU0sQ0FBUixDQUFOLENBQVAsRUFBMEJULE1BQU1LLEVBQUVJLEdBQUYsQ0FBTixDQUExQixFQUF5Q1QsTUFBTUksRUFBTixDQUF6QyxLQUFzRCxDQUEvRixFQUFrRztBQUNoR0ssZUFBTyxDQUFQLENBRGdHLENBQ3ZGO0FBQ1Y7QUFDREEsYUFBTyxDQUFQO0FBQ0FKLFFBQUVJLEdBQUYsSUFBU0wsRUFBVCxDQWYyRCxDQWVoRDtBQUNaO0FBQ0Y7O0FBRUQ7QUFDQSxNQUFJTSxJQUFJLENBQVI7QUFDQSxPQUFLQSxJQUFJLENBQVQsRUFBWUEsS0FBTUQsTUFBTUQsR0FBTixHQUFZLENBQTlCLEVBQWtDRSxLQUFLLENBQXZDLEVBQTBDO0FBQ3hDVCxNQUFFUyxDQUFGLElBQU9MLEVBQUVHLE1BQU1FLENBQVIsQ0FBUDtBQUNEOztBQUVELE1BQUlMLEVBQUVHLE1BQU1FLENBQVIsTUFBZVQsRUFBRSxDQUFGLENBQW5CLEVBQXlCO0FBQ3ZCQSxNQUFFUyxDQUFGLElBQU9MLEVBQUVHLE1BQU1FLENBQVIsQ0FBUDtBQUNEOztBQUVELFNBQU9ULENBQVA7QUFDRCIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBDb3B5cmlnaHQgMjAwMSBzb2Z0U3VyZmVyLCAyMDEyIERhbiBTdW5kYXlcbi8vIFRoaXMgY29kZSBtYXkgYmUgZnJlZWx5IHVzZWQgYW5kIG1vZGlmaWVkIGZvciBhbnkgcHVycG9zZVxuLy8gcHJvdmlkaW5nIHRoYXQgdGhpcyBjb3B5cmlnaHQgbm90aWNlIGlzIGluY2x1ZGVkIHdpdGggaXQuXG4vLyBTb2Z0U3VyZmVyIG1ha2VzIG5vIHdhcnJhbnR5IGZvciB0aGlzIGNvZGUsIGFuZCBjYW5ub3QgYmUgaGVsZFxuLy8gbGlhYmxlIGZvciBhbnkgcmVhbCBvciBpbWFnaW5lZCBkYW1hZ2UgcmVzdWx0aW5nIGZyb20gaXRzIHVzZS5cbi8vIFVzZXJzIG9mIHRoaXMgY29kZSBtdXN0IHZlcmlmeSBjb3JyZWN0bmVzcyBmb3IgdGhlaXIgYXBwbGljYXRpb24uXG5cbi8vIGZyb20gaHR0cDovL2dlb21hbGdvcml0aG1zLmNvbS9hMTItX2h1bGwtMy5odG1sXG5cblwidXNlIHN0cmljdFwiXG5cbmNvbnN0IFggPSAwXG5jb25zdCBZID0gMVxuXG5cbi8qKlxuICogVGVzdCBpZiBhIHBvaW50IGlzIExlZnR8T258UmlnaHQgb2YgYW4gaW5maW5pdGUgbGluZS5cbiAqIEBwYXJhbSAge1BvaW50MmR9ICBQMCBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtQb2ludDJkfSAgUDEgW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7UG9pbnQyZH0gIFAyIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge0Jvb2xlYW59ICBSZXR1cm5zID4gMCBpZiBQMiBpcyBsZWZ0IG9mIHRoZSBsaW5lIHRocnUgUDAgJiBQMSxcbiAqICAgICAgICAgICAgICAgICAgICBSZXR1cm5zIDwgMCBpZiBQMiBpcyB0byB0aGUgcmlnaHRcbiAqICAgICAgICAgICAgICAgICAgICBSZXR1cm5zIDAgaWYgUDIgaXMgb24gdGhlIGxpbmVcbiAqL1xuZnVuY3Rpb24gaXNMZWZ0KFAwLCBQMSwgUDIpIHtcbiAgcmV0dXJuIChQMVtYXSAtIFAwW1hdKSAqIChQMltZXSAtIFAwW1ldKSAtIChQMltYXSAtIFAwW1hdKSAqIChQMVtZXSAtIFAwW1ldKVxufVxuXG4vKipcbiAqIE1lbGttYW4ncyAyRCBzaW1wbGUgcG9seWxpbmUgTyhuKSBjb252ZXggaHVsbCBhbGdvcml0aG1cbiAqIEBwYXJhbSAge1BvaW50MmRbXX0gdmVydHMgW2Rlc2NyaXB0aW9uXVxuICogQHJldHVybiB7bnVtYmVyW119ICAgICAgIFtkZXNjcmlwdGlvbl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpbXBsZUh1bGxfMkQodmVydHMpIHtcbiAgLy8gaW5pdGlhbGl6ZSBhIGRlcXVlIERbXSBmcm9tIGJvdHRvbSB0byB0b3Agc28gdGhhdCB0aGVcbiAgLy8gMXN0IHRocmVlIHZlcnRpY2VzIG9mIFBbXSBhcmUgYSBjY3cgdHJpYW5nbGVcbiAgY29uc3QgSCA9IFtdXG4gIGNvbnN0IG4gPSB2ZXJ0cy5sZW5ndGhcblxuICBpZiAobiA8IDMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkgKz0gMSkge1xuICAgICAgSFtpXSA9IGlcbiAgICB9XG4gICAgcmV0dXJuIEhcbiAgfVxuXG4gIGNvbnN0IEQgPSBuZXcgQXJyYXkoMiAqIG4gKyAxKVxuICBELmZpbGwoLTEpXG4gIGxldCBib3QgPSBuIC0gMlxuICBsZXQgdG9wID0gYm90ICsgMyAvLyBpbml0aWFsIGJvdHRvbSBhbmQgdG9wIGRlcXVlIGluZGljZXNcblxuICBEW2JvdF0gPSBEW3RvcF0gPSAyIC8vIDNyZCB2ZXJ0ZXggaXMgYXQgYm90aCBib3QgYW5kIHRvcFxuICBpZiAoaXNMZWZ0KHZlcnRzWzBdLCB2ZXJ0c1sxXSwgdmVydHNbMl0pID4gMCkge1xuICAgIERbYm90ICsgMV0gPSAwXG4gICAgRFtib3QgKyAyXSA9IDEgLy8gY2N3IHZlcnRpY2VzIGFyZTogMiwwLDEsMlxuICB9IGVsc2Uge1xuICAgIERbYm90ICsgMV0gPSAxXG4gICAgRFtib3QgKyAyXSA9IDAgLy8gY2N3IHZlcnRpY2VzIGFyZTogMiwxLDAsMlxuICB9XG5cbiAgLy8gY29tcHV0ZSB0aGUgaHVsbCBvbiB0aGUgZGVxdWUgRFtdXG4gIGZvciAobGV0IGkgPSAzOyBpIDwgbjsgaSArPSAxKSB7IC8vIHByb2Nlc3MgdGhlIHJlc3Qgb2YgdmVydGljZXNcbiAgICAvLyB0ZXN0IGlmIG5leHQgdmVydGV4IGlzIG91dHNpZGUgdGhlIGRlcXVlIGh1bGxcbiAgICBpZiAoKGlzTGVmdCh2ZXJ0c1tEW2JvdF1dLCB2ZXJ0c1tEW2JvdCArIDFdXSwgdmVydHNbaV0pIDw9IDApIHx8XG4gICAgICAoaXNMZWZ0KHZlcnRzW0RbdG9wIC0gMV1dLCB2ZXJ0c1tEW3RvcF1dLCB2ZXJ0c1tpXSkgPD0gMCkpIHtcblxuICAgICAgLy8gaW5jcmVtZW50YWxseSBhZGQgYW4gZXh0ZXJpb3IgdmVydGV4IHRvIHRoZSBkZXF1ZSBodWxsXG4gICAgICAvLyBnZXQgdGhlIHJpZ2h0bW9zdCB0YW5nZW50IGF0IHRoZSBkZXF1ZSBib3RcbiAgICAgIHdoaWxlIChEW2JvdF0gPj0gMCAmJiBEW2JvdCArIDFdID49IDAgJiYgaXNMZWZ0KHZlcnRzW0RbYm90XV0sIHZlcnRzW0RbYm90ICsgMV1dLCB2ZXJ0c1tpXSkgPD0gMCkge1xuICAgICAgICBib3QgKz0gMSAvLyByZW1vdmUgYm90IG9mIGRlcXVlXG4gICAgICB9XG4gICAgICBib3QgLT0gMVxuICAgICAgRFtib3RdID0gaSAvLyBpbnNlcnQgdmVydHNbaV0gYXQgYm90IG9mIGRlcXVlXG5cbiAgICAgIC8vIGdldCB0aGUgbGVmdG1vc3QgdGFuZ2VudCBhdCB0aGUgZGVxdWUgdG9wXG4gICAgICB3aGlsZSAoRFt0b3BdID49IDAgJiYgRFt0b3AgKyAxXSA+PSAwICYmIGlzTGVmdCh2ZXJ0c1tEW3RvcCAtIDFdXSwgdmVydHNbRFt0b3BdXSwgdmVydHNbaV0pIDw9IDApIHtcbiAgICAgICAgdG9wIC09IDEgLy8gcG9wIHRvcCBvZiBkZXF1ZVxuICAgICAgfVxuICAgICAgdG9wICs9IDFcbiAgICAgIERbdG9wXSA9IGkgLy8gcHVzaCB2ZXJ0c1tpXSBvbnRvIHRvcCBvZiBkZXF1ZVxuICAgIH1cbiAgfVxuXG4gIC8vIHRyYW5zY3JpYmUgZGVxdWUgRFtdIHRvIHRoZSBvdXRwdXQgaHVsbCBhcnJheSBIW11cbiAgbGV0IGggPSAwXG4gIGZvciAoaCA9IDA7IGggPD0gKHRvcCAtIGJvdCAtIDEpOyBoICs9IDEpIHtcbiAgICBIW2hdID0gRFtib3QgKyBoXVxuICB9XG5cbiAgaWYgKERbYm90ICsgaF0gIT09IEhbMF0pIHtcbiAgICBIW2hdID0gRFtib3QgKyBoXVxuICB9XG5cbiAgcmV0dXJuIEhcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL21hdGgvY29udmV4LWh1bGwuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _aabox2d = __webpack_require__(2);\n\nvar AABox2d = _interopRequireWildcard(_aabox2d);\n\nvar _baseShape = __webpack_require__(6);\n\nvar _baseShape2 = _interopRequireDefault(_baseShape);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @typedef {object} RectOptions\n * @property {number} [width=0] Width of the rect in world space coords\n * @property {number} [height=0] Height of the rect in world space coords\n */\n\n/**\n * @class Class for defining a rectangle shape\n * @extends {BaseShape}\n */\nvar Rect = function (_BaseShape) {\n  _inherits(Rect, _BaseShape);\n\n  /**\n   * Creates a new rectangle shape\n   * @param  {RectOptions} [opts]\n   * @return {Rect}\n   */\n  function Rect(opts) {\n    _classCallCheck(this, Rect);\n\n    var _this = _possibleConstructorReturn(this, (Rect.__proto__ || Object.getPrototypeOf(Rect)).call(this, opts));\n\n    _this._width = 0;\n    _this._height = 0;\n    if (typeof opts.width !== \"undefined\") {\n      _this.width = opts.width;\n    }\n    if (typeof opts.height !== \"undefined\") {\n      _this.height = opts.height;\n    }\n    return _this;\n  }\n\n  /**\n   * Gets the untransformed width/height of the rect\n   * @return {Vec2d} Width/height of the rect\n   */\n\n\n  _createClass(Rect, [{\n    key: \"getDimensions\",\n    value: function getDimensions() {\n      return [this._width, this._height];\n    }\n\n    /**\n     * Sets the width of the rectangle\n     * @param  {number} width Width of the rect in world-space coordinates\n     * @return {Rect}       this\n     * @fires {Shape#geomChanged}\n     * @throws {Error} If width is not a valid number\n     */\n\n  }, {\n    key: \"_updateAABox\",\n\n\n    /**\n     * Called when the bounding box requires updating\n     * @private\n     * @override\n     */\n    value: function _updateAABox() {\n      if (this._geomDirty || this._boundsOutOfDate) {\n        AABox2d.initCenterExtents(this._aabox, [0, 0], [this._width / 2, this._height / 2]);\n        AABox2d.transformMat2d(this._aabox, this._aabox, this.globalXform);\n        this._geomDirty = this._boundsOutOfDate = false;\n      }\n    }\n\n    /**\n     * Draws the rect using a 2d rendering context. Called by the BaseShape\n     * class\n     * @param  {CanvasRenderingContext2d} ctx 2d rendering context\n     * @override\n     */\n\n  }, {\n    key: \"_draw\",\n    value: function _draw(ctx) {\n      ctx.rect(0 - this.width / 2, 0 - this.height / 2, this.width, this.height);\n    }\n\n    /**\n     * Called to convert the shape to a serializable JSON object\n     * @return {object}\n     * @override\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Object.assign({\n        type: \"Rect\",\n        width: this.width,\n        height: this.height\n      }, _get(Rect.prototype.__proto__ || Object.getPrototypeOf(Rect.prototype), \"toJSON\", this).call(this));\n    }\n  }, {\n    key: \"width\",\n    set: function set(width) {\n      if (typeof width !== \"number\") {\n        throw new Error(\"Width must be a number\");\n      }\n\n      if (width !== this._width) {\n        var prev = this._width;\n        this._width = width;\n        this._geomDirty = true; // dirty needs to be set before firing event\n\n        this.fire(\"changed:geom\", {\n          attr: \"width\",\n          prevVal: prev,\n          currVal: this._width\n        });\n      }\n      return this;\n    }\n\n    /**\n     * Gets the current untransformed width of the rect\n     * @return {number} Width in world-space units\n     */\n    ,\n    get: function get() {\n      return this._width;\n    }\n\n    /**\n     * Sets the height of the rectangle\n     * @param  {number} height Height of the rect in world-space units\n     * @return {Rect}       this\n     * @fires {Shape#geomChanged}\n     * @throws {Error} If height is not a valid number\n     */\n\n  }, {\n    key: \"height\",\n    set: function set(height) {\n      if (typeof height !== \"number\") {\n        throw new Error(\"Height must be a number\");\n      }\n\n      if (height !== this._height) {\n        var prev = this._height;\n        this._height = height;\n        this._geomDirty = true; // dirty needs to be set before firing event\n\n        this.fire(\"changed:geom\", {\n          attr: \"height\",\n          prevVal: prev,\n          currVal: this._height\n        });\n      }\n      return this;\n    }\n\n    /**\n     * Gets the current untransformed height of the rect\n     * @return {number} Height in world-space units\n     */\n    ,\n    get: function get() {\n      return this._height;\n    }\n  }]);\n\n  return Rect;\n}(_baseShape2.default);\n\nexports.default = Rect;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/* eslint-disable no-magic-numbers */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.createEventedColorRGBAClass = createEventedColorRGBAClass;\n\nvar _math = __webpack_require__(5);\n\nvar _math2 = _interopRequireDefault(_math);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Color keywords as defined by the CSS color modules\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value}\n * @type {Map}\n */\nvar colorKeywords = new Map([[\"aliceblue\", \"#F0F8FF\"], [\"antiquewhite\", \"#FAEBD7\"], [\"aqua\", \"#00FFFF\"], [\"aquamarine\", \"#7FFFD4\"], [\"azure\", \"#F0FFFF\"], [\"beige\", \"#F5F5DC\"], [\"bisque\", \"#FFE4C4\"], [\"black\", \"#000000\"], [\"blanchedalmond\", \"#FFEBCD\"], [\"blue\", \"#0000FF\"], [\"blueviolet\", \"#8A2BE2\"], [\"brown\", \"#A52A2A\"], [\"burlywood\", \"#DEB887\"], [\"cadetblue\", \"#5F9EA0\"], [\"chartreuse\", \"#7FFF00\"], [\"chocolate\", \"#D2691E\"], [\"coral\", \"#FF7F50\"], [\"cornflowerblue\", \"#6495ED\"], [\"cornsilk\", \"#FFF8DC\"], [\"crimson\", \"#DC143C\"], [\"cyan\", \"#00FFFF\"], [\"darkblue\", \"#00008B\"], [\"darkcyan\", \"#008B8B\"], [\"darkgoldenrod\", \"#B8860B\"], [\"darkgray\", \"#A9A9A9\"], [\"darkgreen\", \"#006400\"], [\"darkkhaki\", \"#BDB76B\"], [\"darkmagenta\", \"#8B008B\"], [\"darkolivegreen\", \"#556B2F\"], [\"darkorange\", \"#FF8C00\"], [\"darkorchid\", \"#9932CC\"], [\"darkred\", \"#8B0000\"], [\"darksalmon\", \"#E9967A\"], [\"darkseagreen\", \"#8FBC8F\"], [\"darkslateblue\", \"#483D8B\"], [\"darkslategray\", \"#2F4F4F\"], [\"darkturquoise\", \"#00CED1\"], [\"darkviolet\", \"#9400D3\"], [\"deeppink\", \"#FF1493\"], [\"deepskyblue\", \"#00BFFF\"], [\"dimgray\", \"#696969\"], [\"dodgerblue\", \"#1E90FF\"], [\"firebrick\", \"#B22222\"], [\"floralwhite\", \"#FFFAF0\"], [\"forestgreen\", \"#228B22\"], [\"fuchsia\", \"#FF00FF\"], [\"gainsboro\", \"#DCDCDC\"], [\"ghostwhite\", \"#F8F8FF\"], [\"gold\", \"#FFD700\"], [\"goldenrod\", \"#DAA520\"], [\"gray\", \"#808080\"], [\"green\", \"#008000\"], [\"greenyellow\", \"#ADFF2F\"], [\"honeydew\", \"#F0FFF0\"], [\"hotpink\", \"#FF69B4\"], [\"indianred\", \"#CD5C5C\"], [\"indigo\", \"#4B0082\"], [\"ivory\", \"#FFFFF0\"], [\"khaki\", \"#F0E68C\"], [\"lavender\", \"#E6E6FA\"], [\"lavenderblush\", \"#FFF0F5\"], [\"lawngreen\", \"#7CFC00\"], [\"lemonchiffon\", \"#FFFACD\"], [\"lightblue\", \"#ADD8E6\"], [\"lightcoral\", \"#F08080\"], [\"lightcyan\", \"#E0FFFF\"], [\"lightgoldenrodyellow\", \"#FAFAD2\"], [\"lightgray\", \"#D3D3D3\"], [\"lightgreen\", \"#90EE90\"], [\"lightpink\", \"#FFB6C1\"], [\"lightsalmon\", \"#FFA07A\"], [\"lightseagreen\", \"#20B2AA\"], [\"lightskyblue\", \"#87CEFA\"], [\"lightslategray\", \"#778899\"], [\"lightsteelblue\", \"#B0C4DE\"], [\"lightyellow\", \"#FFFFE0\"], [\"lime\", \"#00FF00\"], [\"limegreen\", \"#32CD32\"], [\"linen\", \"#FAF0E6\"], [\"magenta\", \"#FF00FF\"], [\"maroon\", \"#800000\"], [\"mediumaquamarine\", \"#66CDAA\"], [\"mediumblue\", \"#0000CD\"], [\"mediumorchid\", \"#BA55D3\"], [\"mediumpurple\", \"#9370DB\"], [\"mediumseagreen\", \"#3CB371\"], [\"mediumslateblue\", \"#7B68EE\"], [\"mediumspringgreen\", \"#00FA9A\"], [\"mediumturquoise\", \"#48D1CC\"], [\"mediumvioletred\", \"#C71585\"], [\"midnightblue\", \"#191970\"], [\"mintcream\", \"#F5FFFA\"], [\"mistyrose\", \"#FFE4E1\"], [\"moccasin\", \"#FFE4B5\"], [\"navajowhite\", \"#FFDEAD\"], [\"navy\", \"#000080\"], [\"oldlace\", \"#FDF5E6\"], [\"olive\", \"#808000\"], [\"olivedrab\", \"#6B8E23\"], [\"orange\", \"#FFA500\"], [\"orangered\", \"#FF4500\"], [\"orchid\", \"#DA70D6\"], [\"palegoldenrod\", \"#EEE8AA\"], [\"palegreen\", \"#98FB98\"], [\"paleturquoise\", \"#AFEEEE\"], [\"palevioletred\", \"#DB7093\"], [\"papayawhip\", \"#FFEFD5\"], [\"peachpuff\", \"#FFDAB9\"], [\"peru\", \"#CD853F\"], [\"pink\", \"#FFC0CB\"], [\"plum\", \"#DDA0DD\"], [\"powderblue\", \"#B0E0E6\"], [\"purple\", \"#800080\"], [\"rebeccapurple\", \"#663399\"], [\"red\", \"#FF0000\"], [\"rosybrown\", \"#BC8F8F\"], [\"royalblue\", \"#4169E1\"], [\"saddlebrown\", \"#8B4513\"], [\"salmon\", \"#FA8072\"], [\"sandybrown\", \"#F4A460\"], [\"seagreen\", \"#2E8B57\"], [\"seashell\", \"#FFF5EE\"], [\"sienna\", \"#A0522D\"], [\"silver\", \"#C0C0C0\"], [\"skyblue\", \"#87CEEB\"], [\"slateblue\", \"#6A5ACD\"], [\"slategray\", \"#708090\"], [\"snow\", \"#FFFAFA\"], [\"springgreen\", \"#00FF7F\"], [\"steelblue\", \"#4682B4\"], [\"tan\", \"#D2B48C\"], [\"teal\", \"#008080\"], [\"thistle\", \"#D8BFD8\"], [\"tomato\", \"#FF6347\"], [\"turquoise\", \"#40E0D0\"], [\"violet\", \"#EE82EE\"], [\"wheat\", \"#F5DEB3\"], [\"white\", \"#FFFFFF\"], [\"whitesmoke\", \"#F5F5F5\"], [\"yellow\", \"#FFFF00\"], [\"yellowgreen\", \"#9ACD32\"]]);\n\n/**\n * rgb regex to handle \"rgb([0-255],[0-255],[0-255])\" color strings\n * @type {RegExp}\n */\nvar rgbRegex = /^rgb\\s*\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)\\s*$/i;\n\n/**\n * rgba regex to handle \"rgba([0-255],[0-255],[0-255],[0.0-1.0])\" color strings\n * @type {RegExp}\n */\nvar rgbaRegex = /^rgba\\s*\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*([0,1](?:\\.\\d*)?)\\s*\\)\\s*$/i;\n\n/**\n * hex regex to handle \"#[00-FF][00-FF][00-FF]\" color strings.\n * @type {RegExp}\n */\nvar hexRegex = /^#([0-9,a-f,A-F]{2})([0-9,a-f,A-F]{2})([0-9,a-f,A-F]{2})\\s*$/i;\n\n/**\n * Extracts an opacity from an rgba color packed into a 32-bit integer\n * @param  {number} packedRgbaColor\n * @return {number}                 opacity extracted in range of [0,1]\n */\nfunction getOpacity(packedRgbaColor) {\n  return (packedRgbaColor & 0xFF) / 255.0;\n}\n\n/**\n * packs an opacity value [0,1] into an 8-bit integer to be packed\n * into a 32-bit int\n * @param  {number} opacity [0,1]\n * @return {number}         [0,255]\n */\nfunction packOpacity(opacity) {\n  return _math2.default.floor(_math2.default.clamp01(opacity) * 255);\n}\n\n/**\n * Given a color packed into a 32-bit integer, returns a css-style \"rgba()\" string\n * @param  {number} packedRgbaColor\n * @return {string}                 int the form \"rgba([0,255],[0,255],[0,255],[0,1])\"\n */\nfunction getRGBAString(packedRgbaColor) {\n  return \"rgba(\" + (packedRgbaColor >>> 24) + \", \" + ((packedRgbaColor & 0xFF0000) >> 16) + \", \" + ((packedRgbaColor & 0xFF00) >> 8) + \", \" + getOpacity(packedRgbaColor) + \")\";\n}\n\n/**\n * Given an rgba() color string, extracts a numeric color packed into a 32-bit int\n * @param  {string} color\n * @return {number}\n */\nfunction getPackedColorRGBAFromString(color) {\n  if (typeof color !== \"string\") {\n    throw new Error(color + \" is not a valid color string\");\n  }\n\n  var packedColor = 0;\n\n  var match = null;\n  if (match = color.match(rgbRegex)) {\n    packedColor = 255; // (fully opaque)\n    packedColor |= _math2.default.clamp(Number.parseInt(match[3], 10), 0, 255) << 8;\n    packedColor |= _math2.default.clamp(Number.parseInt(match[2], 10), 0, 255) << 16;\n    packedColor |= _math2.default.clamp(Number.parseInt(match[1], 10), 0, 255) << 24;\n  } else if (match = color.match(rgbaRegex)) {\n    packedColor = packOpacity(Number.parseFloat(match[4], 10));\n    packedColor |= _math2.default.clamp(Number.parseInt(match[3], 10), 0, 255) << 8;\n    packedColor |= _math2.default.clamp(Number.parseInt(match[2], 10), 0, 255) << 16;\n    packedColor |= _math2.default.clamp(Number.parseInt(match[1], 10), 0, 255) << 24;\n  } else if (match = color.match(hexRegex)) {\n    packedColor = 255; // (fully opaque)\n    packedColor |= _math2.default.clamp(Number.parseInt(match[3], 16), 0, 255) << 8;\n    packedColor |= _math2.default.clamp(Number.parseInt(match[2], 16), 0, 255) << 16;\n    packedColor |= _math2.default.clamp(Number.parseInt(match[1], 16), 0, 255) << 24;\n  } else if (colorKeywords.has(color)) {\n    match = colorKeywords.get(color).match(hexRegex);\n    packedColor = 255; // (fully opaque)\n    packedColor |= _math2.default.clamp(Number.parseInt(match[3], 16), 0, 255) << 8;\n    packedColor |= _math2.default.clamp(Number.parseInt(match[2], 16), 0, 255) << 16;\n    packedColor |= _math2.default.clamp(Number.parseInt(match[1], 16), 0, 255) << 24;\n  } else {\n    throw new Error(color + \" is not a valid color string\");\n  }\n\n  return packedColor;\n}\n\n/** @class manages colors in the RGBA color space. Can also be used as a mixin */\n\nvar ColorRGBA = function () {\n  /**\n   * Creates a new color in the RGBA color space\n   * @param  {string}    initColorStr color string in the form \"rgb()\", \"rgba()\", \"#......\", or a color keyword (i.e. \"red\")\n   * @param  {...object} args         Additional arguments that may be passed to other initializers/constructors\n   *                                  if this class is used as a base class or mixin\n   * @return {ColorRGBA}\n   */\n  function ColorRGBA(initColorStr) {\n    _classCallCheck(this, ColorRGBA);\n\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    this.initializer.apply(this, [initColorStr].concat(args));\n  }\n\n  /**\n   * initializes a color in the RGBA color space using a color string\n   * @param  {string} initColorStr initializer string in the form \"rgb()\", \"rgba()\", \"#......\", or color keyword\n   */\n\n\n  _createClass(ColorRGBA, [{\n    key: \"initializer\",\n    value: function initializer(initColorStr) {\n      this._color = 0;\n      if (initColorStr) {\n        this.value = initColorStr;\n      }\n    }\n\n    /**\n     * sets all the channels of the RGBA color given a color string\n     * @param  {string} color color string in the form \"rgb()\", \"rgba()\", \"#......\", or color keyword\n     * @return {ColorRGBA}\n     */\n\n  }, {\n    key: \"isTransparent\",\n\n\n    /**\n     * Returns true if the current opacity of the rgba color < 1\n     * @return {Boolean}\n     */\n    value: function isTransparent() {\n      return getOpacity(this._color) < 1.0;\n    }\n  }, {\n    key: \"value\",\n    set: function set(color) {\n      this._color = getPackedColorRGBAFromString(color);\n      return this;\n    }\n\n    /**\n     * Gets the rgba color as a color string \"rgba()\"\n     * @return {string} rgba color as a string\n     */\n    ,\n    get: function get() {\n      return getRGBAString(this._color);\n    }\n\n    /**\n     * Sets the value of the RGBA color packed as a 32-bit int\n     * @param  {number} packedColor\n     * @return {ColorRGBA}\n     */\n\n  }, {\n    key: \"packedValue\",\n    set: function set(packedColor) {\n      this._color = 0;\n      this._color |= packedColor;\n      return this;\n    }\n\n    /**\n     * Gets the current value of the RGBA color as a packed 32-bit int\n     * @return {number}\n     */\n    ,\n    get: function get() {\n      return this._color;\n    }\n\n    /**\n     * sets the opacity of the RGBA color (modifies alpha channel only)\n     * @param  {number} opacity [0,1]\n     * @return {ColorRGBA}\n     */\n\n  }, {\n    key: \"opacity\",\n    set: function set(opacity) {\n      if (typeof opacity !== \"number\") {\n        throw new Error(\"Opacity must be a number between 0-1\");\n      }\n\n      var currOpacity = this._color & 0xFF;\n      var newOpacity = packOpacity(opacity);\n      if (newOpacity !== currOpacity) {\n        this._color &= 0xFFFFFF00;\n        this._color |= newOpacity;\n      }\n      return this;\n    }\n\n    /**\n     * Gets the current opacity (alpha channel) of the RGBA color\n     * @return {number} [0,1]\n     */\n    ,\n    get: function get() {\n      return getOpacity(this._color);\n    }\n  }]);\n\n  return ColorRGBA;\n}();\n\n/**\n * Creates a new color RGBA class that fires events whenever the color\n * is changed externally\n * @param  {string} eventName Event type to fire when color is modified\n * @param  {string} colorName Name of the color attribute. This string is used in the event object fired\n * @return {function}         New class constructor function\n */\n\n\nexports.default = ColorRGBA;\nfunction createEventedColorRGBAClass(eventName, colorName) {\n\n  /**\n   * @class New rgba color class that fires events when modified\n   * @extends {ColorRGBA}\n   */\n  return function (_ColorRGBA) {\n    _inherits(EventedColorRGBA, _ColorRGBA);\n\n    function EventedColorRGBA() {\n      _classCallCheck(this, EventedColorRGBA);\n\n      return _possibleConstructorReturn(this, (EventedColorRGBA.__proto__ || Object.getPrototypeOf(EventedColorRGBA)).apply(this, arguments));\n    }\n\n    _createClass(EventedColorRGBA, [{\n      key: \"initializer\",\n\n      /**\n       * Color modification event\n       * @event EventedColor#changed\n       * @type {object}\n       * @property {string} attr Name of the attribute modified\n       * @property {} prevVal Previous value of the attribute prior to modification\n       * @property {} currVal Value of the attribute post modification\n       */\n\n      /**\n       * Initializes the evented color\n       * @param  {string} initColorStr initial color as string\n       * @param  {EventHandler} eventHandler Event handler instance used to manage the color\n       *                                     modification events\n       * @protected\n       */\n      value: function initializer(initColorStr, eventHandler) {\n        this._eventHandler = eventHandler;\n        _get(EventedColorRGBA.prototype.__proto__ || Object.getPrototypeOf(EventedColorRGBA.prototype), \"initializer\", this).call(this, initColorStr);\n      }\n\n      /**\n       * Validates modification of the rgba color, and if modified, fires\n       * modification events\n       * @param  {number} newPackedColor Color defined by a 32-bit int\n       * @private\n       */\n\n    }, {\n      key: \"_checkPackedColorChanged\",\n      value: function _checkPackedColorChanged(newPackedColor) {\n        if (newPackedColor !== this._color) {\n          var prev = this._color;\n          var prevOpacity = getOpacity(prev);\n          var opacity = getOpacity(newPackedColor);\n          this._color = newPackedColor;\n\n          this._eventHandler.fire(eventName, {\n            attr: colorName,\n            prevVal: getRGBAString(prev),\n            currVal: getRGBAString(this._color)\n          });\n\n          if (opacity !== prevOpacity) {\n            this._eventHandler.fire(eventName, {\n              attr: \"opacity\",\n              prevVal: prevOpacity,\n              currVal: opacity\n            });\n          }\n        }\n      }\n\n      /**\n       * sets all the channels of the RGBA color from a color string\n       * @param  {string} color color string in the form \"rgb()\", \"rgba()\", \"#......\", or color keyword\n       * @fires  EventedColor#changed\n       * @return {ColorRGBA}\n       */\n\n    }, {\n      key: \"value\",\n      set: function set(color) {\n        var tmpcolor = getPackedColorRGBAFromString(color);\n        this._checkPackedColorChanged(tmpcolor);\n        return this;\n      }\n\n      /**\n       * Gets the rgba color as a color string \"rgba()\"\n       * @return {string} rgba color as a string\n       */\n      ,\n      get: function get() {\n        return getRGBAString(this._color);\n      }\n\n      /**\n       * Sets the value of the RGBA color packed as a 32-bit int\n       * @param  {number} packedColor\n       * @fires  EventedColor#changed\n       * @return {ColorRGBA}\n       */\n\n    }, {\n      key: \"packedValue\",\n      set: function set(packedColor) {\n        var tmpcolor = 0;\n        tmpcolor |= packedColor;\n        this._checkPackedColorChanged(tmpcolor);\n        return this;\n      }\n\n      /**\n       * Gets the current value of the RGBA color as a packed 32-bit int\n       * @return {number}\n       */\n      ,\n      get: function get() {\n        return this._color;\n      }\n\n      /**\n       * sets the opacity of the RGBA color (modifies alpha channel only)\n       * @param  {number} opacity [0,1]\n       * @fires  EventedColor#changed\n       * @return {ColorRGBA}\n       */\n\n    }, {\n      key: \"opacity\",\n      set: function set(opacity) {\n        if (typeof opacity !== \"number\") {\n          throw new Error(\"Opacity must be a number between 0-1\");\n        }\n\n        var currOpacity = this._color & 0xFF;\n        var newOpacity = packOpacity(opacity);\n        if (newOpacity !== currOpacity) {\n          this._color &= 0xFFFFFF00;\n          this._color |= newOpacity;\n\n          this._eventHandler.fire(eventName, {\n            attr: \"opacity\",\n            prevVal: currOpacity / 255.0,\n            currVal: newOpacity / 255.0\n          });\n        }\n        return this;\n      }\n\n      /**\n       * Gets the current opacity (alpha channel) of the RGBA color\n       * @return {number} [0,1]\n       */\n      ,\n      get: function get() {\n        return getOpacity(this._color);\n      }\n    }]);\n\n    return EventedColorRGBA;\n  }(ColorRGBA);\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdHlsZS9jb2xvci1yZ2JhLmpzPzdlYmEiXSwibmFtZXMiOlsiY3JlYXRlRXZlbnRlZENvbG9yUkdCQUNsYXNzIiwiY29sb3JLZXl3b3JkcyIsIk1hcCIsInJnYlJlZ2V4IiwicmdiYVJlZ2V4IiwiaGV4UmVnZXgiLCJnZXRPcGFjaXR5IiwicGFja2VkUmdiYUNvbG9yIiwicGFja09wYWNpdHkiLCJvcGFjaXR5IiwiTWF0aCIsImZsb29yIiwiY2xhbXAwMSIsImdldFJHQkFTdHJpbmciLCJnZXRQYWNrZWRDb2xvclJHQkFGcm9tU3RyaW5nIiwiY29sb3IiLCJFcnJvciIsInBhY2tlZENvbG9yIiwibWF0Y2giLCJjbGFtcCIsIk51bWJlciIsInBhcnNlSW50IiwicGFyc2VGbG9hdCIsImhhcyIsImdldCIsIkNvbG9yUkdCQSIsImluaXRDb2xvclN0ciIsImFyZ3MiLCJpbml0aWFsaXplciIsIl9jb2xvciIsInZhbHVlIiwiY3Vyck9wYWNpdHkiLCJuZXdPcGFjaXR5IiwiZXZlbnROYW1lIiwiY29sb3JOYW1lIiwiZXZlbnRIYW5kbGVyIiwiX2V2ZW50SGFuZGxlciIsIm5ld1BhY2tlZENvbG9yIiwicHJldiIsInByZXZPcGFjaXR5IiwiZmlyZSIsImF0dHIiLCJwcmV2VmFsIiwiY3VyclZhbCIsInRtcGNvbG9yIiwiX2NoZWNrUGFja2VkQ29sb3JDaGFuZ2VkIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOzs7Ozs7Ozs7O1FBc1ZnQkEsMkIsR0FBQUEsMkI7O0FBcFZoQjs7Ozs7Ozs7Ozs7O0FBRUE7Ozs7O0FBS0EsSUFBTUMsZ0JBQWdCLElBQUlDLEdBQUosQ0FBUSxDQUFDLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FBRCxFQUNDLENBQUMsY0FBRCxFQUFpQixTQUFqQixDQURELEVBRUMsQ0FBQyxNQUFELEVBQVMsU0FBVCxDQUZELEVBR0MsQ0FBQyxZQUFELEVBQWUsU0FBZixDQUhELEVBSUMsQ0FBQyxPQUFELEVBQVUsU0FBVixDQUpELEVBS0MsQ0FBQyxPQUFELEVBQVUsU0FBVixDQUxELEVBTUMsQ0FBQyxRQUFELEVBQVcsU0FBWCxDQU5ELEVBT0MsQ0FBQyxPQUFELEVBQVUsU0FBVixDQVBELEVBUUMsQ0FBQyxnQkFBRCxFQUFtQixTQUFuQixDQVJELEVBU0MsQ0FBQyxNQUFELEVBQVMsU0FBVCxDQVRELEVBVUMsQ0FBQyxZQUFELEVBQWUsU0FBZixDQVZELEVBV0MsQ0FBQyxPQUFELEVBQVUsU0FBVixDQVhELEVBWUMsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQVpELEVBYUMsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQWJELEVBY0MsQ0FBQyxZQUFELEVBQWUsU0FBZixDQWRELEVBZUMsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQWZELEVBZ0JDLENBQUMsT0FBRCxFQUFVLFNBQVYsQ0FoQkQsRUFpQkMsQ0FBQyxnQkFBRCxFQUFtQixTQUFuQixDQWpCRCxFQWtCQyxDQUFDLFVBQUQsRUFBYSxTQUFiLENBbEJELEVBbUJDLENBQUMsU0FBRCxFQUFZLFNBQVosQ0FuQkQsRUFvQkMsQ0FBQyxNQUFELEVBQVMsU0FBVCxDQXBCRCxFQXFCQyxDQUFDLFVBQUQsRUFBYSxTQUFiLENBckJELEVBc0JDLENBQUMsVUFBRCxFQUFhLFNBQWIsQ0F0QkQsRUF1QkMsQ0FBQyxlQUFELEVBQWtCLFNBQWxCLENBdkJELEVBd0JDLENBQUMsVUFBRCxFQUFhLFNBQWIsQ0F4QkQsRUF5QkMsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQXpCRCxFQTBCQyxDQUFDLFdBQUQsRUFBYyxTQUFkLENBMUJELEVBMkJDLENBQUMsYUFBRCxFQUFnQixTQUFoQixDQTNCRCxFQTRCQyxDQUFDLGdCQUFELEVBQW1CLFNBQW5CLENBNUJELEVBNkJDLENBQUMsWUFBRCxFQUFlLFNBQWYsQ0E3QkQsRUE4QkMsQ0FBQyxZQUFELEVBQWUsU0FBZixDQTlCRCxFQStCQyxDQUFDLFNBQUQsRUFBWSxTQUFaLENBL0JELEVBZ0NDLENBQUMsWUFBRCxFQUFlLFNBQWYsQ0FoQ0QsRUFpQ0MsQ0FBQyxjQUFELEVBQWlCLFNBQWpCLENBakNELEVBa0NDLENBQUMsZUFBRCxFQUFrQixTQUFsQixDQWxDRCxFQW1DQyxDQUFDLGVBQUQsRUFBa0IsU0FBbEIsQ0FuQ0QsRUFvQ0MsQ0FBQyxlQUFELEVBQWtCLFNBQWxCLENBcENELEVBcUNDLENBQUMsWUFBRCxFQUFlLFNBQWYsQ0FyQ0QsRUFzQ0MsQ0FBQyxVQUFELEVBQWEsU0FBYixDQXRDRCxFQXVDQyxDQUFDLGFBQUQsRUFBZ0IsU0FBaEIsQ0F2Q0QsRUF3Q0MsQ0FBQyxTQUFELEVBQVksU0FBWixDQXhDRCxFQXlDQyxDQUFDLFlBQUQsRUFBZSxTQUFmLENBekNELEVBMENDLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0ExQ0QsRUEyQ0MsQ0FBQyxhQUFELEVBQWdCLFNBQWhCLENBM0NELEVBNENDLENBQUMsYUFBRCxFQUFnQixTQUFoQixDQTVDRCxFQTZDQyxDQUFDLFNBQUQsRUFBWSxTQUFaLENBN0NELEVBOENDLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0E5Q0QsRUErQ0MsQ0FBQyxZQUFELEVBQWUsU0FBZixDQS9DRCxFQWdEQyxDQUFDLE1BQUQsRUFBUyxTQUFULENBaERELEVBaURDLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FqREQsRUFrREMsQ0FBQyxNQUFELEVBQVMsU0FBVCxDQWxERCxFQW1EQyxDQUFDLE9BQUQsRUFBVSxTQUFWLENBbkRELEVBb0RDLENBQUMsYUFBRCxFQUFnQixTQUFoQixDQXBERCxFQXFEQyxDQUFDLFVBQUQsRUFBYSxTQUFiLENBckRELEVBc0RDLENBQUMsU0FBRCxFQUFZLFNBQVosQ0F0REQsRUF1REMsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQXZERCxFQXdEQyxDQUFDLFFBQUQsRUFBVyxTQUFYLENBeERELEVBeURDLENBQUMsT0FBRCxFQUFVLFNBQVYsQ0F6REQsRUEwREMsQ0FBQyxPQUFELEVBQVUsU0FBVixDQTFERCxFQTJEQyxDQUFDLFVBQUQsRUFBYSxTQUFiLENBM0RELEVBNERDLENBQUMsZUFBRCxFQUFrQixTQUFsQixDQTVERCxFQTZEQyxDQUFDLFdBQUQsRUFBYyxTQUFkLENBN0RELEVBOERDLENBQUMsY0FBRCxFQUFpQixTQUFqQixDQTlERCxFQStEQyxDQUFDLFdBQUQsRUFBYyxTQUFkLENBL0RELEVBZ0VDLENBQUMsWUFBRCxFQUFlLFNBQWYsQ0FoRUQsRUFpRUMsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQWpFRCxFQWtFQyxDQUFDLHNCQUFELEVBQXlCLFNBQXpCLENBbEVELEVBbUVDLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FuRUQsRUFvRUMsQ0FBQyxZQUFELEVBQWUsU0FBZixDQXBFRCxFQXFFQyxDQUFDLFdBQUQsRUFBYyxTQUFkLENBckVELEVBc0VDLENBQUMsYUFBRCxFQUFnQixTQUFoQixDQXRFRCxFQXVFQyxDQUFDLGVBQUQsRUFBa0IsU0FBbEIsQ0F2RUQsRUF3RUMsQ0FBQyxjQUFELEVBQWlCLFNBQWpCLENBeEVELEVBeUVDLENBQUMsZ0JBQUQsRUFBbUIsU0FBbkIsQ0F6RUQsRUEwRUMsQ0FBQyxnQkFBRCxFQUFtQixTQUFuQixDQTFFRCxFQTJFQyxDQUFDLGFBQUQsRUFBZ0IsU0FBaEIsQ0EzRUQsRUE0RUMsQ0FBQyxNQUFELEVBQVMsU0FBVCxDQTVFRCxFQTZFQyxDQUFDLFdBQUQsRUFBYyxTQUFkLENBN0VELEVBOEVDLENBQUMsT0FBRCxFQUFVLFNBQVYsQ0E5RUQsRUErRUMsQ0FBQyxTQUFELEVBQVksU0FBWixDQS9FRCxFQWdGQyxDQUFDLFFBQUQsRUFBVyxTQUFYLENBaEZELEVBaUZDLENBQUMsa0JBQUQsRUFBcUIsU0FBckIsQ0FqRkQsRUFrRkMsQ0FBQyxZQUFELEVBQWUsU0FBZixDQWxGRCxFQW1GQyxDQUFDLGNBQUQsRUFBaUIsU0FBakIsQ0FuRkQsRUFvRkMsQ0FBQyxjQUFELEVBQWlCLFNBQWpCLENBcEZELEVBcUZDLENBQUMsZ0JBQUQsRUFBbUIsU0FBbkIsQ0FyRkQsRUFzRkMsQ0FBQyxpQkFBRCxFQUFvQixTQUFwQixDQXRGRCxFQXVGQyxDQUFDLG1CQUFELEVBQXNCLFNBQXRCLENBdkZELEVBd0ZDLENBQUMsaUJBQUQsRUFBb0IsU0FBcEIsQ0F4RkQsRUF5RkMsQ0FBQyxpQkFBRCxFQUFvQixTQUFwQixDQXpGRCxFQTBGQyxDQUFDLGNBQUQsRUFBaUIsU0FBakIsQ0ExRkQsRUEyRkMsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQTNGRCxFQTRGQyxDQUFDLFdBQUQsRUFBYyxTQUFkLENBNUZELEVBNkZDLENBQUMsVUFBRCxFQUFhLFNBQWIsQ0E3RkQsRUE4RkMsQ0FBQyxhQUFELEVBQWdCLFNBQWhCLENBOUZELEVBK0ZDLENBQUMsTUFBRCxFQUFTLFNBQVQsQ0EvRkQsRUFnR0MsQ0FBQyxTQUFELEVBQVksU0FBWixDQWhHRCxFQWlHQyxDQUFDLE9BQUQsRUFBVSxTQUFWLENBakdELEVBa0dDLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FsR0QsRUFtR0MsQ0FBQyxRQUFELEVBQVcsU0FBWCxDQW5HRCxFQW9HQyxDQUFDLFdBQUQsRUFBYyxTQUFkLENBcEdELEVBcUdDLENBQUMsUUFBRCxFQUFXLFNBQVgsQ0FyR0QsRUFzR0MsQ0FBQyxlQUFELEVBQWtCLFNBQWxCLENBdEdELEVBdUdDLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0F2R0QsRUF3R0MsQ0FBQyxlQUFELEVBQWtCLFNBQWxCLENBeEdELEVBeUdDLENBQUMsZUFBRCxFQUFrQixTQUFsQixDQXpHRCxFQTBHQyxDQUFDLFlBQUQsRUFBZSxTQUFmLENBMUdELEVBMkdDLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0EzR0QsRUE0R0MsQ0FBQyxNQUFELEVBQVMsU0FBVCxDQTVHRCxFQTZHQyxDQUFDLE1BQUQsRUFBUyxTQUFULENBN0dELEVBOEdDLENBQUMsTUFBRCxFQUFTLFNBQVQsQ0E5R0QsRUErR0MsQ0FBQyxZQUFELEVBQWUsU0FBZixDQS9HRCxFQWdIQyxDQUFDLFFBQUQsRUFBVyxTQUFYLENBaEhELEVBaUhDLENBQUMsZUFBRCxFQUFrQixTQUFsQixDQWpIRCxFQWtIQyxDQUFDLEtBQUQsRUFBUSxTQUFSLENBbEhELEVBbUhDLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0FuSEQsRUFvSEMsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQXBIRCxFQXFIQyxDQUFDLGFBQUQsRUFBZ0IsU0FBaEIsQ0FySEQsRUFzSEMsQ0FBQyxRQUFELEVBQVcsU0FBWCxDQXRIRCxFQXVIQyxDQUFDLFlBQUQsRUFBZSxTQUFmLENBdkhELEVBd0hDLENBQUMsVUFBRCxFQUFhLFNBQWIsQ0F4SEQsRUF5SEMsQ0FBQyxVQUFELEVBQWEsU0FBYixDQXpIRCxFQTBIQyxDQUFDLFFBQUQsRUFBVyxTQUFYLENBMUhELEVBMkhDLENBQUMsUUFBRCxFQUFXLFNBQVgsQ0EzSEQsRUE0SEMsQ0FBQyxTQUFELEVBQVksU0FBWixDQTVIRCxFQTZIQyxDQUFDLFdBQUQsRUFBYyxTQUFkLENBN0hELEVBOEhDLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0E5SEQsRUErSEMsQ0FBQyxNQUFELEVBQVMsU0FBVCxDQS9IRCxFQWdJQyxDQUFDLGFBQUQsRUFBZ0IsU0FBaEIsQ0FoSUQsRUFpSUMsQ0FBQyxXQUFELEVBQWMsU0FBZCxDQWpJRCxFQWtJQyxDQUFDLEtBQUQsRUFBUSxTQUFSLENBbElELEVBbUlDLENBQUMsTUFBRCxFQUFTLFNBQVQsQ0FuSUQsRUFvSUMsQ0FBQyxTQUFELEVBQVksU0FBWixDQXBJRCxFQXFJQyxDQUFDLFFBQUQsRUFBVyxTQUFYLENBcklELEVBc0lDLENBQUMsV0FBRCxFQUFjLFNBQWQsQ0F0SUQsRUF1SUMsQ0FBQyxRQUFELEVBQVcsU0FBWCxDQXZJRCxFQXdJQyxDQUFDLE9BQUQsRUFBVSxTQUFWLENBeElELEVBeUlDLENBQUMsT0FBRCxFQUFVLFNBQVYsQ0F6SUQsRUEwSUMsQ0FBQyxZQUFELEVBQWUsU0FBZixDQTFJRCxFQTJJQyxDQUFDLFFBQUQsRUFBVyxTQUFYLENBM0lELEVBNElDLENBQUMsYUFBRCxFQUFnQixTQUFoQixDQTVJRCxDQUFSLENBQXRCOztBQThJQTs7OztBQUlBLElBQU1DLFdBQVcsaUVBQWpCOztBQUVBOzs7O0FBSUEsSUFBTUMsWUFBWSwwRkFBbEI7O0FBRUE7Ozs7QUFJQSxJQUFNQyxXQUFXLCtEQUFqQjs7QUFFQTs7Ozs7QUFLQSxTQUFTQyxVQUFULENBQW9CQyxlQUFwQixFQUFxQztBQUNuQyxTQUFPLENBQUNBLGtCQUFrQixJQUFuQixJQUEyQixLQUFsQztBQUNEOztBQUVEOzs7Ozs7QUFNQSxTQUFTQyxXQUFULENBQXFCQyxPQUFyQixFQUE4QjtBQUM1QixTQUFPQyxlQUFLQyxLQUFMLENBQVdELGVBQUtFLE9BQUwsQ0FBYUgsT0FBYixJQUF3QixHQUFuQyxDQUFQO0FBQ0Q7O0FBRUQ7Ozs7O0FBS0EsU0FBU0ksYUFBVCxDQUF1Qk4sZUFBdkIsRUFBd0M7QUFDdEMsb0JBQWdCQSxlQUFELEtBQXNCLEVBQXJDLFlBQTRDLENBQUNBLGtCQUFrQixRQUFuQixLQUFnQyxFQUE1RSxZQUFtRixDQUFDQSxrQkFBa0IsTUFBbkIsS0FBOEIsQ0FBakgsV0FBdUhELFdBQVdDLGVBQVgsQ0FBdkg7QUFDRDs7QUFFRDs7Ozs7QUFLQSxTQUFTTyw0QkFBVCxDQUFzQ0MsS0FBdEMsRUFBNkM7QUFDM0MsTUFBSSxPQUFPQSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzdCLFVBQU0sSUFBSUMsS0FBSixDQUFhRCxLQUFiLGtDQUFOO0FBQ0Q7O0FBRUQsTUFBSUUsY0FBYyxDQUFsQjs7QUFFQSxNQUFJQyxRQUFRLElBQVo7QUFDQSxNQUFLQSxRQUFRSCxNQUFNRyxLQUFOLENBQVlmLFFBQVosQ0FBYixFQUFxQztBQUNuQ2Msa0JBQWMsR0FBZCxDQURtQyxDQUNqQjtBQUNsQkEsbUJBQWVQLGVBQUtTLEtBQUwsQ0FBV0MsT0FBT0MsUUFBUCxDQUFnQkgsTUFBTSxDQUFOLENBQWhCLEVBQTBCLEVBQTFCLENBQVgsRUFBMEMsQ0FBMUMsRUFBNkMsR0FBN0MsS0FBcUQsQ0FBcEU7QUFDQUQsbUJBQWVQLGVBQUtTLEtBQUwsQ0FBV0MsT0FBT0MsUUFBUCxDQUFnQkgsTUFBTSxDQUFOLENBQWhCLEVBQTBCLEVBQTFCLENBQVgsRUFBMEMsQ0FBMUMsRUFBNkMsR0FBN0MsS0FBcUQsRUFBcEU7QUFDQUQsbUJBQWVQLGVBQUtTLEtBQUwsQ0FBV0MsT0FBT0MsUUFBUCxDQUFnQkgsTUFBTSxDQUFOLENBQWhCLEVBQTBCLEVBQTFCLENBQVgsRUFBMEMsQ0FBMUMsRUFBNkMsR0FBN0MsS0FBcUQsRUFBcEU7QUFDRCxHQUxELE1BS08sSUFBS0EsUUFBUUgsTUFBTUcsS0FBTixDQUFZZCxTQUFaLENBQWIsRUFBc0M7QUFDM0NhLGtCQUFjVCxZQUFZWSxPQUFPRSxVQUFQLENBQWtCSixNQUFNLENBQU4sQ0FBbEIsRUFBNEIsRUFBNUIsQ0FBWixDQUFkO0FBQ0FELG1CQUFlUCxlQUFLUyxLQUFMLENBQVdDLE9BQU9DLFFBQVAsQ0FBZ0JILE1BQU0sQ0FBTixDQUFoQixFQUEwQixFQUExQixDQUFYLEVBQTBDLENBQTFDLEVBQTZDLEdBQTdDLEtBQXFELENBQXBFO0FBQ0FELG1CQUFlUCxlQUFLUyxLQUFMLENBQVdDLE9BQU9DLFFBQVAsQ0FBZ0JILE1BQU0sQ0FBTixDQUFoQixFQUEwQixFQUExQixDQUFYLEVBQTBDLENBQTFDLEVBQTZDLEdBQTdDLEtBQXFELEVBQXBFO0FBQ0FELG1CQUFlUCxlQUFLUyxLQUFMLENBQVdDLE9BQU9DLFFBQVAsQ0FBZ0JILE1BQU0sQ0FBTixDQUFoQixFQUEwQixFQUExQixDQUFYLEVBQTBDLENBQTFDLEVBQTZDLEdBQTdDLEtBQXFELEVBQXBFO0FBQ0QsR0FMTSxNQUtBLElBQUtBLFFBQVFILE1BQU1HLEtBQU4sQ0FBWWIsUUFBWixDQUFiLEVBQXFDO0FBQzFDWSxrQkFBYyxHQUFkLENBRDBDLENBQ3hCO0FBQ2xCQSxtQkFBZVAsZUFBS1MsS0FBTCxDQUFXQyxPQUFPQyxRQUFQLENBQWdCSCxNQUFNLENBQU4sQ0FBaEIsRUFBMEIsRUFBMUIsQ0FBWCxFQUEwQyxDQUExQyxFQUE2QyxHQUE3QyxLQUFxRCxDQUFwRTtBQUNBRCxtQkFBZVAsZUFBS1MsS0FBTCxDQUFXQyxPQUFPQyxRQUFQLENBQWdCSCxNQUFNLENBQU4sQ0FBaEIsRUFBMEIsRUFBMUIsQ0FBWCxFQUEwQyxDQUExQyxFQUE2QyxHQUE3QyxLQUFxRCxFQUFwRTtBQUNBRCxtQkFBZVAsZUFBS1MsS0FBTCxDQUFXQyxPQUFPQyxRQUFQLENBQWdCSCxNQUFNLENBQU4sQ0FBaEIsRUFBMEIsRUFBMUIsQ0FBWCxFQUEwQyxDQUExQyxFQUE2QyxHQUE3QyxLQUFxRCxFQUFwRTtBQUNELEdBTE0sTUFLQSxJQUFJakIsY0FBY3NCLEdBQWQsQ0FBa0JSLEtBQWxCLENBQUosRUFBOEI7QUFDbkNHLFlBQVFqQixjQUFjdUIsR0FBZCxDQUFrQlQsS0FBbEIsRUFBeUJHLEtBQXpCLENBQStCYixRQUEvQixDQUFSO0FBQ0FZLGtCQUFjLEdBQWQsQ0FGbUMsQ0FFakI7QUFDbEJBLG1CQUFlUCxlQUFLUyxLQUFMLENBQVdDLE9BQU9DLFFBQVAsQ0FBZ0JILE1BQU0sQ0FBTixDQUFoQixFQUEwQixFQUExQixDQUFYLEVBQTBDLENBQTFDLEVBQTZDLEdBQTdDLEtBQXFELENBQXBFO0FBQ0FELG1CQUFlUCxlQUFLUyxLQUFMLENBQVdDLE9BQU9DLFFBQVAsQ0FBZ0JILE1BQU0sQ0FBTixDQUFoQixFQUEwQixFQUExQixDQUFYLEVBQTBDLENBQTFDLEVBQTZDLEdBQTdDLEtBQXFELEVBQXBFO0FBQ0FELG1CQUFlUCxlQUFLUyxLQUFMLENBQVdDLE9BQU9DLFFBQVAsQ0FBZ0JILE1BQU0sQ0FBTixDQUFoQixFQUEwQixFQUExQixDQUFYLEVBQTBDLENBQTFDLEVBQTZDLEdBQTdDLEtBQXFELEVBQXBFO0FBQ0QsR0FOTSxNQU1BO0FBQ0wsVUFBTSxJQUFJRixLQUFKLENBQWFELEtBQWIsa0NBQU47QUFDRDs7QUFFRCxTQUFPRSxXQUFQO0FBQ0Q7O0FBRUQ7O0lBQ3FCUSxTO0FBQ25COzs7Ozs7O0FBT0EscUJBQVlDLFlBQVosRUFBbUM7QUFBQTs7QUFBQSxzQ0FBTkMsSUFBTTtBQUFOQSxVQUFNO0FBQUE7O0FBQ2pDLFNBQUtDLFdBQUwsY0FBaUJGLFlBQWpCLFNBQWtDQyxJQUFsQztBQUNEOztBQUVEOzs7Ozs7OztnQ0FJWUQsWSxFQUFjO0FBQ3hCLFdBQUtHLE1BQUwsR0FBYyxDQUFkO0FBQ0EsVUFBSUgsWUFBSixFQUFrQjtBQUNoQixhQUFLSSxLQUFMLEdBQWFKLFlBQWI7QUFDRDtBQUNGOztBQUVEOzs7Ozs7Ozs7O0FBZ0VBOzs7O29DQUlnQjtBQUNkLGFBQU9wQixXQUFXLEtBQUt1QixNQUFoQixJQUEwQixHQUFqQztBQUNEOzs7c0JBakVTZCxLLEVBQU87QUFDZixXQUFLYyxNQUFMLEdBQWNmLDZCQUE2QkMsS0FBN0IsQ0FBZDtBQUNBLGFBQU8sSUFBUDtBQUNEOztBQUVEOzs7Ozt3QkFJWTtBQUNWLGFBQU9GLGNBQWMsS0FBS2dCLE1BQW5CLENBQVA7QUFDRDs7QUFFRDs7Ozs7Ozs7c0JBS2dCWixXLEVBQWE7QUFDM0IsV0FBS1ksTUFBTCxHQUFjLENBQWQ7QUFDQSxXQUFLQSxNQUFMLElBQWVaLFdBQWY7QUFDQSxhQUFPLElBQVA7QUFDRDs7QUFFRDs7Ozs7d0JBSWtCO0FBQ2hCLGFBQU8sS0FBS1ksTUFBWjtBQUNEOztBQUVEOzs7Ozs7OztzQkFLWXBCLE8sRUFBUztBQUNuQixVQUFJLE9BQU9BLE9BQVAsS0FBbUIsUUFBdkIsRUFBaUM7QUFDL0IsY0FBTSxJQUFJTyxLQUFKLENBQVUsc0NBQVYsQ0FBTjtBQUNEOztBQUVELFVBQU1lLGNBQWMsS0FBS0YsTUFBTCxHQUFjLElBQWxDO0FBQ0EsVUFBTUcsYUFBYXhCLFlBQVlDLE9BQVosQ0FBbkI7QUFDQSxVQUFJdUIsZUFBZUQsV0FBbkIsRUFBZ0M7QUFDOUIsYUFBS0YsTUFBTCxJQUFlLFVBQWY7QUFDQSxhQUFLQSxNQUFMLElBQWVHLFVBQWY7QUFDRDtBQUNELGFBQU8sSUFBUDtBQUNEOztBQUVEOzs7Ozt3QkFJYztBQUNaLGFBQU8xQixXQUFXLEtBQUt1QixNQUFoQixDQUFQO0FBQ0Q7Ozs7OztBQVdIOzs7Ozs7Ozs7a0JBaEdxQkosUztBQXVHZCxTQUFTekIsMkJBQVQsQ0FBcUNpQyxTQUFyQyxFQUFnREMsU0FBaEQsRUFBMkQ7O0FBRWhFOzs7O0FBSUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFDRTs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7QUFWRixrQ0FpQmNSLFlBakJkLEVBaUI0QlMsWUFqQjVCLEVBaUIwQztBQUN0QyxhQUFLQyxhQUFMLEdBQXFCRCxZQUFyQjtBQUNBLHdJQUFrQlQsWUFBbEI7QUFDRDs7QUFFRDs7Ozs7OztBQXRCRjtBQUFBO0FBQUEsK0NBNEIyQlcsY0E1QjNCLEVBNEIyQztBQUN2QyxZQUFJQSxtQkFBbUIsS0FBS1IsTUFBNUIsRUFBb0M7QUFDbEMsY0FBTVMsT0FBTyxLQUFLVCxNQUFsQjtBQUNBLGNBQU1VLGNBQWNqQyxXQUFXZ0MsSUFBWCxDQUFwQjtBQUNBLGNBQU03QixVQUFVSCxXQUFXK0IsY0FBWCxDQUFoQjtBQUNBLGVBQUtSLE1BQUwsR0FBY1EsY0FBZDs7QUFFQSxlQUFLRCxhQUFMLENBQW1CSSxJQUFuQixDQUF3QlAsU0FBeEIsRUFBbUM7QUFDakNRLGtCQUFNUCxTQUQyQjtBQUVqQ1EscUJBQVM3QixjQUFjeUIsSUFBZCxDQUZ3QjtBQUdqQ0sscUJBQVM5QixjQUFjLEtBQUtnQixNQUFuQjtBQUh3QixXQUFuQzs7QUFNQSxjQUFJcEIsWUFBWThCLFdBQWhCLEVBQTZCO0FBQzNCLGlCQUFLSCxhQUFMLENBQW1CSSxJQUFuQixDQUF3QlAsU0FBeEIsRUFBbUM7QUFDakNRLG9CQUFNLFNBRDJCO0FBRWpDQyx1QkFBU0gsV0FGd0I7QUFHakNJLHVCQUFTbEM7QUFId0IsYUFBbkM7QUFLRDtBQUNGO0FBQ0Y7O0FBRUQ7Ozs7Ozs7QUFuREY7QUFBQTtBQUFBLHdCQXlEWU0sS0F6RFosRUF5RG1CO0FBQ2YsWUFBTTZCLFdBQVc5Qiw2QkFBNkJDLEtBQTdCLENBQWpCO0FBQ0EsYUFBSzhCLHdCQUFMLENBQThCRCxRQUE5QjtBQUNBLGVBQU8sSUFBUDtBQUNEOztBQUVEOzs7O0FBL0RGO0FBQUEsMEJBbUVjO0FBQ1YsZUFBTy9CLGNBQWMsS0FBS2dCLE1BQW5CLENBQVA7QUFDRDs7QUFFRDs7Ozs7OztBQXZFRjtBQUFBO0FBQUEsd0JBNkVrQlosV0E3RWxCLEVBNkUrQjtBQUMzQixZQUFJMkIsV0FBVyxDQUFmO0FBQ0FBLG9CQUFZM0IsV0FBWjtBQUNBLGFBQUs0Qix3QkFBTCxDQUE4QkQsUUFBOUI7QUFDQSxlQUFPLElBQVA7QUFDRDs7QUFFRDs7OztBQXBGRjtBQUFBLDBCQXdGb0I7QUFDaEIsZUFBTyxLQUFLZixNQUFaO0FBQ0Q7O0FBRUQ7Ozs7Ozs7QUE1RkY7QUFBQTtBQUFBLHdCQWtHY3BCLE9BbEdkLEVBa0d1QjtBQUNuQixZQUFJLE9BQU9BLE9BQVAsS0FBbUIsUUFBdkIsRUFBaUM7QUFDL0IsZ0JBQU0sSUFBSU8sS0FBSixDQUFVLHNDQUFWLENBQU47QUFDRDs7QUFFRCxZQUFNZSxjQUFjLEtBQUtGLE1BQUwsR0FBYyxJQUFsQztBQUNBLFlBQU1HLGFBQWF4QixZQUFZQyxPQUFaLENBQW5CO0FBQ0EsWUFBSXVCLGVBQWVELFdBQW5CLEVBQWdDO0FBQzlCLGVBQUtGLE1BQUwsSUFBZSxVQUFmO0FBQ0EsZUFBS0EsTUFBTCxJQUFlRyxVQUFmOztBQUVBLGVBQUtJLGFBQUwsQ0FBbUJJLElBQW5CLENBQXdCUCxTQUF4QixFQUFtQztBQUNqQ1Esa0JBQU0sU0FEMkI7QUFFakNDLHFCQUFTWCxjQUFjLEtBRlU7QUFHakNZLHFCQUFTWCxhQUFhO0FBSFcsV0FBbkM7QUFLRDtBQUNELGVBQU8sSUFBUDtBQUNEOztBQUVEOzs7O0FBdEhGO0FBQUEsMEJBMEhnQjtBQUNaLGVBQU8xQixXQUFXLEtBQUt1QixNQUFoQixDQUFQO0FBQ0Q7QUE1SEg7O0FBQUE7QUFBQSxJQUFzQ0osU0FBdEM7QUE4SEQiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1tYWdpYy1udW1iZXJzICovXG5cInVzZSBzdHJpY3RcIlxuXG5pbXBvcnQgTWF0aCBmcm9tIFwiLi4vbWF0aC9tYXRoXCJcblxuLyoqXG4gKiBDb2xvciBrZXl3b3JkcyBhcyBkZWZpbmVkIGJ5IHRoZSBDU1MgY29sb3IgbW9kdWxlc1xuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbG9yX3ZhbHVlfVxuICogQHR5cGUge01hcH1cbiAqL1xuY29uc3QgY29sb3JLZXl3b3JkcyA9IG5ldyBNYXAoW1tcImFsaWNlYmx1ZVwiLCBcIiNGMEY4RkZcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiYW50aXF1ZXdoaXRlXCIsIFwiI0ZBRUJEN1wiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJhcXVhXCIsIFwiIzAwRkZGRlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJhcXVhbWFyaW5lXCIsIFwiIzdGRkZENFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJhenVyZVwiLCBcIiNGMEZGRkZcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiYmVpZ2VcIiwgXCIjRjVGNURDXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImJpc3F1ZVwiLCBcIiNGRkU0QzRcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiYmxhY2tcIiwgXCIjMDAwMDAwXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImJsYW5jaGVkYWxtb25kXCIsIFwiI0ZGRUJDRFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJibHVlXCIsIFwiIzAwMDBGRlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJibHVldmlvbGV0XCIsIFwiIzhBMkJFMlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJicm93blwiLCBcIiNBNTJBMkFcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiYnVybHl3b29kXCIsIFwiI0RFQjg4N1wiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJjYWRldGJsdWVcIiwgXCIjNUY5RUEwXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImNoYXJ0cmV1c2VcIiwgXCIjN0ZGRjAwXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImNob2NvbGF0ZVwiLCBcIiNEMjY5MUVcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiY29yYWxcIiwgXCIjRkY3RjUwXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImNvcm5mbG93ZXJibHVlXCIsIFwiIzY0OTVFRFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJjb3Juc2lsa1wiLCBcIiNGRkY4RENcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiY3JpbXNvblwiLCBcIiNEQzE0M0NcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiY3lhblwiLCBcIiMwMEZGRkZcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiZGFya2JsdWVcIiwgXCIjMDAwMDhCXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImRhcmtjeWFuXCIsIFwiIzAwOEI4QlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJkYXJrZ29sZGVucm9kXCIsIFwiI0I4ODYwQlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJkYXJrZ3JheVwiLCBcIiNBOUE5QTlcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiZGFya2dyZWVuXCIsIFwiIzAwNjQwMFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJkYXJra2hha2lcIiwgXCIjQkRCNzZCXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImRhcmttYWdlbnRhXCIsIFwiIzhCMDA4QlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJkYXJrb2xpdmVncmVlblwiLCBcIiM1NTZCMkZcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiZGFya29yYW5nZVwiLCBcIiNGRjhDMDBcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiZGFya29yY2hpZFwiLCBcIiM5OTMyQ0NcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiZGFya3JlZFwiLCBcIiM4QjAwMDBcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiZGFya3NhbG1vblwiLCBcIiNFOTk2N0FcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiZGFya3NlYWdyZWVuXCIsIFwiIzhGQkM4RlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJkYXJrc2xhdGVibHVlXCIsIFwiIzQ4M0Q4QlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJkYXJrc2xhdGVncmF5XCIsIFwiIzJGNEY0RlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJkYXJrdHVycXVvaXNlXCIsIFwiIzAwQ0VEMVwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJkYXJrdmlvbGV0XCIsIFwiIzk0MDBEM1wiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJkZWVwcGlua1wiLCBcIiNGRjE0OTNcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiZGVlcHNreWJsdWVcIiwgXCIjMDBCRkZGXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImRpbWdyYXlcIiwgXCIjNjk2OTY5XCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImRvZGdlcmJsdWVcIiwgXCIjMUU5MEZGXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImZpcmVicmlja1wiLCBcIiNCMjIyMjJcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiZmxvcmFsd2hpdGVcIiwgXCIjRkZGQUYwXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImZvcmVzdGdyZWVuXCIsIFwiIzIyOEIyMlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJmdWNoc2lhXCIsIFwiI0ZGMDBGRlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJnYWluc2Jvcm9cIiwgXCIjRENEQ0RDXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImdob3N0d2hpdGVcIiwgXCIjRjhGOEZGXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImdvbGRcIiwgXCIjRkZENzAwXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImdvbGRlbnJvZFwiLCBcIiNEQUE1MjBcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiZ3JheVwiLCBcIiM4MDgwODBcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiZ3JlZW5cIiwgXCIjMDA4MDAwXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImdyZWVueWVsbG93XCIsIFwiI0FERkYyRlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJob25leWRld1wiLCBcIiNGMEZGRjBcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiaG90cGlua1wiLCBcIiNGRjY5QjRcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiaW5kaWFucmVkXCIsIFwiI0NENUM1Q1wiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJpbmRpZ29cIiwgXCIjNEIwMDgyXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcIml2b3J5XCIsIFwiI0ZGRkZGMFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJraGFraVwiLCBcIiNGMEU2OENcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wibGF2ZW5kZXJcIiwgXCIjRTZFNkZBXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImxhdmVuZGVyYmx1c2hcIiwgXCIjRkZGMEY1XCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImxhd25ncmVlblwiLCBcIiM3Q0ZDMDBcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wibGVtb25jaGlmZm9uXCIsIFwiI0ZGRkFDRFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJsaWdodGJsdWVcIiwgXCIjQUREOEU2XCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImxpZ2h0Y29yYWxcIiwgXCIjRjA4MDgwXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImxpZ2h0Y3lhblwiLCBcIiNFMEZGRkZcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wibGlnaHRnb2xkZW5yb2R5ZWxsb3dcIiwgXCIjRkFGQUQyXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImxpZ2h0Z3JheVwiLCBcIiNEM0QzRDNcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wibGlnaHRncmVlblwiLCBcIiM5MEVFOTBcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wibGlnaHRwaW5rXCIsIFwiI0ZGQjZDMVwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJsaWdodHNhbG1vblwiLCBcIiNGRkEwN0FcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wibGlnaHRzZWFncmVlblwiLCBcIiMyMEIyQUFcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wibGlnaHRza3libHVlXCIsIFwiIzg3Q0VGQVwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJsaWdodHNsYXRlZ3JheVwiLCBcIiM3Nzg4OTlcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wibGlnaHRzdGVlbGJsdWVcIiwgXCIjQjBDNERFXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImxpZ2h0eWVsbG93XCIsIFwiI0ZGRkZFMFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJsaW1lXCIsIFwiIzAwRkYwMFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJsaW1lZ3JlZW5cIiwgXCIjMzJDRDMyXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImxpbmVuXCIsIFwiI0ZBRjBFNlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJtYWdlbnRhXCIsIFwiI0ZGMDBGRlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJtYXJvb25cIiwgXCIjODAwMDAwXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcIm1lZGl1bWFxdWFtYXJpbmVcIiwgXCIjNjZDREFBXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcIm1lZGl1bWJsdWVcIiwgXCIjMDAwMENEXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcIm1lZGl1bW9yY2hpZFwiLCBcIiNCQTU1RDNcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wibWVkaXVtcHVycGxlXCIsIFwiIzkzNzBEQlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJtZWRpdW1zZWFncmVlblwiLCBcIiMzQ0IzNzFcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wibWVkaXVtc2xhdGVibHVlXCIsIFwiIzdCNjhFRVwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJtZWRpdW1zcHJpbmdncmVlblwiLCBcIiMwMEZBOUFcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wibWVkaXVtdHVycXVvaXNlXCIsIFwiIzQ4RDFDQ1wiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJtZWRpdW12aW9sZXRyZWRcIiwgXCIjQzcxNTg1XCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcIm1pZG5pZ2h0Ymx1ZVwiLCBcIiMxOTE5NzBcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wibWludGNyZWFtXCIsIFwiI0Y1RkZGQVwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJtaXN0eXJvc2VcIiwgXCIjRkZFNEUxXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcIm1vY2Nhc2luXCIsIFwiI0ZGRTRCNVwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJuYXZham93aGl0ZVwiLCBcIiNGRkRFQURcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wibmF2eVwiLCBcIiMwMDAwODBcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wib2xkbGFjZVwiLCBcIiNGREY1RTZcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wib2xpdmVcIiwgXCIjODA4MDAwXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcIm9saXZlZHJhYlwiLCBcIiM2QjhFMjNcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wib3JhbmdlXCIsIFwiI0ZGQTUwMFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJvcmFuZ2VyZWRcIiwgXCIjRkY0NTAwXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcIm9yY2hpZFwiLCBcIiNEQTcwRDZcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wicGFsZWdvbGRlbnJvZFwiLCBcIiNFRUU4QUFcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wicGFsZWdyZWVuXCIsIFwiIzk4RkI5OFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJwYWxldHVycXVvaXNlXCIsIFwiI0FGRUVFRVwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJwYWxldmlvbGV0cmVkXCIsIFwiI0RCNzA5M1wiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJwYXBheWF3aGlwXCIsIFwiI0ZGRUZENVwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJwZWFjaHB1ZmZcIiwgXCIjRkZEQUI5XCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcInBlcnVcIiwgXCIjQ0Q4NTNGXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcInBpbmtcIiwgXCIjRkZDMENCXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcInBsdW1cIiwgXCIjRERBMEREXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcInBvd2RlcmJsdWVcIiwgXCIjQjBFMEU2XCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcInB1cnBsZVwiLCBcIiM4MDAwODBcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wicmViZWNjYXB1cnBsZVwiLCBcIiM2NjMzOTlcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wicmVkXCIsIFwiI0ZGMDAwMFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJyb3N5YnJvd25cIiwgXCIjQkM4RjhGXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcInJveWFsYmx1ZVwiLCBcIiM0MTY5RTFcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wic2FkZGxlYnJvd25cIiwgXCIjOEI0NTEzXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcInNhbG1vblwiLCBcIiNGQTgwNzJcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wic2FuZHlicm93blwiLCBcIiNGNEE0NjBcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wic2VhZ3JlZW5cIiwgXCIjMkU4QjU3XCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcInNlYXNoZWxsXCIsIFwiI0ZGRjVFRVwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJzaWVubmFcIiwgXCIjQTA1MjJEXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcInNpbHZlclwiLCBcIiNDMEMwQzBcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wic2t5Ymx1ZVwiLCBcIiM4N0NFRUJcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wic2xhdGVibHVlXCIsIFwiIzZBNUFDRFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJzbGF0ZWdyYXlcIiwgXCIjNzA4MDkwXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcInNub3dcIiwgXCIjRkZGQUZBXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcInNwcmluZ2dyZWVuXCIsIFwiIzAwRkY3RlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJzdGVlbGJsdWVcIiwgXCIjNDY4MkI0XCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcInRhblwiLCBcIiNEMkI0OENcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1widGVhbFwiLCBcIiMwMDgwODBcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1widGhpc3RsZVwiLCBcIiNEOEJGRDhcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1widG9tYXRvXCIsIFwiI0ZGNjM0N1wiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJ0dXJxdW9pc2VcIiwgXCIjNDBFMEQwXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcInZpb2xldFwiLCBcIiNFRTgyRUVcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wid2hlYXRcIiwgXCIjRjVERUIzXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcIndoaXRlXCIsIFwiI0ZGRkZGRlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJ3aGl0ZXNtb2tlXCIsIFwiI0Y1RjVGNVwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJ5ZWxsb3dcIiwgXCIjRkZGRjAwXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcInllbGxvd2dyZWVuXCIsIFwiIzlBQ0QzMlwiXV0pXG5cbi8qKlxuICogcmdiIHJlZ2V4IHRvIGhhbmRsZSBcInJnYihbMC0yNTVdLFswLTI1NV0sWzAtMjU1XSlcIiBjb2xvciBzdHJpbmdzXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG5jb25zdCByZ2JSZWdleCA9IC9ecmdiXFxzKlxcKFxccyooXFxkezEsM30pXFxzKixcXHMqKFxcZHsxLDN9KVxccyosXFxzKihcXGR7MSwzfSlcXHMqXFwpXFxzKiQvaVxuXG4vKipcbiAqIHJnYmEgcmVnZXggdG8gaGFuZGxlIFwicmdiYShbMC0yNTVdLFswLTI1NV0sWzAtMjU1XSxbMC4wLTEuMF0pXCIgY29sb3Igc3RyaW5nc1xuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgcmdiYVJlZ2V4ID0gL15yZ2JhXFxzKlxcKFxccyooXFxkezEsM30pXFxzKixcXHMqKFxcZHsxLDN9KVxccyosXFxzKihcXGR7MSwzfSlcXHMqLFxccyooWzAsMV0oPzpcXC5cXGQqKT8pXFxzKlxcKVxccyokL2lcblxuLyoqXG4gKiBoZXggcmVnZXggdG8gaGFuZGxlIFwiI1swMC1GRl1bMDAtRkZdWzAwLUZGXVwiIGNvbG9yIHN0cmluZ3MuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG5jb25zdCBoZXhSZWdleCA9IC9eIyhbMC05LGEtZixBLUZdezJ9KShbMC05LGEtZixBLUZdezJ9KShbMC05LGEtZixBLUZdezJ9KVxccyokL2lcblxuLyoqXG4gKiBFeHRyYWN0cyBhbiBvcGFjaXR5IGZyb20gYW4gcmdiYSBjb2xvciBwYWNrZWQgaW50byBhIDMyLWJpdCBpbnRlZ2VyXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHBhY2tlZFJnYmFDb2xvclxuICogQHJldHVybiB7bnVtYmVyfSAgICAgICAgICAgICAgICAgb3BhY2l0eSBleHRyYWN0ZWQgaW4gcmFuZ2Ugb2YgWzAsMV1cbiAqL1xuZnVuY3Rpb24gZ2V0T3BhY2l0eShwYWNrZWRSZ2JhQ29sb3IpIHtcbiAgcmV0dXJuIChwYWNrZWRSZ2JhQ29sb3IgJiAweEZGKSAvIDI1NS4wXG59XG5cbi8qKlxuICogcGFja3MgYW4gb3BhY2l0eSB2YWx1ZSBbMCwxXSBpbnRvIGFuIDgtYml0IGludGVnZXIgdG8gYmUgcGFja2VkXG4gKiBpbnRvIGEgMzItYml0IGludFxuICogQHBhcmFtICB7bnVtYmVyfSBvcGFjaXR5IFswLDFdXG4gKiBAcmV0dXJuIHtudW1iZXJ9ICAgICAgICAgWzAsMjU1XVxuICovXG5mdW5jdGlvbiBwYWNrT3BhY2l0eShvcGFjaXR5KSB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGguY2xhbXAwMShvcGFjaXR5KSAqIDI1NSlcbn1cblxuLyoqXG4gKiBHaXZlbiBhIGNvbG9yIHBhY2tlZCBpbnRvIGEgMzItYml0IGludGVnZXIsIHJldHVybnMgYSBjc3Mtc3R5bGUgXCJyZ2JhKClcIiBzdHJpbmdcbiAqIEBwYXJhbSAge251bWJlcn0gcGFja2VkUmdiYUNvbG9yXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICAgICAgICAgICBpbnQgdGhlIGZvcm0gXCJyZ2JhKFswLDI1NV0sWzAsMjU1XSxbMCwyNTVdLFswLDFdKVwiXG4gKi9cbmZ1bmN0aW9uIGdldFJHQkFTdHJpbmcocGFja2VkUmdiYUNvbG9yKSB7XG4gIHJldHVybiBgcmdiYSgkeyhwYWNrZWRSZ2JhQ29sb3IpID4+PiAyNH0sICR7KHBhY2tlZFJnYmFDb2xvciAmIDB4RkYwMDAwKSA+PiAxNn0sICR7KHBhY2tlZFJnYmFDb2xvciAmIDB4RkYwMCkgPj4gOH0sICR7Z2V0T3BhY2l0eShwYWNrZWRSZ2JhQ29sb3IpfSlgXG59XG5cbi8qKlxuICogR2l2ZW4gYW4gcmdiYSgpIGNvbG9yIHN0cmluZywgZXh0cmFjdHMgYSBudW1lcmljIGNvbG9yIHBhY2tlZCBpbnRvIGEgMzItYml0IGludFxuICogQHBhcmFtICB7c3RyaW5nfSBjb2xvclxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBnZXRQYWNrZWRDb2xvclJHQkFGcm9tU3RyaW5nKGNvbG9yKSB7XG4gIGlmICh0eXBlb2YgY29sb3IgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7Y29sb3J9IGlzIG5vdCBhIHZhbGlkIGNvbG9yIHN0cmluZ2ApXG4gIH1cblxuICBsZXQgcGFja2VkQ29sb3IgPSAwXG5cbiAgbGV0IG1hdGNoID0gbnVsbFxuICBpZiAoKG1hdGNoID0gY29sb3IubWF0Y2gocmdiUmVnZXgpKSkge1xuICAgIHBhY2tlZENvbG9yID0gMjU1IC8vIChmdWxseSBvcGFxdWUpXG4gICAgcGFja2VkQ29sb3IgfD0gTWF0aC5jbGFtcChOdW1iZXIucGFyc2VJbnQobWF0Y2hbM10sIDEwKSwgMCwgMjU1KSA8PCA4XG4gICAgcGFja2VkQ29sb3IgfD0gTWF0aC5jbGFtcChOdW1iZXIucGFyc2VJbnQobWF0Y2hbMl0sIDEwKSwgMCwgMjU1KSA8PCAxNlxuICAgIHBhY2tlZENvbG9yIHw9IE1hdGguY2xhbXAoTnVtYmVyLnBhcnNlSW50KG1hdGNoWzFdLCAxMCksIDAsIDI1NSkgPDwgMjRcbiAgfSBlbHNlIGlmICgobWF0Y2ggPSBjb2xvci5tYXRjaChyZ2JhUmVnZXgpKSkge1xuICAgIHBhY2tlZENvbG9yID0gcGFja09wYWNpdHkoTnVtYmVyLnBhcnNlRmxvYXQobWF0Y2hbNF0sIDEwKSlcbiAgICBwYWNrZWRDb2xvciB8PSBNYXRoLmNsYW1wKE51bWJlci5wYXJzZUludChtYXRjaFszXSwgMTApLCAwLCAyNTUpIDw8IDhcbiAgICBwYWNrZWRDb2xvciB8PSBNYXRoLmNsYW1wKE51bWJlci5wYXJzZUludChtYXRjaFsyXSwgMTApLCAwLCAyNTUpIDw8IDE2XG4gICAgcGFja2VkQ29sb3IgfD0gTWF0aC5jbGFtcChOdW1iZXIucGFyc2VJbnQobWF0Y2hbMV0sIDEwKSwgMCwgMjU1KSA8PCAyNFxuICB9IGVsc2UgaWYgKChtYXRjaCA9IGNvbG9yLm1hdGNoKGhleFJlZ2V4KSkpIHtcbiAgICBwYWNrZWRDb2xvciA9IDI1NSAvLyAoZnVsbHkgb3BhcXVlKVxuICAgIHBhY2tlZENvbG9yIHw9IE1hdGguY2xhbXAoTnVtYmVyLnBhcnNlSW50KG1hdGNoWzNdLCAxNiksIDAsIDI1NSkgPDwgOFxuICAgIHBhY2tlZENvbG9yIHw9IE1hdGguY2xhbXAoTnVtYmVyLnBhcnNlSW50KG1hdGNoWzJdLCAxNiksIDAsIDI1NSkgPDwgMTZcbiAgICBwYWNrZWRDb2xvciB8PSBNYXRoLmNsYW1wKE51bWJlci5wYXJzZUludChtYXRjaFsxXSwgMTYpLCAwLCAyNTUpIDw8IDI0XG4gIH0gZWxzZSBpZiAoY29sb3JLZXl3b3Jkcy5oYXMoY29sb3IpKSB7XG4gICAgbWF0Y2ggPSBjb2xvcktleXdvcmRzLmdldChjb2xvcikubWF0Y2goaGV4UmVnZXgpXG4gICAgcGFja2VkQ29sb3IgPSAyNTUgLy8gKGZ1bGx5IG9wYXF1ZSlcbiAgICBwYWNrZWRDb2xvciB8PSBNYXRoLmNsYW1wKE51bWJlci5wYXJzZUludChtYXRjaFszXSwgMTYpLCAwLCAyNTUpIDw8IDhcbiAgICBwYWNrZWRDb2xvciB8PSBNYXRoLmNsYW1wKE51bWJlci5wYXJzZUludChtYXRjaFsyXSwgMTYpLCAwLCAyNTUpIDw8IDE2XG4gICAgcGFja2VkQ29sb3IgfD0gTWF0aC5jbGFtcChOdW1iZXIucGFyc2VJbnQobWF0Y2hbMV0sIDE2KSwgMCwgMjU1KSA8PCAyNFxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgJHtjb2xvcn0gaXMgbm90IGEgdmFsaWQgY29sb3Igc3RyaW5nYClcbiAgfVxuXG4gIHJldHVybiBwYWNrZWRDb2xvclxufVxuXG4vKiogQGNsYXNzIG1hbmFnZXMgY29sb3JzIGluIHRoZSBSR0JBIGNvbG9yIHNwYWNlLiBDYW4gYWxzbyBiZSB1c2VkIGFzIGEgbWl4aW4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbG9yUkdCQSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGNvbG9yIGluIHRoZSBSR0JBIGNvbG9yIHNwYWNlXG4gICAqIEBwYXJhbSAge3N0cmluZ30gICAgaW5pdENvbG9yU3RyIGNvbG9yIHN0cmluZyBpbiB0aGUgZm9ybSBcInJnYigpXCIsIFwicmdiYSgpXCIsIFwiIy4uLi4uLlwiLCBvciBhIGNvbG9yIGtleXdvcmQgKGkuZS4gXCJyZWRcIilcbiAgICogQHBhcmFtICB7Li4ub2JqZWN0fSBhcmdzICAgICAgICAgQWRkaXRpb25hbCBhcmd1bWVudHMgdGhhdCBtYXkgYmUgcGFzc2VkIHRvIG90aGVyIGluaXRpYWxpemVycy9jb25zdHJ1Y3RvcnNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGhpcyBjbGFzcyBpcyB1c2VkIGFzIGEgYmFzZSBjbGFzcyBvciBtaXhpblxuICAgKiBAcmV0dXJuIHtDb2xvclJHQkF9XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihpbml0Q29sb3JTdHIsIC4uLmFyZ3MpIHtcbiAgICB0aGlzLmluaXRpYWxpemVyKGluaXRDb2xvclN0ciwgLi4uYXJncylcbiAgfVxuXG4gIC8qKlxuICAgKiBpbml0aWFsaXplcyBhIGNvbG9yIGluIHRoZSBSR0JBIGNvbG9yIHNwYWNlIHVzaW5nIGEgY29sb3Igc3RyaW5nXG4gICAqIEBwYXJhbSAge3N0cmluZ30gaW5pdENvbG9yU3RyIGluaXRpYWxpemVyIHN0cmluZyBpbiB0aGUgZm9ybSBcInJnYigpXCIsIFwicmdiYSgpXCIsIFwiIy4uLi4uLlwiLCBvciBjb2xvciBrZXl3b3JkXG4gICAqL1xuICBpbml0aWFsaXplcihpbml0Q29sb3JTdHIpIHtcbiAgICB0aGlzLl9jb2xvciA9IDBcbiAgICBpZiAoaW5pdENvbG9yU3RyKSB7XG4gICAgICB0aGlzLnZhbHVlID0gaW5pdENvbG9yU3RyXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHNldHMgYWxsIHRoZSBjaGFubmVscyBvZiB0aGUgUkdCQSBjb2xvciBnaXZlbiBhIGNvbG9yIHN0cmluZ1xuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGNvbG9yIGNvbG9yIHN0cmluZyBpbiB0aGUgZm9ybSBcInJnYigpXCIsIFwicmdiYSgpXCIsIFwiIy4uLi4uLlwiLCBvciBjb2xvciBrZXl3b3JkXG4gICAqIEByZXR1cm4ge0NvbG9yUkdCQX1cbiAgICovXG4gIHNldCB2YWx1ZShjb2xvcikge1xuICAgIHRoaXMuX2NvbG9yID0gZ2V0UGFja2VkQ29sb3JSR0JBRnJvbVN0cmluZyhjb2xvcilcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHJnYmEgY29sb3IgYXMgYSBjb2xvciBzdHJpbmcgXCJyZ2JhKClcIlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHJnYmEgY29sb3IgYXMgYSBzdHJpbmdcbiAgICovXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gZ2V0UkdCQVN0cmluZyh0aGlzLl9jb2xvcilcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2YWx1ZSBvZiB0aGUgUkdCQSBjb2xvciBwYWNrZWQgYXMgYSAzMi1iaXQgaW50XG4gICAqIEBwYXJhbSAge251bWJlcn0gcGFja2VkQ29sb3JcbiAgICogQHJldHVybiB7Q29sb3JSR0JBfVxuICAgKi9cbiAgc2V0IHBhY2tlZFZhbHVlKHBhY2tlZENvbG9yKSB7XG4gICAgdGhpcy5fY29sb3IgPSAwXG4gICAgdGhpcy5fY29sb3IgfD0gcGFja2VkQ29sb3JcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIFJHQkEgY29sb3IgYXMgYSBwYWNrZWQgMzItYml0IGludFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgcGFja2VkVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbG9yXG4gIH1cblxuICAvKipcbiAgICogc2V0cyB0aGUgb3BhY2l0eSBvZiB0aGUgUkdCQSBjb2xvciAobW9kaWZpZXMgYWxwaGEgY2hhbm5lbCBvbmx5KVxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IG9wYWNpdHkgWzAsMV1cbiAgICogQHJldHVybiB7Q29sb3JSR0JBfVxuICAgKi9cbiAgc2V0IG9wYWNpdHkob3BhY2l0eSkge1xuICAgIGlmICh0eXBlb2Ygb3BhY2l0eSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3BhY2l0eSBtdXN0IGJlIGEgbnVtYmVyIGJldHdlZW4gMC0xXCIpXG4gICAgfVxuXG4gICAgY29uc3QgY3Vyck9wYWNpdHkgPSB0aGlzLl9jb2xvciAmIDB4RkZcbiAgICBjb25zdCBuZXdPcGFjaXR5ID0gcGFja09wYWNpdHkob3BhY2l0eSlcbiAgICBpZiAobmV3T3BhY2l0eSAhPT0gY3Vyck9wYWNpdHkpIHtcbiAgICAgIHRoaXMuX2NvbG9yICY9IDB4RkZGRkZGMDBcbiAgICAgIHRoaXMuX2NvbG9yIHw9IG5ld09wYWNpdHlcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjdXJyZW50IG9wYWNpdHkgKGFscGhhIGNoYW5uZWwpIG9mIHRoZSBSR0JBIGNvbG9yXG4gICAqIEByZXR1cm4ge251bWJlcn0gWzAsMV1cbiAgICovXG4gIGdldCBvcGFjaXR5KCkge1xuICAgIHJldHVybiBnZXRPcGFjaXR5KHRoaXMuX2NvbG9yKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCBvcGFjaXR5IG9mIHRoZSByZ2JhIGNvbG9yIDwgMVxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgaXNUcmFuc3BhcmVudCgpIHtcbiAgICByZXR1cm4gZ2V0T3BhY2l0eSh0aGlzLl9jb2xvcikgPCAxLjBcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgY29sb3IgUkdCQSBjbGFzcyB0aGF0IGZpcmVzIGV2ZW50cyB3aGVuZXZlciB0aGUgY29sb3JcbiAqIGlzIGNoYW5nZWQgZXh0ZXJuYWxseVxuICogQHBhcmFtICB7c3RyaW5nfSBldmVudE5hbWUgRXZlbnQgdHlwZSB0byBmaXJlIHdoZW4gY29sb3IgaXMgbW9kaWZpZWRcbiAqIEBwYXJhbSAge3N0cmluZ30gY29sb3JOYW1lIE5hbWUgb2YgdGhlIGNvbG9yIGF0dHJpYnV0ZS4gVGhpcyBzdHJpbmcgaXMgdXNlZCBpbiB0aGUgZXZlbnQgb2JqZWN0IGZpcmVkXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gICAgICAgICBOZXcgY2xhc3MgY29uc3RydWN0b3IgZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUV2ZW50ZWRDb2xvclJHQkFDbGFzcyhldmVudE5hbWUsIGNvbG9yTmFtZSkge1xuXG4gIC8qKlxuICAgKiBAY2xhc3MgTmV3IHJnYmEgY29sb3IgY2xhc3MgdGhhdCBmaXJlcyBldmVudHMgd2hlbiBtb2RpZmllZFxuICAgKiBAZXh0ZW5kcyB7Q29sb3JSR0JBfVxuICAgKi9cbiAgcmV0dXJuIGNsYXNzIEV2ZW50ZWRDb2xvclJHQkEgZXh0ZW5kcyBDb2xvclJHQkEge1xuICAgIC8qKlxuICAgICAqIENvbG9yIG1vZGlmaWNhdGlvbiBldmVudFxuICAgICAqIEBldmVudCBFdmVudGVkQ29sb3IjY2hhbmdlZFxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGF0dHIgTmFtZSBvZiB0aGUgYXR0cmlidXRlIG1vZGlmaWVkXG4gICAgICogQHByb3BlcnR5IHt9IHByZXZWYWwgUHJldmlvdXMgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBwcmlvciB0byBtb2RpZmljYXRpb25cbiAgICAgKiBAcHJvcGVydHkge30gY3VyclZhbCBWYWx1ZSBvZiB0aGUgYXR0cmlidXRlIHBvc3QgbW9kaWZpY2F0aW9uXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgZXZlbnRlZCBjb2xvclxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gaW5pdENvbG9yU3RyIGluaXRpYWwgY29sb3IgYXMgc3RyaW5nXG4gICAgICogQHBhcmFtICB7RXZlbnRIYW5kbGVyfSBldmVudEhhbmRsZXIgRXZlbnQgaGFuZGxlciBpbnN0YW5jZSB1c2VkIHRvIG1hbmFnZSB0aGUgY29sb3JcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmljYXRpb24gZXZlbnRzXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGluaXRpYWxpemVyKGluaXRDb2xvclN0ciwgZXZlbnRIYW5kbGVyKSB7XG4gICAgICB0aGlzLl9ldmVudEhhbmRsZXIgPSBldmVudEhhbmRsZXJcbiAgICAgIHN1cGVyLmluaXRpYWxpemVyKGluaXRDb2xvclN0cilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZXMgbW9kaWZpY2F0aW9uIG9mIHRoZSByZ2JhIGNvbG9yLCBhbmQgaWYgbW9kaWZpZWQsIGZpcmVzXG4gICAgICogbW9kaWZpY2F0aW9uIGV2ZW50c1xuICAgICAqIEBwYXJhbSAge251bWJlcn0gbmV3UGFja2VkQ29sb3IgQ29sb3IgZGVmaW5lZCBieSBhIDMyLWJpdCBpbnRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jaGVja1BhY2tlZENvbG9yQ2hhbmdlZChuZXdQYWNrZWRDb2xvcikge1xuICAgICAgaWYgKG5ld1BhY2tlZENvbG9yICE9PSB0aGlzLl9jb2xvcikge1xuICAgICAgICBjb25zdCBwcmV2ID0gdGhpcy5fY29sb3JcbiAgICAgICAgY29uc3QgcHJldk9wYWNpdHkgPSBnZXRPcGFjaXR5KHByZXYpXG4gICAgICAgIGNvbnN0IG9wYWNpdHkgPSBnZXRPcGFjaXR5KG5ld1BhY2tlZENvbG9yKVxuICAgICAgICB0aGlzLl9jb2xvciA9IG5ld1BhY2tlZENvbG9yXG5cbiAgICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyLmZpcmUoZXZlbnROYW1lLCB7XG4gICAgICAgICAgYXR0cjogY29sb3JOYW1lLFxuICAgICAgICAgIHByZXZWYWw6IGdldFJHQkFTdHJpbmcocHJldiksXG4gICAgICAgICAgY3VyclZhbDogZ2V0UkdCQVN0cmluZyh0aGlzLl9jb2xvcilcbiAgICAgICAgfSlcblxuICAgICAgICBpZiAob3BhY2l0eSAhPT0gcHJldk9wYWNpdHkpIHtcbiAgICAgICAgICB0aGlzLl9ldmVudEhhbmRsZXIuZmlyZShldmVudE5hbWUsIHtcbiAgICAgICAgICAgIGF0dHI6IFwib3BhY2l0eVwiLFxuICAgICAgICAgICAgcHJldlZhbDogcHJldk9wYWNpdHksXG4gICAgICAgICAgICBjdXJyVmFsOiBvcGFjaXR5XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNldHMgYWxsIHRoZSBjaGFubmVscyBvZiB0aGUgUkdCQSBjb2xvciBmcm9tIGEgY29sb3Igc3RyaW5nXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBjb2xvciBjb2xvciBzdHJpbmcgaW4gdGhlIGZvcm0gXCJyZ2IoKVwiLCBcInJnYmEoKVwiLCBcIiMuLi4uLi5cIiwgb3IgY29sb3Iga2V5d29yZFxuICAgICAqIEBmaXJlcyAgRXZlbnRlZENvbG9yI2NoYW5nZWRcbiAgICAgKiBAcmV0dXJuIHtDb2xvclJHQkF9XG4gICAgICovXG4gICAgc2V0IHZhbHVlKGNvbG9yKSB7XG4gICAgICBjb25zdCB0bXBjb2xvciA9IGdldFBhY2tlZENvbG9yUkdCQUZyb21TdHJpbmcoY29sb3IpXG4gICAgICB0aGlzLl9jaGVja1BhY2tlZENvbG9yQ2hhbmdlZCh0bXBjb2xvcilcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcmdiYSBjb2xvciBhcyBhIGNvbG9yIHN0cmluZyBcInJnYmEoKVwiXG4gICAgICogQHJldHVybiB7c3RyaW5nfSByZ2JhIGNvbG9yIGFzIGEgc3RyaW5nXG4gICAgICovXG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgcmV0dXJuIGdldFJHQkFTdHJpbmcodGhpcy5fY29sb3IpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgb2YgdGhlIFJHQkEgY29sb3IgcGFja2VkIGFzIGEgMzItYml0IGludFxuICAgICAqIEBwYXJhbSAge251bWJlcn0gcGFja2VkQ29sb3JcbiAgICAgKiBAZmlyZXMgIEV2ZW50ZWRDb2xvciNjaGFuZ2VkXG4gICAgICogQHJldHVybiB7Q29sb3JSR0JBfVxuICAgICAqL1xuICAgIHNldCBwYWNrZWRWYWx1ZShwYWNrZWRDb2xvcikge1xuICAgICAgbGV0IHRtcGNvbG9yID0gMFxuICAgICAgdG1wY29sb3IgfD0gcGFja2VkQ29sb3JcbiAgICAgIHRoaXMuX2NoZWNrUGFja2VkQ29sb3JDaGFuZ2VkKHRtcGNvbG9yKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBSR0JBIGNvbG9yIGFzIGEgcGFja2VkIDMyLWJpdCBpbnRcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0IHBhY2tlZFZhbHVlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2V0cyB0aGUgb3BhY2l0eSBvZiB0aGUgUkdCQSBjb2xvciAobW9kaWZpZXMgYWxwaGEgY2hhbm5lbCBvbmx5KVxuICAgICAqIEBwYXJhbSAge251bWJlcn0gb3BhY2l0eSBbMCwxXVxuICAgICAqIEBmaXJlcyAgRXZlbnRlZENvbG9yI2NoYW5nZWRcbiAgICAgKiBAcmV0dXJuIHtDb2xvclJHQkF9XG4gICAgICovXG4gICAgc2V0IG9wYWNpdHkob3BhY2l0eSkge1xuICAgICAgaWYgKHR5cGVvZiBvcGFjaXR5ICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wYWNpdHkgbXVzdCBiZSBhIG51bWJlciBiZXR3ZWVuIDAtMVwiKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBjdXJyT3BhY2l0eSA9IHRoaXMuX2NvbG9yICYgMHhGRlxuICAgICAgY29uc3QgbmV3T3BhY2l0eSA9IHBhY2tPcGFjaXR5KG9wYWNpdHkpXG4gICAgICBpZiAobmV3T3BhY2l0eSAhPT0gY3Vyck9wYWNpdHkpIHtcbiAgICAgICAgdGhpcy5fY29sb3IgJj0gMHhGRkZGRkYwMFxuICAgICAgICB0aGlzLl9jb2xvciB8PSBuZXdPcGFjaXR5XG5cbiAgICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyLmZpcmUoZXZlbnROYW1lLCB7XG4gICAgICAgICAgYXR0cjogXCJvcGFjaXR5XCIsXG4gICAgICAgICAgcHJldlZhbDogY3Vyck9wYWNpdHkgLyAyNTUuMCxcbiAgICAgICAgICBjdXJyVmFsOiBuZXdPcGFjaXR5IC8gMjU1LjBcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY3VycmVudCBvcGFjaXR5IChhbHBoYSBjaGFubmVsKSBvZiB0aGUgUkdCQSBjb2xvclxuICAgICAqIEByZXR1cm4ge251bWJlcn0gWzAsMV1cbiAgICAgKi9cbiAgICBnZXQgb3BhY2l0eSgpIHtcbiAgICAgIHJldHVybiBnZXRPcGFjaXR5KHRoaXMuX2NvbG9yKVxuICAgIH1cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3R5bGUvY29sb3ItcmdiYS5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.createEventedFillStyleMixin = createEventedFillStyleMixin;\n\nvar _colorRgba = __webpack_require__(16);\n\nvar _colorRgba2 = _interopRequireDefault(_colorRgba);\n\nvar _aggregation = __webpack_require__(7);\n\nvar _aggregation2 = _interopRequireDefault(_aggregation);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @typedef {object} FillStyleOptions\n * @property {string} [fillColor=\"black\"] Fill color defined as a string\n * @property {number} [fillOpacity=1] Opacity of the fill color. This supersedes any opacity inherent in fillColor\n */\n\n/**\n * Manages the fill style of a 2d rendering context. Can be used as a mixin or base class\n * @class\n * @mixin\n */\nvar FillStyle = function () {\n  /**\n   * Creates a new fill style object\n   * @param {FillStyleOptions} [opts]\n   * @return {FillStyle}\n   */\n  function FillStyle(opts) {\n    _classCallCheck(this, FillStyle);\n\n    // TODO(croot): support gradients and patterns\n    this.initializer(opts);\n  }\n\n  /**\n   * initializes the fill style object from an options object\n   * @param  {FillStyleOptions} [opts]\n   * @private\n   */\n\n\n  _createClass(FillStyle, [{\n    key: \"_initFillStyleFromOptions\",\n    value: function _initFillStyleFromOptions(opts) {\n      if (opts) {\n        if (typeof opts.fillColor !== \"undefined\") {\n          this.fillColor = opts.fillColor;\n        }\n        if (typeof opts.fillOpacity !== \"undefined\") {\n          this.fillOpacity = opts.fillOpacity;\n        }\n      }\n    }\n\n    /**\n     * Initializer method to initialize a fill style. Used for both initializing\n     * via base-class and mixin hierarchy.\n     * @param  {FillStyleOptions} [opts]\n     */\n\n  }, {\n    key: \"initializer\",\n    value: function initializer(opts) {\n      this._fillColor = new _colorRgba2.default(\"black\");\n      this._initFillStyleFromOptions(opts);\n    }\n\n    /**\n     * Sets the fill color\n     * @param  {string} fillColor Color as a string, \"rgb()\", \"rgba()\", \"#......\", or a color keyword (i.e. \"black\")\n     * @return {FillStyle}\n     */\n\n  }, {\n    key: \"isFillVisible\",\n\n\n    /**\n     * Returns true if the fill style is visible, i.e. it has an opacity > 0\n     * @return {Boolean}\n     */\n    value: function isFillVisible() {\n      return this._fillColor.opacity > 0;\n    }\n\n    /**\n     * Returns true if the fill style is transparent in any way, i.e. opacity < 1\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isTransparent\",\n    value: function isTransparent() {\n      return this._fillColor.isTransparent();\n    }\n\n    /**\n     * Sets the fill style state of a 2d rendering context\n     * @param {CanvasRenderingContext2D} ctx\n     */\n\n  }, {\n    key: \"setFillCtx\",\n    value: function setFillCtx(ctx) {\n      ctx.fillStyle = this.fillColor;\n    }\n\n    /**\n     * Copies the properties of one fill style to another\n     * @param  {FillStyle} srcStyle FillStyle object to copy from\n     * @param  {FillStyle} dstStyle FillStyle object to copy to\n     */\n\n  }, {\n    key: \"fillColor\",\n    set: function set(fillColor) {\n      this._fillColor.value = fillColor;\n      return this;\n    }\n\n    /**\n     * Gets the fill color of the style\n     * @return {string}\n     */\n    ,\n    get: function get() {\n      return this._fillColor.value;\n    }\n\n    /**\n     * Sets the opacity of the fill style\n     * @param  {number} opacity [0,1]\n     * @return {FillStyle}\n     */\n\n  }, {\n    key: \"fillOpacity\",\n    set: function set(opacity) {\n      this._fillColor.opacity = opacity;\n      return this;\n    }\n\n    /**\n     * Gets the current opacity of the fill style [0,1]\n     * @return {number} Opacity in the range [0,1]\n     */\n    ,\n    get: function get() {\n      return this._fillColor.opacity;\n    }\n\n    /**\n     * Sets the fill color of the style defined as a 32-bit int\n     * @param  {number} packedFillColor Color value as a 32-bit int (i.e. 0xFFFFFFFF)\n     * @return {FillStyle}\n     */\n\n  }, {\n    key: \"packedFillColor\",\n    set: function set(packedFillColor) {\n      this._fillColor.packedValue = packedFillColor;\n      return this;\n    }\n\n    /**\n     * Gets the current value of the color of the fill style as a 32-bit int\n     * @return {number} i.e. 0xFFFFFFFF\n     */\n    ,\n    get: function get() {\n      return this._fillColor.packedValue;\n    }\n  }], [{\n    key: \"copyFillStyle\",\n    value: function copyFillStyle(srcStyle, dstStyle) {\n      if (typeof srcStyle.packedFillColor === \"undefined\") {\n        if (typeof srcStyle.fillColor !== \"undefined\") {\n          dstStyle.fillColor = srcStyle.fillColor;\n        }\n        if (typeof srcStyle.fillOpacity !== \"undefined\") {\n          dstStyle.fillOpacity = srcStyle.fillOpacity;\n        }\n      } else {\n        dstStyle.packedFillColor = srcStyle.packedFillColor;\n      }\n    }\n\n    /**\n     * Comparison operator between two FillStyle objects. This is primarily\n     * used for sorting to minimize context switching of a 2d renderer\n     * @param  {FillStyle} fillStyleA\n     * @param  {FillStyle} fillStyleB\n     * @return {number}            Returns < 0 if fillStyleA < fillStyleB, > 0 if fillStyleA > fillStyleB, or 0 if they are equal.\n     */\n\n  }, {\n    key: \"compareFillStyle\",\n    value: function compareFillStyle(fillStyleA, fillStyleB) {\n      var valA = fillStyleA.isFillVisible();\n      var valB = fillStyleB.isFillVisible();\n      if (valA !== valB) {\n        return valA - valB;\n      }\n      return fillStyleA.packedFillColor - fillStyleB.packedFillColor;\n    }\n\n    /**\n     * Returns a json object of a FillStyle object\n     * @param  {FillStyle} fillStyleObj\n     * @return {{fillColor: string}}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(fillStyleObj) {\n      return {\n        fillColor: fillStyleObj.fillColor\n      };\n    }\n  }]);\n\n  return FillStyle;\n}();\n\n/**\n * Creates a new fill style class that fires events whenever the style\n * is modified.\n * @param  {string} eventName Event type to fire when fill style is modified\n * @return {function}         New class constructor function\n */\n\n\nexports.default = FillStyle;\nfunction createEventedFillStyleMixin(eventName) {\n  /**\n   * Evented fill color class to handle fill color modifications\n   * @type {ColorRGBA}\n   */\n  var FillColorClass = (0, _colorRgba.createEventedColorRGBAClass)(eventName, \"fillColor\");\n\n  /**\n   * @mixin New evented fill style mixin. Will fire events whenever\n   *        the fill color is modified\n   */\n  return (0, _aggregation2.default)(null, FillStyle, function () {\n    function EventedFillStyle() {\n      _classCallCheck(this, EventedFillStyle);\n    }\n\n    _createClass(EventedFillStyle, [{\n      key: \"initializer\",\n      value: function initializer(opts) {\n        this._fillColor = new FillColorClass(\"red\", this);\n        this._initFillStyleFromOptions(opts);\n      }\n    }]);\n\n    return EventedFillStyle;\n  }());\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.createEventedStrokeStyleMixin = createEventedStrokeStyleMixin;\n\nvar _colorRgba = __webpack_require__(16);\n\nvar _colorRgba2 = _interopRequireDefault(_colorRgba);\n\nvar _aggregation = __webpack_require__(7);\n\nvar _aggregation2 = _interopRequireDefault(_aggregation);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @typedef {object} StrokeStyleOptions\n * @property {string} [strokeColor = \"black\"]\n * @property {number} [strokeWidth = 0]\n * @property {string} [lineJoin = \"miter\"]\n * @property {string} [lineCap = \"butt\"]\n * @property {number[]} [dashPattern = []]\n * @property {number} [dashOffset = 0]\n */\n\n/**\n * validates a possible stroke width value\n * @param  {number} strokeWidth\n * @throws If validation fails\n * @private\n */\nfunction validateStrokeWidth(strokeWidth) {\n  if (typeof strokeWidth !== \"number\") {\n    throw new Error(\"Stroke width must be a number\");\n  }\n}\n\n/**\n * Enum for line join values\n * @enum {number}\n */\nvar JoinEnum = {\n  MITER: 0,\n  BEVEL: 1,\n  ROUND: 2\n\n  /**\n   * line join values as strings, the enum values match the index in this string\n   * @type {string[]}\n   */\n};var lineJoinOpts = [\"miter\", \"bevel\", \"round\"];\n\n/**\n * validates a line join value\n * @param  {string} lineJoin Should be one of [\"miter\", \"bevel\", \"round\"]\n * @throws If validation fails\n * @return {JoinEnum}\n * @private\n */\nfunction validateLineJoin(lineJoin) {\n  var idx = -1;\n  if (typeof lineJoin !== \"string\" || (idx = lineJoinOpts.indexOf(lineJoin.toLowerCase())) < 0) {\n    throw new Error(\"Line join must be a string and must be one of [\" + lineJoinOpts.join(\", \") + \"]\");\n  }\n  return idx;\n}\n\n/**\n * Enum for line cap values\n * @enum {number}\n */\nvar CapEnum = {\n  BUTT: 0,\n  SQUARE: 1,\n  ROUND: 2\n\n  /**\n   * line cap values as strings, the CapEnum values match the index in this string\n   * @type {string[]}\n   */\n};var lineCapOpts = [\"butt\", \"square\", \"round\"];\n\n/**\n * validates a line cap value\n * @param  {string} lineCap Should be one of \"butt\", \"square\", \"round\"\n * @throws If validation fails\n * @return {CapEnum}\n * @private\n */\nfunction validateLineCap(lineCap) {\n  var idx = -1;\n  if (typeof lineCap !== \"string\" || (idx = lineCapOpts.indexOf(lineCap.toLowerCase())) < 0) {\n    throw new Error(\"Line cap must be a string and must be one of [\" + lineCapOpts.join(\", \") + \"]\");\n  }\n  return idx;\n}\n\n/**\n * validates a dash pattern value\n * @param  {number[]} dashPattern\n * @throws If validation fails\n * @private\n */\nfunction validateDashPattern(dashPattern) {\n  if (!dashPattern || !Array.isArray(dashPattern) || dashPattern.length % 2 !== 0) {\n    throw new Error(\"The dash pattern must be an array with an even number of numbers (or an empty array)\");\n  }\n}\n\n/**\n * validates a dash offset value\n * @param  {number} dashOffset\n * @throws If validation fails\n * @private\n */\nfunction validateDashOffset(dashOffset) {\n  if (typeof dashOffset !== \"number\") {\n    throw new Error(\"The dash offset must be a number\");\n  }\n}\n\n/**\n * Manages the stroke style of a 2d rendering context. Can be used as a mixin or base class\n * @class\n * @mixin\n */\n\nvar StrokeStyle = function () {\n  function StrokeStyle(opts) {\n    _classCallCheck(this, StrokeStyle);\n\n    this.initializer(opts);\n  }\n\n  /**\n   * initializes the stroke style object from an options object\n   * @param  {StrokeStyleOptions} [opts]\n   * @private\n   */\n\n\n  _createClass(StrokeStyle, [{\n    key: \"_initStrokeStyleFromOptions\",\n    value: function _initStrokeStyleFromOptions(opts) {\n      if (opts) {\n        if (typeof opts.strokeColor !== \"undefined\") {\n          this.strokeColor = opts.strokeColor;\n        }\n        if (typeof opts.strokeOpacity !== \"undefined\") {\n          this.strokeOpacity = opts.strokeOpacity;\n        }\n        if (typeof opts.strokeWidth !== \"undefined\") {\n          this.strokeWidth = opts.strokeWidth;\n        }\n        if (typeof opts.lineMiter !== \"undefined\") {\n          this.lineJoin = opts.lineMiter;\n        }\n        if (typeof opts.lineCap !== \"undefined\") {\n          this.lineCap = opts.lineCap;\n        }\n        if (typeof opts.dashPattern !== \"undefined\") {\n          this.dashPattern = opts.dashPattern;\n        }\n        if (typeof opts.dashOffset !== \"undefined\") {\n          this.dashOffset = opts.dashOffset;\n        }\n      }\n    }\n\n    /**\n     * Initializer method to initialize a stroke style. Used for both initializing\n     * via base-class and mixin hierarchy.\n     * @param  {StrokeStyleOptions} [opts]\n     * @protected\n     */\n\n  }, {\n    key: \"initializer\",\n    value: function initializer(opts) {\n      this._strokeColor = new _colorRgba2.default(\"black\");\n      this._strokeWidth = 0;\n      this._lineJoin = JoinEnum.MITER;\n      this._lineCap = CapEnum.BUTT;\n      this._dashPattern = [];\n      this._dashOffset = 0;\n      this._initStrokeStyleFromOptions(opts);\n    }\n\n    /**\n     * Sets the stroke color\n     * @param  {string} strokeColor Color as a string, \"rgb()\", \"rgba()\", \"#......\", or a color keyword (i.e. \"black\")\n     * @return {StrokeStyle}\n     */\n\n  }, {\n    key: \"isStrokeVisible\",\n\n\n    /**\n     * Returns true if the stroke style is visible, i.e. it is not fully transparent\n     * and has a width > 0\n     * @return {Boolean}\n     */\n    value: function isStrokeVisible() {\n      return this._strokeColor.opacity > 0 && this._strokeWidth > 0;\n    }\n\n    /**\n     * Returns true if stroke is partially transparent, i.e. opacity < 1\n     * @return {Boolean} [description]\n     */\n\n  }, {\n    key: \"isTransparent\",\n    value: function isTransparent() {\n      return this._strokeColor.isTransparent();\n    }\n\n    /**\n     * Sets the stroke style state of a 2d rendering context\n     * @param {CanvasRenderingContext2D} ctx\n     */\n\n  }, {\n    key: \"setStrokeCtx\",\n    value: function setStrokeCtx(ctx) {\n      ctx.strokeStyle = this.strokeColor;\n      ctx.lineWidth = this._strokeWidth;\n      ctx.lineJoin = this._lineJoin;\n      ctx.lineCap = this._lineCap;\n      ctx.setLineDash(this._dashPattern);\n      ctx.lineDashOffset = this._dashOffset;\n    }\n\n    /**\n     * Copies the properties of one stroke style to another\n     * @param  {StrokeStyle} srcStyle StrokeStyle object to copy from\n     * @param  {StrokeStyle} dstStyle StrokeStyle object to copy to\n     */\n\n  }, {\n    key: \"strokeColor\",\n    set: function set(strokeColor) {\n      this._strokeColor.value = strokeColor;\n      return this;\n    }\n\n    /**\n     * Gets the stroke color of the style\n     * @return {string}\n     */\n    ,\n    get: function get() {\n      return this._strokeColor.value;\n    }\n\n    /**\n     * Sets the opacity of the stroke style\n     * @param  {number} opacity [0,1]\n     * @return {StrokeStyle}\n     */\n\n  }, {\n    key: \"strokeOpacity\",\n    set: function set(opacity) {\n      this._strokeColor.opacity = opacity;\n    }\n\n    /**\n     * Gets the current opacity of the stroke style [0,1]\n     * @return {number} Opacity in the range [0,1]\n     */\n    ,\n    get: function get() {\n      return this._strokeColor.opacity;\n    }\n\n    /**\n     * Sets the stroke color of the style defined as a 32-bit int\n     * @param  {number} packedStrokeColor Color value as a 32-bit int (i.e. 0xFFFFFFFF)\n     * @return {StrokeStyle}\n     */\n\n  }, {\n    key: \"packedStrokeColor\",\n    set: function set(packedStrokeColor) {\n      this._strokeColor.packedValue = packedStrokeColor;\n    }\n\n    /**\n     * Gets the current value of the color of the stroke style as a 32-bit int\n     * @return {number} i.e. 0xFFFFFFFF\n     */\n    ,\n    get: function get() {\n      return this._strokeColor.packedValue;\n    }\n\n    /**\n     * Sets the stroke width\n     * @param  {number} strokeWidth\n     * @return {StrokeStyle}\n     */\n\n  }, {\n    key: \"strokeWidth\",\n    set: function set(strokeWidth) {\n      validateStrokeWidth(strokeWidth);\n      this._strokeWidth = strokeWidth;\n      return this;\n    }\n\n    /**\n     * Gets the current stroke width\n     * @return {number}\n     */\n    ,\n    get: function get() {\n      return this._strokeWidth;\n    }\n\n    /**\n     * Sets how lines should be joined\n     * @param  {string} lineJoin One of \"miter\", \"round\", or \"bevel\"\n     * @return {StrokeStyle}\n     */\n\n  }, {\n    key: \"lineJoin\",\n    set: function set(lineJoin) {\n      var enumVal = validateLineJoin(lineJoin);\n      this._lineJoin = enumVal;\n      return this;\n    }\n\n    /**\n     * Gets the current line join\n     * @return {string}\n     */\n    ,\n    get: function get() {\n      return lineJoinOpts[this._lineJoin];\n    }\n\n    /**\n     * Sets how lines should be capped\n     * @param  {string} lineCap One of \"butt\", \"square\", or \"round\"\n     * @return {StrokeStyle}\n     */\n\n  }, {\n    key: \"lineCap\",\n    set: function set(lineCap) {\n      var enumVal = validateLineCap(lineCap);\n      this._lineCap = enumVal;\n      return this;\n    }\n\n    /**\n     * Gets the current line cap of the style\n     * @return {string}\n     */\n    ,\n    get: function get() {\n      return lineCapOpts[this._lineJoin];\n    }\n\n    /**\n     * Sets the dash pattern of the style\n     * @param  {number[]} dashPattern A list of numbers that specifies distances to alternately\n     *                                draw a line and a gap (in screen units)\n     * @return {StrokeStyle}\n     */\n\n  }, {\n    key: \"dashPattern\",\n    set: function set(dashPattern) {\n      validateDashPattern(dashPattern);\n      this._dashPattern = dashPattern.slice();\n      return this;\n    }\n\n    /**\n     * Gets the current dash pattern of the style\n     * @return {number[]}\n     */\n    ,\n    get: function get() {\n      return this._dashPattern.slice();\n    }\n\n    /**\n     * Sets the dash offset of the style\n     * @param  {number} dashOffset\n     * @return {StrokeStyle}\n     */\n\n  }, {\n    key: \"dashOffset\",\n    set: function set(dashOffset) {\n      validateDashOffset(dashOffset);\n      this._dashOffset = dashOffset;\n      return this;\n    }\n\n    /**\n     * Gets the current dash offset\n     * @return {number}\n     */\n    ,\n    get: function get() {\n      return this._dashOffset;\n    }\n  }], [{\n    key: \"copyStrokeStyle\",\n    value: function copyStrokeStyle(srcStyle, dstStyle) {\n      if (typeof srcStyle.packedStrokeColor === \"undefined\") {\n        if (typeof srcStyle.strokeColor !== \"undefined\") {\n          dstStyle.strokeColor = srcStyle.strokeColor;\n        }\n        if (typeof srcStyle.strokeOpacity !== \"undefined\") {\n          dstStyle.strokeOpacity = srcStyle.strokeOpacity;\n        }\n      } else {\n        dstStyle.packedStrokeColor = srcStyle.packedStrokeColor;\n      }\n      if (typeof srcStyle.strokeWidth !== \"undefined\") {\n        dstStyle.strokeWidth = srcStyle.strokeWidth;\n      }\n      if (typeof srcStyle.lineJoin !== \"undefined\") {\n        dstStyle.lineJoin = srcStyle.lineJoin;\n      }\n      if (typeof srcStyle.lineCap !== \"undefined\") {\n        dstStyle.lineCap = srcStyle.lineCap;\n      }\n      if (typeof srcStyle.dashPattern !== \"undefined\") {\n        dstStyle.dashPattern = srcStyle.dashPattern;\n      }\n      if (typeof srcStyle.dashOffset !== \"undefined\") {\n        dstStyle.dashOffset = srcStyle.dashOffset;\n      }\n    }\n\n    /**\n     * Comparison operator between two StrokeStyle objects. This is primarily\n     * used for sorting to minimize context switching of a 2d renderer\n     * @param  {StrokeStyle} strokeStyleA\n     * @param  {StrokeStyle} strokeStyleB\n     * @return {number}            Returns < 0 if strokeStyleA < strokeStyleB, > 0 if strokeStyleA > strokeStyleB, or 0 if they are equal.\n     */\n\n  }, {\n    key: \"compareStrokeStyle\",\n    value: function compareStrokeStyle(strokeStyleA, strokeStyleB) {\n      var valA = strokeStyleA.isStrokeVisible();\n      var valB = strokeStyleB.isStrokeVisible();\n      if (valA !== valB) {\n        return valA - valB;\n      }\n      valA = strokeStyleA.packedStrokeColor;\n      valB = strokeStyleB.packedStrokeColor;\n      if (valA !== valB) {\n        return valA - valB;\n      }\n      valA = strokeStyleA.strokeWidth;\n      valB = strokeStyleB.strokeWidth;\n      if (valA !== valB) {\n        return valA - valB;\n      }\n      valA = strokeStyleA._lineJoin;\n      valB = strokeStyleB._lineJoin;\n      if (valA !== valB) {\n        return valA - valB;\n      }\n      valA = strokeStyleA._lineCap;\n      valB = strokeStyleB._lineCap;\n      if (valA !== valB) {\n        return valA - valB;\n      }\n      valA = strokeStyleA._dashPattern;\n      valB = strokeStyleB._dashPattern;\n      if (valA.length === valB.length && valA.length > 0) {\n        for (var i = 0; i < valA.length; i += 1) {\n          if (valA[i] !== valB[i]) {\n            return valA[i] - valB[i];\n          }\n        }\n        return strokeStyleA.dashOffset - strokeStyleB.dashOffset;\n      }\n      return valA.length - valB.length;\n    }\n\n    /**\n     * Returns a json object of a StrokeStyle object\n     * @param  {StrokeStyle} strokeStyleObj\n     * @return {{strokeColor: string,\n     *           strokeWidth: number,\n     *           lineJoin: string,\n     *           lineCap: string,\n     *           dashPattern: number[],\n     *           dashOffset: number\n     *          }}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(strokeStyleObj) {\n      return {\n        strokeColor: strokeStyleObj.strokeColor,\n        strokeWidth: strokeStyleObj.strokeWidth,\n        lineJoin: strokeStyleObj.lineJoin,\n        lineCap: strokeStyleObj.lineCap,\n        dashPattern: strokeStyleObj.dashPattern,\n        dashOffset: strokeStyleObj.dashOffset\n      };\n    }\n  }]);\n\n  return StrokeStyle;\n}();\n\n/**\n * Creates a new stroke style class that fires events whenever the style\n * is modified.\n * @param  {string} eventName Event type to fire when stroke style is modified\n * @return {function}         New class constructor function\n */\n\n\nexports.default = StrokeStyle;\nfunction createEventedStrokeStyleMixin(eventName) {\n  /**\n   * Evented stroke color class to handle color modification events\n   * @type {ColorRGBA}\n   */\n  var StrokeColorClass = (0, _colorRgba.createEventedColorRGBAClass)(eventName, \"strokeColor\");\n\n  /**\n   * Stroke style modification event\n   * @event EventedStrokeStyle#changed\n   * @type {object}\n   * @property {string} attr Name of the attribute modified\n   * @property {} prevVal Previous value of the attribute prior to modification\n   * @property {} currVal Value of the attribute post modification\n   */\n\n  /**\n   * @mixin New evented stroke style mixin. Will fire events whenever\n   *        the stroke is modified\n   */\n  return (0, _aggregation2.default)(null, StrokeStyle, function () {\n    function EventedStrokeStyle() {\n      _classCallCheck(this, EventedStrokeStyle);\n    }\n\n    _createClass(EventedStrokeStyle, [{\n      key: \"initializer\",\n\n      /**\n       * Initializer method to initialize an evented stroke style.\n       * @param  {StrokeStyleOptions} [opts]\n       * @protected\n       */\n      value: function initializer(opts) {\n        this._strokeColor = new StrokeColorClass(\"black\", this);\n        this._strokeWidth = 0;\n        this._lineJoin = JoinEnum.MITER;\n        this._lineCap = CapEnum.BUTT;\n        this._dashPattern = [];\n        this._dashOffset = 0;\n        this._initStrokeStyleFromOptions(opts);\n      }\n\n      /**\n       * Sets the stroke width\n       * @param  {number}\n       * @fires  EventedStrokeStyle#changed\n       * @return {EventedStrokeStyle}\n       */\n\n    }, {\n      key: \"strokeWidth\",\n      set: function set(strokeWidth) {\n        validateStrokeWidth(strokeWidth);\n        if (strokeWidth !== this._strokeWidth) {\n          var prev = this._strokeWidth;\n          this._strokeWidth = strokeWidth;\n          this.fire(eventName, {\n            attr: \"strokeWidth\",\n            prevVal: prev,\n            curral: this._strokeWidth\n          });\n        }\n\n        return this;\n      }\n\n      /**\n       * Gets the current stroke width\n       * @return {number}\n       */\n      ,\n      get: function get() {\n        return this._strokeWidth;\n      }\n\n      /**\n       * Sets the line join\n       * @param  {string} lineJoin\n       * @fires {EventedStrokeStyle#changed}\n       * @return {EventedStrokeStyle}\n       */\n\n    }, {\n      key: \"lineJoin\",\n      set: function set(lineJoin) {\n        var enumVal = validateLineJoin(lineJoin);\n\n        if (enumVal !== this._lineJoin) {\n          var prev = this._lineJoin;\n          this._lineJoin = enumVal;\n          this.fire(eventName, {\n            attr: \"lineJoin\",\n            prevVal: prev,\n            curral: this._lineJoin\n          });\n        }\n\n        return this;\n      }\n\n      /**\n       * Gets the current line join\n       * @return {string}\n       */\n      ,\n      get: function get() {\n        return lineJoinOpts[this._lineJoin];\n      }\n\n      /**\n       * Sets the line cap\n       * @param  {string} lineCap\n       * @fires {EventedStrokeStyle#changed}\n       * @return {EventedStrokeStyle}\n       */\n\n    }, {\n      key: \"lineCap\",\n      set: function set(lineCap) {\n        var enumVal = validateLineCap(lineCap);\n        if (enumVal !== this._lineCap) {\n          var prev = this._lineCap;\n          this._lineCap = enumVal;\n          this.fire(eventName, {\n            attr: \"lineCap\",\n            prevVal: prev,\n            curral: this._lineCap\n          });\n        }\n        return this;\n      }\n\n      /**\n       * Gets the line cap\n       * @return {string}\n       */\n      ,\n      get: function get() {\n        return lineCapOpts[this._lineCap];\n      }\n\n      /**\n       * Sets the dash pattern\n       * @param  {number[]} dashPattern\n       * @fires {EventedStrokeStyle#changed}\n       * @return {EventedStrokeStyle}\n       */\n\n    }, {\n      key: \"dashPattern\",\n      set: function set(dashPattern) {\n        validateDashPattern(dashPattern);\n        var diff = false;\n        if (dashPattern.length === this._dashPattern.length) {\n          for (var i = 0; i < dashPattern.length; i += 1) {\n            if (dashPattern[i] !== this._dashPattern[i]) {\n              diff = true;\n              break;\n            }\n          }\n        } else {\n          diff = true;\n        }\n\n        if (diff) {\n          var prev = this._dashPattern;\n          this._dashPattern = dashPattern.slice();\n          this.fire(eventName, {\n            attr: \"dashPattern\",\n            prevVal: prev,\n            curral: this._dashPattern.slice()\n          });\n        }\n        return this;\n      }\n\n      /**\n       * Gets the current dash pattern\n       * @return {number[]}\n       */\n      ,\n      get: function get() {\n        return this._dashPattern.slice();\n      }\n\n      /**\n       * Sets the current dash offset\n       * @param  {number} dashOffset\n       * @fires {EventedStrokeStyle#changed}\n       * @return {EventedStrokeStyle}\n       */\n\n    }, {\n      key: \"dashOffset\",\n      set: function set(dashOffset) {\n        validateDashOffset(dashOffset);\n\n        if (dashOffset !== this._dashOffset) {\n          var prev = this._dashOffset;\n          this._dashOffset = dashOffset;\n\n          if (this._dashPattern.length) {\n            // only fire if dashing is activated\n            this.fire(eventName, {\n              attr: \"dashOffset\",\n              prevVal: prev,\n              curral: this._dashOffset\n            });\n          }\n        }\n        return this;\n      }\n\n      /**\n       * Gets the current dash offset\n       * @return {number}\n       */\n      ,\n      get: function get() {\n        return this._dashOffset;\n      }\n    }]);\n\n    return EventedStrokeStyle;\n  }());\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _interactUtils = __webpack_require__(20);\n\nvar InteractUtils = _interopRequireWildcard(_interactUtils);\n\nvar _point2d = __webpack_require__(3);\n\nvar Point2d = _interopRequireWildcard(_point2d);\n\nvar _basicStyle = __webpack_require__(8);\n\nvar _basicStyle2 = _interopRequireDefault(_basicStyle);\n\nvar _drawEngine = __webpack_require__(13);\n\nvar _drawEngine2 = _interopRequireDefault(_drawEngine);\n\nvar _mat2d = __webpack_require__(4);\n\nvar _mat2d2 = _interopRequireDefault(_mat2d);\n\nvar _polyLine = __webpack_require__(10);\n\nvar _polyLine2 = _interopRequireDefault(_polyLine);\n\nvar _vertEditableShape = __webpack_require__(21);\n\nvar _vertEditableShape2 = _interopRequireDefault(_vertEditableShape);\n\nvar _xformShape = __webpack_require__(22);\n\nvar _xformShape2 = _interopRequireDefault(_xformShape);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar scaleSvg = \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cg transform='rotate(<degrees>,24,24)'%3E%3Cpolygon style='fill:%23ffffff;' points='16,20 16,12 4,24 16,36 16,28 32,28 32,36 44,24 32,12 32,20 '/%3E%3Cpolygon points='14,22 14,17 7,24 14,31 14,26 34,26 34,31 41,24 34,17 34,22 '/%3E%3C/g%3E%3C/svg%3E\\\") no-repeat\";\n\nvar rotateSvg = \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cg transform='rotate(<degrees>,24,24)'%3E%3Cpath style='fill:%23ffffff;' d='M25.9,4C16.6,4,8.8,11.2,7.4,20.8H6.7H3.3l1.6,2.9l3.8,7.1l1.8,3.3l1.8-3.3l3.8-7.1l1.6-2.9h-3.3h-0.1 c1.3-5.7,6.1-9.9,11.7-9.9c8,0,12.1,4.4,12.1,13.1c0,7.2-5.4,13.1-12.1,13.1h-2v2V42v2h2c10.4,0,18.8-9,18.8-20 C44.7,11.7,37.5,4,25.9,4L25.9,4z'/%3E%3Cpath d='M25.9,6c10.5,0,16.8,6.7,16.8,18c0,9.9-7.5,18-16.8,18v-2.9c7.8,0,14.1-6.8,14.1-15.1c0-5.6-1.8-15.1-14.1-15.1 c-7.4,0-13.4,6.1-14,13.9h2.4l-3.8,7.1l-3.8-7.1h2.5C9.7,13.4,17,6,25.9,6'/%3E%3C/g%3E%3C/svg%3E\\\") no-repeat\";\n\nvar addSvg = \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpolygon style='fill:%23ffffff;' points='31.2,28 24.8,28 24.8,32.8 20,32.8 20,39.2 24.8,39.2 24.8,44 31.2,44 31.2,39.2 36,39.2 36,32.8 31.2,32.8 '/%3E %3Cpolygon style='fill:%23ffffff' points='12,32 12,4 32.3,24.3 20,24.3 19.7,24.6 '/%3E%3Cpolygon points='13.8,8.2 13.8,27.8 19,22.8 19.2,22.5 28,22.5 '/%3E%3Cpolyline points='29.6,29.6 29.6,34.4 34.4,34.4 34.4,37.6 29.6,37.6 29.6,42.4 26.4,42.4 26.4,37.6 21.6,37.6 21.6,34.4 26.4,34.4 26.4,29.6 29.6,29.6  '/%3E%3C/svg%3E\\\") no-repeat\";\n\nvar removeSvg = \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Crect style='fill:%23ffffff;' x='20' y='32.8' width='16' height='6.4'/%3E%3Cpolygon  style='fill:%23ffffff;' points='12,32 12,4 32.3,24.3 20,24.3 19.7,24.6 '/%3E%3Cpolygon points='13.8,8.2 13.8,27.8 19,22.8 19.2,22.5 28,22.5 '/%3E%3Cpolyline points='34.4,34.4 34.4,37.6 21.6,37.6 21.6,34.4 '/%3E%3C/svg%3E\\\") no-repeat\";\n\nvar repositionSvg = \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath style='fill:%23ffffff;' d='M24,17.5c-3.6,0-6.5,2.9-6.5,6.5s2.9,6.5,6.5,6.5s6.5-2.9,6.5-6.5S27.6,17.5,24,17.5L24,17.5z'/%3E%3Cpath style='fill:%23ffffff;' d='M24,4L4,24l20,20l20-20L24,4z M31.5,31.5h-15v-15h15V31.5z'/%3E%3Cpolygon points='17,34 24,40.5 31,34  '/%3E%3Cpolygon points='31,14 24,7.5 17,14     '/%3E%3Cpolygon points='14,17 7.5,24 14,31   '/%3E%3Cpolygon points='34,31 40.5,24 34,17    '/%3E%3Cpath d='M24,20c2.2,0,4,1.8,4,4s-1.8,4-4,4s-4-1.8-4-4S21.8,20,24,20'/%3E%3C/svg%3E\\\") no-repeat\";\n\nvar EventConstants = {\n  SELECTION_CHANGED: \"draw:selectionChanged\",\n  DRAG_BEGIN: \"draw:drag:begin\",\n  DRAG_END: \"draw:drag:end\"\n};\n\nvar Constants = {\n  SVG_OFFSET: -14,\n  QUICK_CLICK_TIME: 500,\n  RIGHT_ANGLE: 90,\n  STRAIGHT_ANGLE: 180,\n  FORTY_FIVE_ANGLE: 45\n};\n\nvar tmpPt1 = Point2d.create(0, 0);\nvar tmpPt2 = Point2d.create(0, 0);\n\nvar defaultXformStyle = {\n  fillColor: \"white\",\n  strokeColor: \"black\",\n  strokeWidth: 2\n};\n\nvar EventsTypes = {\n  MOUSEDOWN: \"mousedown\",\n  MOUSEUP: \"mouseup\",\n  MOUSEMOVE: \"mousemove\",\n  TOUCHSTART: \"touchstart\",\n  TOUCHEND: \"touchend\",\n  TOUCHMOVE: \"touchmove\"\n};\n\nvar DOUBLE_CLICK_DELAY = 600; // To detect the double click in case of touch screen\n\n// This method will Add clientX, clientY & offsetX and offsetY for Touch events\nfunction getTouchCoordinates(event, canvas) {\n  event.clientX = event.touches[0].clientX;\n  event.clientY = event.touches[0].clientY;\n  var element = canvas.getBoundingClientRect();\n  event.offsetX = event.touches[0].clientX - element.left;\n  event.offsetY = event.touches[0].clientY - element.top;\n  return event;\n}\n\nfunction inCanvas(canvas, x, y) {\n  var domrect = canvas.getBoundingClientRect();\n  var localX = 0;\n  var localY = 0;\n  var isInCanvas = (localX = x - domrect.left - canvas.clientLeft) >= 0 && localX <= canvas.clientWidth && (localY = y - domrect.top - canvas.clientTop) >= 0 && localY <= canvas.clientHeight;\n  return isInCanvas;\n}\n\nfunction getLocalMousePos(out, elem, event) {\n  var domrect = elem.getBoundingClientRect();\n  out[0] = event.clientX - domrect.left - elem.clientLeft;\n  out[1] = event.clientY - domrect.top - elem.clientTop;\n}\n\nfunction transformSelectedShape(canvas, event, selectedInfo, camera) {\n  getLocalMousePos(tmpPt1, canvas, event);\n  Point2d.transformMat2d(tmpPt2, tmpPt1, camera.screenToWorldMatrix);\n  var shape = selectedInfo.shape;\n  if (shape instanceof _xformShape2.default) {\n    InteractUtils.transformXformShape(shape, selectedInfo, tmpPt1, tmpPt2, camera);\n  } else if (shape instanceof _vertEditableShape2.default) {\n    InteractUtils.translateVert(shape, selectedInfo, tmpPt1, tmpPt2, camera);\n  } else {\n    InteractUtils.translateShape(shape, selectedInfo, tmpPt1, tmpPt2, camera);\n  }\n}\n\nfunction addEventKeysToSelectedInfo(event, selectedInfo) {\n  selectedInfo.keys = {\n    altKey: event.altKey,\n    ctrlKey: event.ctrlKey,\n    shiftKey: event.shiftKey,\n    metaKey: event.metaKey\n  };\n}\n\nfunction getSelectedObjsFromMap(selectionMap) {\n  var selectedObjs = [];\n  selectionMap.forEach(function (subshape, shape) {\n    selectedObjs.push(shape);\n  });\n  return selectedObjs;\n}\n\nfunction _selectShape(selectedShape, sortedShapes, currSelectedShapes, selectStyle, xformStyle, selectOpts) {\n  var fireObject = {\n    unselectedShapes: getSelectedObjsFromMap(currSelectedShapes)\n  };\n  clearSelectedShapes(currSelectedShapes);\n  selectedShape.save();\n  var maxZ = sortedShapes[sortedShapes.length - 1].zIndex;\n  selectedShape.zIndex = maxZ + 1;\n  _basicStyle2.default.copyBasicStyle(selectStyle, selectedShape);\n  selectedShape.selected = true;\n  // const dimensions = selectedShape.getDimensions()\n\n  var newSelectShape = null;\n  if (selectOpts.scalable || selectOpts.rotatable) {\n    newSelectShape = new _xformShape2.default(xformStyle || defaultXformStyle, selectOpts);\n    selectedShape.addChildXform(newSelectShape);\n  }\n  currSelectedShapes.set(selectedShape, newSelectShape);\n\n  fireObject.selectedShapes = [selectedShape];\n  return fireObject;\n}\n\nfunction clearSelectedShapes(selectedShapeMap) {\n  selectedShapeMap.forEach(function (selectedShape, shape) {\n    shape.restore();\n    shape.selected = false;\n    shape.removeChildXform(selectedShape);\n  });\n  selectedShapeMap.clear();\n}\n\nfunction clearSpecificShapes(selectedShapeMap, shapes) {\n  var clearedShapes = [];\n  shapes.forEach(function (shape) {\n    var selectedShape = selectedShapeMap.get(shape);\n    shape.restore();\n    shape.selected = false;\n    shape.removeChildXform(selectedShape);\n    selectedShapeMap.delete(shape);\n    clearedShapes.push(shape);\n  });\n  return clearedShapes;\n}\n\nvar hideCursor = function hideCursor() {\n  var cursor = document.getElementById(\"cursor\");\n  if (cursor !== null) {\n    cursor.style.display = \"none\";\n  }\n};\n\nvar showCursor = function showCursor() {\n  var cursor = document.getElementById(\"cursor\");\n  if (cursor !== null) {\n    cursor.style.display = \"block\";\n  }\n};\n\nvar hideCursorWithPointer = function hideCursorWithPointer(e) {\n  e.target.parentNode.style.cursor = \"default\";\n  hideCursor();\n};\n\nvar showCursorWithPointer = function showCursorWithPointer(e) {\n  e.target.parentNode.style.cursor = \"none\";\n  showCursor();\n};\n\n// understands how to return mouse coordinates as an object in the format {x: <X-COORD>, y: <Y-COORD>}\n// accepts a mouse event and a DOM element as arguments\nfunction getMouseCoordinates(e, target) {\n  var canvas = document.querySelector(\"\" + (\"#\" + target.id + \" canvas\"));\n\n  var coords = {\n    x: e.offsetX + canvas.offsetLeft,\n    y: e.offsetY + canvas.offsetTop\n  };\n\n  return coords;\n}\n\n// understands how to append custom cursors to the DOM\n// accepts a mouse event, a DOM element, a cursorStyle, and pixel offsets as arguments\nfunction appendCustomCursor(_event, target, cursorStyle) {\n  var offsetX = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Constants.SVG_OFFSET;\n  var offsetY = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Constants.SVG_OFFSET;\n\n  var cursor = document.getElementById(\"cursor\");\n  var mouse = getMouseCoordinates(_event, target);\n\n  if (cursor === null) {\n    var newCursor = document.createElement(\"span\");\n    newCursor.setAttribute(\"id\", \"cursor\");\n    newCursor.setAttribute(\"style\", \"position: absolute; top: \" + (mouse.y + \"px\") + \"; left: \" + (mouse.x + \"px\") + \"; width: 28px; height: 28px; background: \" + cursorStyle + \"; cursor: none; z-index: 10; pointer-events: none; transform: translate(\" + offsetX + \"px, \" + offsetY + \"px)\");\n    target.appendChild(newCursor);\n  } else if (cursor.style.background === cursorStyle) {\n    updateCursorPosition(_event, target);\n  } else {\n    cursor.style.background = cursorStyle;\n    updateCursorPosition(_event, target);\n  }\n}\n\n// understands how to remove the custom cursor from the DOM\nfunction removeCustomCursor() {\n  var cursor = document.getElementById(\"cursor\");\n  if (cursor !== null) {\n    cursor.parentNode.removeChild(cursor);\n  }\n}\n\n// understands how to change the position of the custom cursor on the page\n// accepts a mouse event and a DOM element as arguments\nfunction updateCursorPosition(_event, target) {\n  var cursor = document.getElementById(\"cursor\");\n  var mouse = getMouseCoordinates(_event, target);\n\n  if (cursor !== null) {\n    cursor.style.top = \"\" + (mouse.y + \"px\");\n    cursor.style.left = \"\" + (mouse.x + \"px\");\n  }\n}\n\nvar ShapeBuilder = function (_DrawEngine) {\n  _inherits(ShapeBuilder, _DrawEngine);\n\n  function ShapeBuilder() {\n    _classCallCheck(this, ShapeBuilder);\n\n    return _possibleConstructorReturn(this, (ShapeBuilder.__proto__ || Object.getPrototypeOf(ShapeBuilder)).apply(this, arguments));\n  }\n\n  _createClass(ShapeBuilder, [{\n    key: \"_touchstartCB\",\n    value: function _touchstartCB(event) {\n      this._mousedownCB(event);\n    }\n  }, {\n    key: \"_touchmoveCB\",\n    value: function _touchmoveCB(event) {\n      this._mousemoveCB(event);\n    }\n  }, {\n    key: \"_touchendCB\",\n    value: function _touchendCB(event) {\n      this._mouseupCB(event);\n    }\n  }, {\n    key: \"_mousedownCB\",\n    value: function _mousedownCB(event) {\n      this.setDenyMouseEventFlag(event);\n      if (this.denyMouseEvent && !event.touches) {\n        return;\n      }\n      if (event.touches) {\n        event = getTouchCoordinates(event, this._drawCanvas);\n        this.previousEventObj = event; // Assign event obj to variable to avoid the use it for touchend event\n      }\n\n      if (!inCanvas(this._drawCanvas, event.clientX, event.clientY)) {\n        return;\n      }\n\n      this.timer = performance.now();\n\n      Point2d.set(tmpPt1, event.offsetX, event.offsetY);\n      Point2d.transformMat2d(tmpPt2, tmpPt1, this._camera.screenToWorldMatrix);\n      var worldToScreenMatrix = this._camera.worldToScreenMatrix;\n      var shapes = this.sortedShapes;\n      var i = -1;\n      var selectedShape = null;\n      var selectedInfo = null;\n      for (i = shapes.length - 1; i >= 0; i -= 1) {\n        var shapeInfo = this._objects.get(shapes[i]);\n        if (shapes[i].selected) {\n          selectedShape = this._selectedShapes.get(shapes[i]);\n          selectedInfo = shapeInfo;\n          var hitInfo = null;\n          if (selectedShape && (hitInfo = selectedShape.containsPoint(tmpPt1, tmpPt2, worldToScreenMatrix, this._drawCtx)).hit) {\n            if (selectedShape instanceof _vertEditableShape2.default && event.altKey && hitInfo.controlIndex < shapes[i].numVerts) {\n              shapes[i].removeVert(hitInfo.controlIndex);\n              selectedShape = null;\n            } else {\n              var localXform = selectedShape.parent.localXform;\n              var invLocalXform = _mat2d2.default.clone(localXform);\n              _mat2d2.default.invert(invLocalXform, invLocalXform);\n              var startObjPos = Point2d.clone(tmpPt2);\n              Point2d.transformMat2d(startObjPos, startObjPos, invLocalXform);\n              this._dragInfo = Object.assign({\n                rotate: Boolean(hitInfo.rotate),\n                controlIndex: hitInfo.controlIndex,\n                startObjectPos: startObjPos,\n                worldToObjectMatrix: invLocalXform,\n                startLocalPos: selectedShape.parent.getPosition(),\n                startLocalScale: selectedShape.parent.getScale(),\n                startLocalRot: selectedShape.parent.getRotation(),\n                shapeWidth: selectedShape.parent.width,\n                shapeHeight: selectedShape.parent.height\n              }, selectedInfo);\n            }\n            break;\n          } else if (shapes[i].containsPoint(tmpPt1, tmpPt2, worldToScreenMatrix, this._drawCtx)) {\n            selectedShape = shapes[i];\n            break;\n          }\n        }\n        // else if (shapeInfo.selectable && shapes[i].containsPoint(tmpPt1, tmpPt2, worldToScreenMatrix, this._drawCtx)) {\n        //   selectedShape = shapes[i]\n        //   selectedInfo = shapeInfo\n        //   const selectEventObj = selectShape(selectedShape, shapes, this._selectedShapes, this._selectStyle, this._xformStyle, selectedInfo)\n        //   this.fire(EventConstants.SELECTION_CHANGED, selectEventObj)\n        //   break\n        // }\n      }\n\n      if (i < 0 && this._selectedShapes.size) {\n        if (this._selectedShapes.size) {\n          this.fire(EventConstants.SELECTION_CHANGED, {\n            unselectedShapes: getSelectedObjsFromMap(this._selectedShapes),\n            selectedShapes: []\n          });\n        }\n        this._dragInfo = null;\n        clearSelectedShapes(this._selectedShapes);\n      } else if (selectedShape && selectedInfo && (selectedInfo.movable || selectedInfo.rotatable || selectedInfo.scalable)) {\n        var canvas = document.querySelector(\"\" + (\"#\" + this._parent.id + \" > canvas\"));\n        if (canvas === null) {\n          this._parent.addEventListener(\"mouseout\", hideCursor);\n          this._parent.addEventListener(\"mouseover\", showCursor);\n        } else {\n          canvas.addEventListener(\"mouseout\", hideCursorWithPointer);\n          canvas.addEventListener(\"mouseover\", showCursorWithPointer);\n        }\n        if (!this._dragInfo && selectedInfo.movable) {\n          this._dragInfo = {\n            startLocalPos: selectedShape.getPosition()\n          };\n        }\n\n        if (this._dragInfo) {\n          this._dragInfo.shape = selectedShape;\n          this._dragInfo.startPos = Point2d.clone(tmpPt1);\n          this._dragInfo.startWorldPos = Point2d.clone(tmpPt2);\n          this._dragInfo.objectToWorldMatrix = _mat2d2.default.clone(selectedShape.globalXform);\n          addEventKeysToSelectedInfo(event, this._dragInfo);\n          event.stopImmediatePropagation();\n          this.fire(EventConstants.DRAG_BEGIN, {\n            shapes: getSelectedObjsFromMap(this._selectedShapes)\n          });\n        }\n        if (!event.touches) {\n          event.preventDefault();\n        }\n      }\n    }\n  }, {\n    key: \"_mouseupCB\",\n    value: function _mouseupCB(event) {\n      if (this.denyMouseEvent && !event.touches) {\n        this.setDenyMouseEventFlag(event);\n        return; // Returning on next line to avoid ESLint error\n      }\n      if (event.touches) {\n        // Use previously assigned event obj to get the offsetX & Y and clientX & Y calculation\n        event = this.previousEventObj;\n      }\n\n      if (this._dragInfo && this._dragInfo.shape) {\n        event.stopImmediatePropagation();\n        if (event.cancelable) {\n          event.preventDefault();\n        }\n        var canvas = document.querySelector(\"\" + (\"#\" + this._parent.id + \" > canvas\"));\n        if (canvas === null) {\n          this._parent.removeEventListener(\"mouseout\", hideCursor);\n          this._parent.removeEventListener(\"mouseover\", showCursor);\n        } else {\n          canvas.removeEventListener(\"mouseout\", hideCursorWithPointer);\n          canvas.removeEventListener(\"mouseover\", showCursorWithPointer);\n        }\n        this._dragInfo = null;\n        this.fire(EventConstants.DRAG_END, {\n          shapes: getSelectedObjsFromMap(this._selectedShapes)\n        });\n      } else if (performance.now() - this.timer < Constants.QUICK_CLICK_TIME) {\n        // this is a relatively quick click\n        Point2d.set(tmpPt1, event.offsetX, event.offsetY);\n        Point2d.transformMat2d(tmpPt2, tmpPt1, this._camera.screenToWorldMatrix);\n        var worldToScreenMatrix = this._camera.worldToScreenMatrix;\n        var shapes = this.sortedShapes;\n        var selectedShape = null;\n        var selectedInfo = null;\n        for (var i = shapes.length - 1; i >= 0; i -= 1) {\n          selectedInfo = this._objects.get(shapes[i]);\n          if (selectedInfo.selectable && shapes[i].containsPoint(tmpPt1, tmpPt2, worldToScreenMatrix, this._drawCtx)) {\n            selectedShape = shapes[i];\n            break;\n          }\n        }\n        if (selectedShape && !selectedShape.selected) {\n          var selectEventObj = _selectShape(selectedShape, shapes, this._selectedShapes, this._selectStyle, this._xformStyle, selectedInfo);\n          this.fire(EventConstants.SELECTION_CHANGED, selectEventObj);\n        } else {\n          // If user clicks anywhere outside then allow the movement of Base Map (Parents Container)\n          this._makeParentElementMovable();\n        }\n      }\n      // Added Support for Double click\n      if (event.touches) {\n        if (event.cancelable) {\n          event.preventDefault();\n        }\n        if (Date.now() - this.firstTapTime < DOUBLE_CLICK_DELAY) {\n          this._dblclickCB(event);\n        }\n      }\n      this.firstTapTime = Date.now();\n    }\n  }, {\n    key: \"_mousemoveCB\",\n    value: function _mousemoveCB(event) {\n      this.setDenyMouseEventFlag(event);\n      if (this.denyMouseEvent && !event.touches) {\n        return;\n      }\n\n      if (event.touches) {\n        event = getTouchCoordinates(event, this._drawCanvas);\n        this.previousEventObj = event; // Assign event obj to variable to avoid the use it for touchend event\n      }\n\n      if (!inCanvas(this._drawCanvas, event.clientX, event.clientY) && !this._dragInfo) {\n        return;\n      }\n\n      if (this._dragInfo && this._dragInfo.shape) {\n        updateCursorPosition(event, this._parent);\n        addEventKeysToSelectedInfo(event, this._dragInfo);\n        transformSelectedShape(this._drawCanvas, event, this._dragInfo, this._camera);\n        event.stopImmediatePropagation();\n        if (!event.touches) {\n          event.preventDefault();\n        }\n      } else if (!event.buttons && this._selectedShapes.size) {\n        Point2d.set(tmpPt1, event.offsetX, event.offsetY);\n        Point2d.transformMat2d(tmpPt2, tmpPt1, this._camera.screenToWorldMatrix);\n        var worldToScreenMatrix = this._camera.worldToScreenMatrix;\n        var shapes = this.sortedShapes;\n        var i = 0;\n        var flipy = this._camera.isYFlipped();\n        for (i = shapes.length - 1; i >= 0; i -= 1) {\n          if (shapes[i].selected) {\n            var selectInfo = this._objects.get(shapes[i]);\n            var selectedShape = this._selectedShapes.get(shapes[i]);\n            var hitInfo = null;\n            this._parent.style.cursor = \"none\";\n            // forEach not supported on nodelist in IE/Edge\n            for (var j = 0; j < this._parent.childNodes.length; j += 1) {\n              this._parent.childNodes[j].style.cursor = \"none\";\n              if (this._parent.childNodes[j].nodeName.toLowerCase() !== \"canvas\") {\n                this._parent.childNodes[j].style.pointerEvents = \"none\";\n              }\n            }\n            if (selectedShape && (hitInfo = selectedShape.containsPoint(tmpPt1, tmpPt2, worldToScreenMatrix, this._drawCtx)).hit) {\n              if (selectedShape instanceof _xformShape2.default) {\n                if (hitInfo.rotate) {\n                  var degrees = shapes[i].getRotation();\n                  if (flipy) {\n                    degrees *= -1;\n                    if (hitInfo.controlIndex === 1) {\n                      degrees -= Constants.RIGHT_ANGLE;\n                    } else if (hitInfo.controlIndex === 0) {\n                      degrees += Constants.STRAIGHT_ANGLE;\n                    } else if (hitInfo.controlIndex === 2) {\n                      degrees += Constants.RIGHT_ANGLE;\n                    }\n                  } else if (hitInfo.controlIndex === 0) {\n                    degrees -= Constants.RIGHT_ANGLE;\n                  } else if (hitInfo.controlIndex === 1) {\n                    degrees += Constants.STRAIGHT_ANGLE;\n                  } else if (hitInfo.controlIndex === 3) {\n                    // eslint-disable-line no-magic-numbers\n                    degrees += Constants.RIGHT_ANGLE;\n                  }\n                  appendCustomCursor(event, this._parent, \"\" + rotateSvg.replace(/<degrees>/g, \"\" + degrees));\n                } else if (hitInfo.controlIndex < 4) {\n                  // eslint-disable-line no-magic-numbers\n                  if (hitInfo.controlIndex === 0 || hitInfo.controlIndex === 3) {\n                    // eslint-disable-line no-magic-numbers\n                    appendCustomCursor(event, this._parent, \"\" + scaleSvg.replace(/<degrees>/g, \"\" + (-shapes[i].getRotation() - Constants.FORTY_FIVE_ANGLE)));\n                  } else if (hitInfo.controlIndex === 1 || hitInfo.controlIndex === 2) {\n                    appendCustomCursor(event, this._parent, \"\" + scaleSvg.replace(/<degrees>/g, \"\" + (-shapes[i].getRotation() + Constants.FORTY_FIVE_ANGLE)));\n                  }\n                } else if (hitInfo.controlIndex % 2 === 0) {\n                  appendCustomCursor(event, this._parent, \"\" + scaleSvg.replace(/<degrees>/g, \"\" + -shapes[i].getRotation()));\n                } else {\n                  appendCustomCursor(event, this._parent, \"\" + scaleSvg.replace(/<degrees>/g, \"\" + (-shapes[i].getRotation() + Constants.RIGHT_ANGLE)));\n                }\n              } else if (selectedShape instanceof _vertEditableShape2.default) {\n                this._parent.style.cursor = \"none\";\n                // forEach not supported on nodelist in IE/Edge\n                for (var _j = 0; _j < this._parent.childNodes.length; _j += 1) {\n                  this._parent.childNodes[_j].style.cursor = \"none\";\n                  if (this._parent.childNodes[_j].nodeName.toLowerCase() !== \"canvas\") {\n                    this._parent.childNodes[_j].style.pointerEvents = \"none\";\n                  }\n                }\n                if (hitInfo.controlIndex >= shapes[i].numVerts) {\n                  appendCustomCursor(event, this._parent, addSvg, -8, -6); // eslint-disable-line no-magic-numbers\n                } else if (event.altKey) {\n                  appendCustomCursor(event, this._parent, removeSvg, -8, -6); // eslint-disable-line no-magic-numbers\n                } else {\n                  appendCustomCursor(event, this._parent, repositionSvg, Constants.SVG_OFFSET, Constants.SVG_OFFSET);\n                }\n              }\n              event.stopImmediatePropagation();\n              event.preventDefault();\n              break;\n            } else if (shapes[i].containsPoint(tmpPt1, tmpPt2, worldToScreenMatrix, this._drawCtx)) {\n              if (selectInfo && selectInfo.movable) {\n                var cursor = document.getElementById(\"cursor\");\n                if (cursor !== null) {\n                  cursor.parentNode.removeChild(cursor);\n                }\n                this._parent.style.cursor = \"move\";\n                for (var _j2 = 0; _j2 < this._parent.childNodes.length; _j2 += 1) {\n                  this._parent.childNodes[_j2].style.cursor = \"move\";\n                }\n                event.stopImmediatePropagation();\n                event.preventDefault();\n              }\n              break;\n            }\n          }\n        }\n\n        if (i < 0) {\n          removeCustomCursor();\n          this._parent.style.cursor = \"default\";\n          // forEach not supported on nodelist in IE/Edge\n          for (var _j3 = 0; _j3 < this._parent.childNodes.length; _j3 += 1) {\n            this._parent.childNodes[_j3].style.cursor = \"default\";\n            if (this._parent.childNodes[_j3].nodeName.toLowerCase() !== \"canvas\") {\n              this._parent.childNodes[_j3].style.pointerEvents = \"auto\";\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_clickCB\",\n    value: function _clickCB() {\n      // noop\n    }\n  }, {\n    key: \"_dblclickCB\",\n    value: function _dblclickCB(event) {\n      if (!inCanvas(this._drawCanvas, event.clientX, event.clientY)) {\n        return;\n      }\n\n      Point2d.set(tmpPt1, event.offsetX, event.offsetY);\n      Point2d.transformMat2d(tmpPt2, tmpPt1, this._camera.screenToWorldMatrix);\n      var worldToScreenMatrix = this._camera.worldToScreenMatrix;\n      var shapes = this.sortedShapes;\n      var i = -1;\n      for (i = shapes.length - 1; i >= 0; i -= 1) {\n        var shapeInfo = this._objects.get(shapes[i]);\n        if (shapeInfo.selectable && shapes[i].containsPoint(tmpPt1, tmpPt2, worldToScreenMatrix, this._drawCtx)) {\n          if (shapeInfo.editable && shapes[i] instanceof _polyLine2.default) {\n            var selectedShape = shapes[i];\n            var doXform = false;\n            if (shapes[i].selected) {\n              var interactiveShape = this._selectedShapes.get(shapes[i]);\n              if (interactiveShape) {\n                selectedShape.restore();\n                selectedShape.removeChildXform(interactiveShape);\n                doXform = !(interactiveShape instanceof _xformShape2.default);\n              }\n            }\n\n            selectedShape.selected = true;\n            selectedShape.save();\n            var maxZ = shapes[shapes.length - 1].zIndex;\n            selectedShape.zIndex = maxZ + 1;\n            _basicStyle2.default.copyBasicStyle(this._selectStyle, selectedShape);\n            var newSelectShape = null;\n            if (doXform) {\n              if (shapeInfo.rotatable || shapeInfo.scalable) {\n                newSelectShape = new _xformShape2.default(this._xformStyle || defaultXformStyle, shapeInfo);\n                selectedShape.addChildXform(newSelectShape);\n              }\n            } else {\n              newSelectShape = new _vertEditableShape2.default(selectedShape, this._xformStyle);\n              selectedShape.addChildXform(newSelectShape);\n            }\n            this._selectedShapes.set(selectedShape, newSelectShape);\n          } else if (!shapes[i].selected) {\n            var selectEventObj = _selectShape(shapes[i], shapes, this._selectedShapes, this._selectStyle, this._xformStyle, shapeInfo);\n            this.fire(EventConstants.SELECTION_CHANGED, selectEventObj);\n          }\n          break;\n        }\n      }\n\n      if (i < 0 && this._selectedShapes.size) {\n        if (this._selectedShapes.size) {\n          this.fire(EventConstants.SELECTION_CHANGED, {\n            unselectedShapes: getSelectedObjsFromMap(this._selectedShapes),\n            selectedShapes: []\n          });\n        }\n        this._dragInfo = null;\n        clearSelectedShapes(this._selectedShapes);\n      } else {\n        event.stopImmediatePropagation();\n      }\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"_mouseoverCB\",\n    value: function _mouseoverCB() {\n      // noop\n    }\n  }, {\n    key: \"_mouseoutCB\",\n    value: function _mouseoutCB() {\n      // noop\n    }\n  }, {\n    key: \"_init\",\n    value: function _init(parent, opts) {\n      this._activated = opts && opts.enableInteractions;\n      _get(ShapeBuilder.prototype.__proto__ || Object.getPrototypeOf(ShapeBuilder.prototype), \"_init\", this).call(this, parent, opts, this._activated);\n      var myevents = Object.getOwnPropertyNames(EventConstants).map(function (event) {\n        return EventConstants[event];\n      });\n      this.registerEvents(myevents);\n      this._dragInfo = null;\n      this._selectedShapes = new Map();\n      this._selectStyle = new _basicStyle2.default(opts && opts.selectStyle ? opts.selectStyle : {\n        fillColor: \"orange\"\n      });\n\n      this._xformStyle = new _basicStyle2.default(opts && opts.xformStyle ? opts.xformStyle : {\n        fillColor: \"white\",\n        strokeColor: \"black\",\n        strokeWidth: 2\n      });\n\n      this.timer = 0;\n    }\n\n    // This function allow the movement of Parent Container (In our case it is Map) when user clicks anywhere on Map except on Shape\n    // As well as it's changes the icon of mouse for Desktop devices\n\n  }, {\n    key: \"_makeParentElementMovable\",\n    value: function _makeParentElementMovable() {\n      removeCustomCursor();\n      this._parent.style.cursor = \"default\"; // Change the Cursor icon for desktop device\n      for (var j = 0; j < this._parent.childNodes.length; j += 1) {\n        this._parent.childNodes[j].style.cursor = \"default\"; // Change the Cursor icon for desktop device\n        if (this._parent.childNodes[j].nodeName.toLowerCase() !== \"canvas\") {\n          this._parent.childNodes[j].style.pointerEvents = \"auto\"; // Allow movemnet of parent container i.e Map\n        }\n      }\n    }\n  }, {\n    key: \"_renderShapes\",\n    value: function _renderShapes(ctx, drawShapes, camera) {\n      var _this2 = this;\n\n      var worldToScreenMat = camera.worldToScreenMatrix;\n      drawShapes.forEach(function (shape) {\n        if (shape.visible) {\n          shape.render(ctx, worldToScreenMat, _this2._styleState);\n          // shape.renderBounds(ctx, worldToScreenMat, boundsStrokeStyle)\n          if (shape.selected) {\n            var interacShape = _this2._selectedShapes.get(shape);\n            if (interacShape) {\n              interacShape.render(ctx, worldToScreenMat, _this2._styleState);\n              // interacShape.renderBounds(ctx, worldToScreenMat, boundsStrokeStyle)\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"selectShape\",\n    value: function selectShape(shape) {\n      var shapeInfo = this._objects.get(shape);\n      if (shapeInfo && shapeInfo.selectable) {\n        var selectEventObj = _selectShape(shape, this.sortedShapes, this._selectedShapes, this._selectStyle, this._xformStyle, shapeInfo);\n        this.fire(EventConstants.SELECTION_CHANGED, selectEventObj);\n      }\n    }\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      if (this._selectedShapes.size) {\n        var selectedShapes = getSelectedObjsFromMap(this._selectedShapes);\n        clearSelectedShapes(this._selectedShapes);\n        this.fire(EventConstants.SELECTION_CHANGED, {\n          unselectedShapes: selectedShapes,\n          selectedShapes: []\n        });\n        this._rerenderCb();\n      }\n    }\n  }, {\n    key: \"addShape\",\n    value: function addShape(shape) {\n      var _this3 = this;\n\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var select = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      var shapes = shape;\n      if (!Array.isArray(shapes)) {\n        shapes = [shape];\n      }\n\n      _get(ShapeBuilder.prototype.__proto__ || Object.getPrototypeOf(ShapeBuilder.prototype), \"addShape\", this).call(this, shapes);\n      shapes.forEach(function (newShape) {\n        var shapeInfo = _this3._objects.get(newShape);\n        if (shapeInfo) {\n          shapeInfo.selectable = opts && typeof opts.selectable !== \"undefined\" ? Boolean(opts.selectable) : true;\n          shapeInfo.movable = opts && typeof opts.movable !== \"undefined\" ? Boolean(opts.movable) : true;\n          shapeInfo.rotatable = opts && typeof opts.rotatable !== \"undefined\" ? Boolean(opts.rotatable) : true;\n          shapeInfo.scalable = opts && typeof opts.scalable !== \"undefined\" ? Boolean(opts.scalable) : true;\n          shapeInfo.uniformScaleOnly = opts && typeof opts.uniformScaleOnly !== \"undefined\" ? Boolean(opts.uniformScaleOnly) : false;\n          shapeInfo.centerScaleOnly = opts && typeof opts.centerScaleOnly !== \"undefined\" ? Boolean(opts.centerScaleOnly) : false;\n          shapeInfo.editable = opts && typeof opts.editable !== \"undefined\" ? Boolean(opts.editable) : true;\n        }\n      });\n\n      if (select) {\n        var selectEventObj = {\n          unselectedShapes: getSelectedObjsFromMap(this._selectedShapes)\n        };\n        var selectedShapes = [];\n        shapes.forEach(function (newShape) {\n          var shapeInfo = _this3._objects.get(newShape);\n          if (shapeInfo.selectable) {\n            _selectShape(newShape, _this3.sortedShapes, _this3._selectedShapes, _this3._selectStyle, _this3._xformStyle, shapeInfo);\n            selectedShapes.push(newShape);\n          }\n        });\n\n        if (selectedShapes.length) {\n          selectEventObj.selectedShapes = selectedShapes;\n          this.fire(EventConstants.SELECTION_CHANGED, selectEventObj);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"deleteShape\",\n    value: function deleteShape(shape) {\n      var shapes = shape;\n      if (!Array.isArray(shapes)) {\n        shapes = [shape];\n      }\n      var selectClearedShapes = clearSpecificShapes(this._selectedShapes, shapes);\n      this.fire(EventConstants.SELECTION_CHANGED, {\n        unselectedShapes: selectClearedShapes,\n        selectedShapes: getSelectedObjsFromMap(this._selectedShapes)\n      });\n\n      removeCustomCursor();\n      this._parent.style.cursor = \"default\";\n      // forEach not supported on nodelist in IE/Edge\n      for (var j = 0; j < this._parent.childNodes.length; j += 1) {\n        this._parent.childNodes[j].style.cursor = \"default\";\n        this._parent.childNodes[j].style.pointerEvents = \"auto\";\n      }\n\n      return _get(ShapeBuilder.prototype.__proto__ || Object.getPrototypeOf(ShapeBuilder.prototype), \"deleteShape\", this).call(this, shapes);\n    }\n  }, {\n    key: \"deleteSelectedShapes\",\n    value: function deleteSelectedShapes() {\n      var selectedShapes = getSelectedObjsFromMap(this._selectedShapes);\n      clearSelectedShapes(this._selectedShapes);\n      this.fire(EventConstants.SELECTION_CHANGED, {\n        unselectedShapes: selectedShapes,\n        selectedShapes: []\n      });\n\n      removeCustomCursor();\n      this._parent.style.cursor = \"default\";\n      // forEach not supported on nodelist in IE/Edge\n      for (var j = 0; j < this._parent.childNodes.length; j += 1) {\n        this._parent.childNodes[j].style.cursor = \"default\";\n        this._parent.childNodes[j].style.pointerEvents = \"auto\";\n      }\n\n      return _get(ShapeBuilder.prototype.__proto__ || Object.getPrototypeOf(ShapeBuilder.prototype), \"deleteShape\", this).call(this, selectedShapes);\n    }\n  }, {\n    key: \"enableInteractions\",\n    value: function enableInteractions() {\n      this._enableEvents();\n      this._activated = true;\n      return this;\n    }\n  }, {\n    key: \"disableInteractions\",\n    value: function disableInteractions() {\n      var clearSelection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (clearSelection) {\n        this.clearSelection();\n      }\n      this._disableEvents();\n      this._activated = false;\n      return this;\n    }\n\n    // This method is used to stop Mouse Event propagation Triggered from the Touch event\n\n  }, {\n    key: \"setDenyMouseEventFlag\",\n    value: function setDenyMouseEventFlag(event) {\n      if (event.touches) {\n        this.denyMouseEvent = true;\n      } else if (event.type === EventsTypes.MOUSEUP) {\n        // set the Flag false at the end of mouse event i.e on MouseUp Event\n        this.denyMouseEvent = false;\n      }\n    }\n  }, {\n    key: \"selectStyle\",\n    set: function set(selectStyle) {\n      _basicStyle2.default.copyBasicStyle(selectStyle, this._selectStyle);\n    },\n    get: function get() {\n      return this._selectStyle;\n    }\n  }, {\n    key: \"selectedShapes\",\n    get: function get() {\n      return getSelectedObjsFromMap(this._selectedShapes);\n    }\n  }, {\n    key: \"interactionsEnabled\",\n    get: function get() {\n      return this._activated;\n    }\n  }]);\n\n  return ShapeBuilder;\n}(_drawEngine2.default);\n\nexports.default = ShapeBuilder;\n\n\nObject.assign(EventConstants, _drawEngine2.default.EventConstants);\nShapeBuilder.EventConstants = EventConstants;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/* eslint-disable no-magic-numbers */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformXformShape = transformXformShape;\nexports.translateShape = translateShape;\nexports.translateVert = translateVert;\n\nvar _point2d = __webpack_require__(3);\n\nvar Point2d = _interopRequireWildcard(_point2d);\n\nvar _mat2d = __webpack_require__(4);\n\nvar _mat2d2 = _interopRequireDefault(_mat2d);\n\nvar _vec2d = __webpack_require__(9);\n\nvar _vec2d2 = _interopRequireDefault(_vec2d);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction rotateOBBox(shape, parentShape, selectedInfo, screenPos, worldPos) {\n  var pt = [0, 0];\n  var scale = [0, 0];\n  _mat2d2.default.svd(pt, scale, null, selectedInfo.objectToWorldMatrix);\n  var startDir = [0, 0];\n  Point2d.sub(startDir, selectedInfo.startWorldPos, pt);\n  _vec2d2.default.normalize(startDir, startDir);\n  var dir = pt;\n  Point2d.sub(dir, worldPos, pt);\n  _vec2d2.default.normalize(dir, dir);\n  var angle = _vec2d2.default.angle(startDir, dir);\n\n  if (selectedInfo.keys.shiftKey) {\n    angle = Math.round(angle / Math.QUATER_PI) * Math.QUATER_PI;\n  }\n\n  // if (!camera.isYFlipped()) {\n  //   angle *= -1\n  // }\n\n  parentShape.setRotation(selectedInfo.startLocalRot + Math.RAD_TO_DEG * angle);\n}\n\nfunction transformXformShape(shape, selectedInfo, screenPos, worldPos, camera) {\n  var parentShape = shape.parent;\n  var objPos = [0, 0];\n  var deltaPos = [0, 0];\n  var deltaDims = [0, 0];\n\n  if (selectedInfo.rotate) {\n    rotateOBBox(shape, parentShape, selectedInfo, screenPos, worldPos, camera);\n    return;\n  }\n\n  var uniformScale = selectedInfo.keys.shiftKey || selectedInfo.uniformScaleOnly;\n  var centerScale = selectedInfo.keys.altKey || selectedInfo.centerScaleOnly;\n\n  // get the position of the shape at start of transform\n  var pt = [0, 0];\n  _mat2d2.default.svd(pt, null, null, selectedInfo.objectToWorldMatrix);\n\n  // get the mouse delta in world space\n  _vec2d2.default.sub(deltaPos, worldPos, selectedInfo.startWorldPos);\n\n  if (uniformScale && selectedInfo.controlIndex < 4) {\n    var xAxisDir = [selectedInfo.objectToWorldMatrix[0], selectedInfo.objectToWorldMatrix[1]];\n    var yAxisDir = [selectedInfo.objectToWorldMatrix[2], selectedInfo.objectToWorldMatrix[3]];\n    var diagDir = [0, 0];\n\n    if (selectedInfo.controlIndex < 2) {\n      _vec2d2.default.negate(xAxisDir, xAxisDir);\n    }\n    if (selectedInfo.controlIndex % 2 === 0) {\n      _vec2d2.default.negate(yAxisDir, yAxisDir);\n    }\n\n    _vec2d2.default.normalize(xAxisDir, xAxisDir);\n    _vec2d2.default.normalize(yAxisDir, yAxisDir);\n\n    _vec2d2.default.add(diagDir, xAxisDir, yAxisDir);\n    _vec2d2.default.normalize(diagDir, diagDir);\n\n    var cross = _vec2d2.default.cross2d(deltaPos, diagDir);\n    var axisToUse = null;\n    if (selectedInfo.controlIndex === 0 || selectedInfo.controlIndex === 3) {\n      axisToUse = yAxisDir;\n      if (cross < 0) {\n        axisToUse = xAxisDir;\n      }\n    } else {\n      axisToUse = xAxisDir;\n      if (cross < 0) {\n        axisToUse = yAxisDir;\n      }\n    }\n    var mindist = _vec2d2.default.dot(deltaPos, axisToUse);\n    mindist = Math.sign(mindist) * Math.sqrt(2 * mindist * mindist);\n    _vec2d2.default.scale(deltaPos, diagDir, mindist);\n    Point2d.addVec2(worldPos, selectedInfo.startWorldPos, deltaPos);\n  }\n\n  // first convert world point to object space\n  Point2d.copy(objPos, worldPos);\n  Point2d.transformMat2d(objPos, objPos, selectedInfo.worldToObjectMatrix);\n\n  // get the mouse delta in object space and multipy by the\n  // scale of the selected object at the start of the transform\n  // to get the scale delta in object space\n  _vec2d2.default.sub(deltaDims, objPos, selectedInfo.startObjectPos);\n\n  Point2d.copy(pt, selectedInfo.startLocalPos);\n\n  // now determine the transform direction depending\n  // on which control vertex of the object-oriented bounds\n  // was selected\n  var xScale = 0;\n  var yScale = 0;\n  if (selectedInfo.controlIndex < 4) {\n    // dragging a corner vertex\n    xScale = selectedInfo.controlIndex < 2 ? -1 : 1;\n    yScale = selectedInfo.controlIndex % 2 === 0 ? -1 : 1;\n\n    // can translate based on the mouse delta in world space\n    // This is done to offset the scale, which is done at\n    // the shape's center. This ultimately acts as a pivot\n    // for the transformation. Only do this if the alt key\n    // isn't pressed\n    if (!centerScale) {\n      Point2d.addVec2(pt, pt, _vec2d2.default.scale(deltaPos, deltaPos, 0.5));\n    }\n\n    parentShape.setPosition(pt);\n  } else {\n    // dragging a side vertex, which means we only scale in\n    // one dimension, rather than 2. So we need to figure\n    // out that direction based on the orientation of the\n    // shape\n    var idx = selectedInfo.controlIndex - 4;\n    var axisDir = [0, 0];\n    if (idx % 2 === 0) {\n      // scaling in the object's X direction\n      _vec2d2.default.set(axisDir, selectedInfo.objectToWorldMatrix[0], selectedInfo.objectToWorldMatrix[1]);\n      yScale = 0;\n      xScale = idx < 2 ? -1 : 1;\n      if (uniformScale) {\n        yScale = xScale;\n        deltaDims[1] = deltaDims[0];\n      }\n    } else {\n      // scaling in the object's Y direction\n      _vec2d2.default.set(axisDir, selectedInfo.objectToWorldMatrix[2], selectedInfo.objectToWorldMatrix[3]);\n      xScale = 0;\n      yScale = idx < 2 ? -1 : 1;\n      if (uniformScale) {\n        xScale = yScale;\n        deltaDims[0] = deltaDims[1];\n      }\n    }\n\n    // now find the pivot offset for the axis-aligned scale\n    if (!centerScale) {\n      _vec2d2.default.normalize(axisDir, axisDir);\n      _vec2d2.default.scale(axisDir, axisDir, _vec2d2.default.dot(deltaPos, axisDir));\n      Point2d.addVec2(pt, pt, _vec2d2.default.scale(axisDir, axisDir, 0.5));\n    }\n\n    parentShape.setPosition(pt);\n  }\n\n  if (centerScale) {\n    xScale *= 2;\n    yScale *= 2;\n  }\n\n  // perform the scale\n  parentShape.setScale([selectedInfo.startLocalScale[0] * (1 + xScale * deltaDims[0] / selectedInfo.shapeWidth), selectedInfo.startLocalScale[1] * (1 + yScale * deltaDims[1] / selectedInfo.shapeHeight)]);\n}\n\nfunction translateShape(shape, selectedInfo, screenPos, worldPos, camera) {\n  var diff = [0, 0];\n  var pt = [0, 0];\n  _mat2d2.default.svd(pt, null, null, selectedInfo.objectToWorldMatrix);\n  if (selectedInfo.keys.shiftKey) {\n    Point2d.sub(diff, screenPos, selectedInfo.startPos);\n    var angle = Math.atan2(diff[1], diff[0]);\n    angle = Math.round(angle / Math.QUATER_PI) * Math.QUATER_PI;\n    var transformDir = [Math.cos(angle), Math.sin(angle)];\n    _vec2d2.default.scale(diff, transformDir, _vec2d2.default.dot(diff, transformDir));\n    _vec2d2.default.transformMat2(diff, diff, camera.screenToWorldMatrix);\n  } else {\n    _vec2d2.default.sub(diff, worldPos, selectedInfo.startWorldPos);\n  }\n  Point2d.addVec2(pt, selectedInfo.startLocalPos, diff);\n\n  shape.setPosition(pt);\n}\n\nfunction translateVert(shape, selectedInfo, screenPos, worldPos) {\n  var parentShape = shape.parent;\n\n  // get the position of the shape at start of transform\n  // const pt = [0, 0]\n  // Mat2d.svd(pt, null, null, selectedInfo.objectToWorldMatrix)\n\n  // get the mouse delta in world space\n  // Vec2d.sub(deltaPos, worldPos, selectedInfo.startWorldPos)\n\n  // first convert world point to object space\n  // Point2d.copy(objPos, worldPos)\n  // Point2d.transformMat2d(objPos, objPos, selectedInfo.worldToObjectMatrix)\n\n  // get the diff\n  // const diff = objPos\n  // Point2d.sub(diff, objPos, selectedInfo.startObjectPos)\n\n  var numVerts = parentShape.numVerts;\n  if (selectedInfo.controlIndex >= numVerts) {\n    var idx1 = Math.min(selectedInfo.controlIndex - numVerts, numVerts - 1);\n    var idx2 = idx1 === numVerts - 1 ? 0 : idx1 + 1;\n    var pt = [0, 0];\n    var pt1 = [0, 0];\n    var pt2 = [0, 0];\n    var vec = [0, 0];\n    var verts = parentShape.vertsRef;\n    var xform = parentShape.globalXform;\n    Point2d.transformMat2d(pt1, verts[idx1], xform);\n    Point2d.transformMat2d(pt2, verts[idx2], xform);\n    Point2d.sub(vec, pt2, pt1);\n    _vec2d2.default.scale(vec, vec, 0.5);\n    Point2d.addVec2(pt, pt1, vec);\n    selectedInfo.controlIndex = parentShape.insertVert(idx1 + 1, pt);\n  } else {\n    parentShape.setVertPosition(selectedInfo.controlIndex, worldPos);\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/* eslint-disable no-magic-numbers */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _aabox2d = __webpack_require__(2);\n\nvar AABox2d = _interopRequireWildcard(_aabox2d);\n\nvar _point2d = __webpack_require__(3);\n\nvar Point2d = _interopRequireWildcard(_point2d);\n\nvar _glMatrix = __webpack_require__(1);\n\nvar _baseShape = __webpack_require__(6);\n\nvar _baseShape2 = _interopRequireDefault(_baseShape);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar VertEditableShape = function (_BaseShape) {\n  _inherits(VertEditableShape, _BaseShape);\n\n  function VertEditableShape(baseVertShape, opts) {\n    _classCallCheck(this, VertEditableShape);\n\n    var _this = _possibleConstructorReturn(this, (VertEditableShape.__proto__ || Object.getPrototypeOf(VertEditableShape)).call(this, opts));\n\n    _this._baseVertShape = baseVertShape;\n    _this._vertRadius = 4;\n    _this._transformedVerts = [];\n    _this._baseaabox = AABox2d.create();\n    _this._worldToScreenMatrix = _glMatrix.mat2d.create();\n    return _this;\n  }\n\n  _createClass(VertEditableShape, [{\n    key: \"_updateAABox\",\n    value: function _updateAABox(worldToScreenMatrix) {\n      var aabox = this._baseVertShape.aabox;\n      if (!AABox2d.equals(aabox, this._baseaabox) || !_glMatrix.mat2d.equals(worldToScreenMatrix, this._worldToScreenMatrix)) {\n        AABox2d.copy(this._baseaabox, aabox);\n        _glMatrix.mat2d.copy(this._worldToScreenMatrix, worldToScreenMatrix);\n        AABox2d.transformMat2d(this._aabox, this._baseaabox, this._worldToScreenMatrix);\n        var pad = this._vertRadius + this.strokeWidth;\n        AABox2d.expand(this._aabox, this._aabox, [pad, pad]);\n      }\n    }\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(screenPt, worldPt, worldToScreenMatrix, ctx) {\n      // Should we update here, or is it safe to\n      // say that this is stateful, meaning a render\n      // should have been performed beforehand which\n      // would've updated its state\n      var rtnObj = {\n        hit: false,\n        controlIndex: -1\n      };\n\n      this._updateAABox(worldToScreenMatrix);\n      if (this.visible && AABox2d.containsPt(this._aabox, screenPt)) {\n        var aabox = AABox2d.create();\n        var pad = this._vertRadius + this.strokeWidth / 2;\n        var extents = [pad, pad];\n\n        var i = 0;\n        for (i = 0; i < this._transformedVerts.length; i += 1) {\n          AABox2d.initCenterExtents(aabox, this._transformedVerts[i], extents);\n          if (AABox2d.containsPt(aabox, screenPt)) {\n            rtnObj.hit = true;\n            rtnObj.controlIndex = i;\n            break;\n          }\n        }\n\n        if (!rtnObj.hit) {\n          var tmpPt = [0, 0];\n          var tmpVec = [0, 0];\n          var radius = ctx.lineWidth * 1.5;\n          _glMatrix.vec2.set(extents, radius, radius);\n          for (i = 0; i < this._transformedVerts.length - 1; i += 1) {\n            Point2d.sub(tmpVec, this._transformedVerts[i + 1], this._transformedVerts[i]);\n            _glMatrix.vec2.scale(tmpVec, tmpVec, 0.5);\n            Point2d.addVec2(tmpPt, this._transformedVerts[i], tmpVec);\n            AABox2d.initCenterExtents(aabox, tmpPt, extents);\n            if (AABox2d.containsPt(aabox, screenPt)) {\n              rtnObj.hit = true;\n              rtnObj.controlIndex = this._transformedVerts.length + i;\n              break;\n            }\n          }\n\n          if (i > 0 && i === this._transformedVerts.length - 1) {\n            Point2d.sub(tmpVec, this._transformedVerts[0], this._transformedVerts[i]);\n            _glMatrix.vec2.scale(tmpVec, tmpVec, 0.5);\n            Point2d.addVec2(tmpPt, this._transformedVerts[i], tmpVec);\n            AABox2d.initCenterExtents(aabox, tmpPt, extents);\n            if (AABox2d.containsPt(aabox, screenPt)) {\n              rtnObj.hit = true;\n              rtnObj.controlIndex = this._transformedVerts.length + i;\n            }\n          }\n        }\n      }\n\n      return rtnObj;\n    }\n  }, {\n    key: \"renderBounds\",\n    value: function renderBounds(ctx, worldToScreenMatrix, boundsStrokeStyle) {\n      // we're storing our AABox in screen space here, so worldToScreenMatrix is\n      // unused\n      this._updateAABox(worldToScreenMatrix);\n      ctx.save();\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      boundsStrokeStyle.setStrokeCtx(ctx);\n      var center = [0, 0];\n      var extents = [0, 0];\n      AABox2d.getCenter(center, this._aabox);\n      AABox2d.getExtents(extents, this._aabox);\n      ctx.beginPath();\n      ctx.rect(center[0] - extents[0], center[1] - extents[1], extents[0] * 2, extents[1] * 2);\n      ctx.stroke();\n      ctx.restore();\n    }\n  }, {\n    key: \"render\",\n    value: function render(ctx) {\n      var _this2 = this;\n\n      ctx.save();\n\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      var objToScreenMatrix = this._baseVertShape._fullXform;\n      var verts = this._baseVertShape.vertsRef;\n      this._transformedVerts = new Array(verts.length);\n      var tmpPt = [0, 0];\n      var tmpVec = [0, 0];\n\n      ctx.beginPath();\n      var i = 0;\n      this._transformedVerts[i] = [0, 0];\n      Point2d.transformMat2d(this._transformedVerts[i], verts[i], objToScreenMatrix);\n\n      var radius = Math.max(ctx.lineWidth * 1.5, 2.5);\n      for (i = 0; i < verts.length - 1; i += 1) {\n        this._transformedVerts[i + 1] = [0, 0];\n        Point2d.transformMat2d(this._transformedVerts[i + 1], verts[i + 1], objToScreenMatrix);\n        Point2d.sub(tmpVec, this._transformedVerts[i + 1], this._transformedVerts[i]);\n        _glMatrix.vec2.scale(tmpVec, tmpVec, 0.5);\n        Point2d.addVec2(tmpPt, this._transformedVerts[i], tmpVec);\n\n        ctx.moveTo(tmpPt[0] + radius, tmpPt[1]);\n        ctx.arc(tmpPt[0], tmpPt[1], radius, 0, Math.TWO_PI);\n      }\n\n      if (i > 0) {\n        Point2d.sub(tmpVec, this._transformedVerts[0], this._transformedVerts[i]);\n        _glMatrix.vec2.scale(tmpVec, tmpVec, 0.5);\n        Point2d.addVec2(tmpPt, this._transformedVerts[i], tmpVec);\n        ctx.moveTo(tmpPt[0] + radius, tmpPt[1]);\n        ctx.arc(tmpPt[0], tmpPt[1], radius, 0, Math.TWO_PI);\n\n        // TODO(croot): Is this appropriate? Can the fill/stroke style\n        // be cross compatible? What about gradients/patterns?\n        // We can probably safely assume no gradients/patterns at\n        // this point\n        ctx.fillStyle = ctx.strokeStyle;\n        ctx.fill();\n      }\n\n      ctx.beginPath();\n\n      this._transformedVerts.forEach(function (vert) {\n        ctx.moveTo(vert[0] + _this2._vertRadius, vert[1]);\n        ctx.arc(vert[0], vert[1], _this2._vertRadius, 0, Math.TWO_PI);\n      });\n\n      if (this.isFillVisible()) {\n        this.setFillCtx(ctx);\n        ctx.fill();\n      }\n\n      if (this.isStrokeVisible()) {\n        this.setStrokeCtx(ctx);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }]);\n\n  return VertEditableShape;\n}(_baseShape2.default);\n\nexports.default = VertEditableShape;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _aabox2d = __webpack_require__(2);\n\nvar AABox2d = _interopRequireWildcard(_aabox2d);\n\nvar _point2d = __webpack_require__(3);\n\nvar Point2d = _interopRequireWildcard(_point2d);\n\nvar _transform2d = __webpack_require__(11);\n\nvar _mat2d = __webpack_require__(4);\n\nvar _mat2d2 = _interopRequireDefault(_mat2d);\n\nvar _rect = __webpack_require__(15);\n\nvar _rect2 = _interopRequireDefault(_rect);\n\nvar _vec2d = __webpack_require__(9);\n\nvar _vec2d2 = _interopRequireDefault(_vec2d);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Constants = {\n  SIDES: 4\n};\n\nfunction drawOBBoxModifierRect(ctx, pt, objToScreenMat, modifierSize, modifierHalfSize, modifierRotation, scale) {\n  Point2d.transformMat2d(pt, pt, objToScreenMat);\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  ctx.translate(pt[0], pt[1]);\n  ctx.rotate(modifierRotation[1]);\n  ctx.scale(scale[0], scale[1]);\n  ctx.rotate(modifierRotation[0]);\n  ctx.translate(-pt[0], -pt[1]);\n  ctx.rect(pt[0] - modifierHalfSize, pt[1] - modifierHalfSize, modifierSize, modifierSize);\n\n  // ctx.moveTo(pt[0], pt[1])\n  // ctx.lineTo(pt[0], pt[1] + 20)\n  // ctx.moveTo(pt[0], pt[1])\n  // ctx.lineTo(pt[0] + 20, pt[1])\n\n  // ctx.font = \"24px serif\"\n  // ctx.fillText(text, pt[0], pt[1])\n}\n\nfunction isPointInOBBoxModifierRect(screenPt, modifierPt, objToScreenMat, modifierMat, halfBoxSz, boxSz, padBoxSz, padBoxRadius, xScale, yScale) {\n  var hit = false;\n  var rotate = false;\n  Point2d.transformMat2d(modifierPt, modifierPt, objToScreenMat);\n  if (Point2d.distance(modifierPt, screenPt) <= padBoxRadius) {\n    _vec2d2.default.negate(modifierPt, modifierPt);\n    modifierMat[4] = modifierMat[0] * modifierPt[0] + modifierMat[2] * modifierPt[1];\n    modifierMat[5] = modifierMat[1] * modifierPt[0] + modifierMat[3] * modifierPt[1];\n\n    var x = 0;\n    var y = 0;\n    Point2d.transformMat2d(modifierPt, screenPt, modifierMat);\n    if (Math.abs(modifierPt[0]) <= halfBoxSz && Math.abs(modifierPt[1]) <= halfBoxSz || Boolean(xScale) && Boolean(yScale) && (rotate = (x = xScale * modifierPt[0]) > -halfBoxSz && x <= padBoxSz && (y = yScale * modifierPt[1]) > -halfBoxSz && y <= padBoxSz)) {\n      hit = true;\n    }\n  }\n  return {\n    hit: hit,\n    rotate: rotate\n  };\n}\n\nvar XformShape = function (_Rect) {\n  _inherits(XformShape, _Rect);\n\n  function XformShape(opts) {\n    var selectOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      scalable: true,\n      rotatable: true\n    };\n\n    _classCallCheck(this, XformShape);\n\n    var _this = _possibleConstructorReturn(this, (XformShape.__proto__ || Object.getPrototypeOf(XformShape)).call(this, opts));\n\n    _this._interactiveBoxSize = 8;\n    _this._interactiveBoxPadding = 10;\n    if (opts && typeof opts.vertexSize !== \"undefined\") {\n      _this._interactiveBoxSize = opts.vertexSize;\n    }\n\n    _this._scalable = true;\n    _this._rotatable = true;\n    if (selectOpts) {\n      if (typeof selectOpts.scalable !== \"undefined\") {\n        _this._scalable = Boolean(selectOpts.scalable);\n      }\n\n      if (typeof selectOpts.rotatable !== \"undefined\") {\n        _this._rotatable = Boolean(selectOpts.rotatable);\n      }\n    }\n    return _this;\n  }\n\n  _createClass(XformShape, [{\n    key: \"containsPoint\",\n    value: function containsPoint(screenPt) {\n      // Should we update here, or is it safe to\n      // say that this is stateful, meaning a render\n      // should have been performed beforehand which\n      // would've updated its state\n      var rtnObj = {\n        hit: false,\n        rotate: false,\n        controlIndex: -1\n      };\n\n      var aabox = this.aabox;\n      if ((this._rotatable || this._scalable) && this.visible && AABox2d.containsPt(aabox, screenPt)) {\n        var scale = [0, 0];\n        var rot = [0, 0];\n        _mat2d2.default.svd(null, scale, rot, this._fullXform);\n        var mat = _mat2d2.default.create();\n\n        scale[0] = scale[0] < 0 ? -1 : 1;\n        scale[1] = scale[1] < 0 ? -1 : 1;\n\n        if (scale[0] * scale[1] > 0) {\n          _vec2d2.default.negate(rot, rot);\n        }\n\n        _mat2d2.default.rotate(mat, mat, rot[1]);\n        _mat2d2.default.scale(mat, mat, scale);\n        _mat2d2.default.rotate(mat, mat, rot[0]);\n\n        var boxPadding = this._rotatable ? this._interactiveBoxPadding : 0;\n        var halfBoxSz = this._interactiveBoxSize / 2;\n        var halfWidth = this.width / 2;\n        var halfHeight = this.height / 2;\n        var pt = [0, 0];\n        var padSz = halfBoxSz + boxPadding;\n        var padRadius = Math.sqrt(2 * padSz * padSz);\n        var xScale = 0;\n        var yScale = 0;\n\n        for (var i = 0; i < Constants.SIDES; i += 1) {\n          xScale = i < 2 ? -1 : 1;\n          yScale = i % 2 === 0 ? -1 : 1;\n          Point2d.set(pt, xScale * halfWidth, yScale * halfHeight);\n          rtnObj = isPointInOBBoxModifierRect(screenPt, pt, this._fullXform, mat, halfBoxSz, this._interactiveBoxSize, padSz, padRadius, xScale, yScale, scale);\n          if (rtnObj.hit) {\n            rtnObj.controlIndex = i;\n            break;\n          }\n        }\n\n        if (!rtnObj.hit && this._scalable) {\n          for (var _i = 0; _i < Constants.SIDES; _i += 1) {\n            xScale = _i % 2 === 0 ? _i < 2 ? -1 : 1 : 0;\n            yScale = _i % 2 === 0 ? 0 : _i < 2 ? -1 : 1;\n            Point2d.set(pt, xScale * halfWidth, yScale * halfHeight);\n            rtnObj = isPointInOBBoxModifierRect(screenPt, pt, this._fullXform, mat, halfBoxSz, this._interactiveBoxSize, padSz, padRadius, xScale, yScale, scale);\n            if (rtnObj.hit) {\n              rtnObj.controlIndex = _i + Constants.SIDES;\n              break;\n            }\n          }\n        }\n\n        if (rtnObj.rotate && !this._rotatable) {\n          rtnObj.rotate = false;\n        } else if (!rtnObj.rotate && !this._scalable) {\n          rtnObj.rotate = true;\n        }\n      }\n\n      return rtnObj;\n    }\n  }, {\n    key: \"_updatelocalxform\",\n    value: function _updatelocalxform(force) {\n      if (this._lxformDirty || force) {\n        var pos = Point2d.clone(this._pos);\n        Point2d.addVec2(pos, pos, this._parent.pivotRef);\n        (0, _transform2d.buildXformMatrix)(this._localXform, this._rotDeg, this._scale, pos, this._pivot);\n        if (this._localXformUpdated) {\n          this._localXformUpdated();\n        }\n        this._lxformDirty = false;\n      }\n    }\n  }, {\n    key: \"_updateglobalxform\",\n    value: function _updateglobalxform() {\n      if (this._lxformDirty || this._xformDirty) {\n        this._updatelocalxform(true);\n        if (this._parent) {\n          _mat2d2.default.multiply(this._globalXform, this._parent.globalXform, this._localXform);\n        } else {\n          _mat2d2.default.copy(this._globalXform, this._localXform);\n        }\n        if (this._globalXformUpdated) {\n          this._globalXformUpdated();\n        }\n        this._xformDirty = false;\n      }\n    }\n  }, {\n    key: \"_updateAABox\",\n    value: function _updateAABox() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (force || this._geomDirty || this._boundsOutOfDate) {\n        var boxPadding = this._rotatable ? this._interactiveBoxPadding : 0;\n        var padding = boxPadding + this._interactiveBoxSize / 2;\n        AABox2d.initCenterExtents(this._aabox, [0, 0], [this.width / 2, this.height / 2]);\n        AABox2d.transformMat2d(this._aabox, this._aabox, this._fullXform);\n        AABox2d.expand(this._aabox, this._aabox, [padding, padding]);\n        this._aaboxUpdated = true;\n        this._geomDirty = this._boundsOutOfDate = false;\n      }\n    }\n  }, {\n    key: \"renderBounds\",\n    value: function renderBounds(ctx, worldToScreenMatrix, boundsStrokeStyle) {\n      // we're storing our AABox in screen space here, so worldToScreenMatrix is\n      // unused\n      var aabox = this.aabox;\n      ctx.save();\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      boundsStrokeStyle.setStrokeCtx(ctx);\n      var center = [0, 0];\n      var extents = [0, 0];\n      AABox2d.getCenter(center, aabox);\n      AABox2d.getExtents(extents, aabox);\n      ctx.beginPath();\n      ctx.rect(center[0] - extents[0], center[1] - extents[1], extents[0] * 2, extents[1] * 2);\n      ctx.stroke();\n      ctx.restore();\n    }\n  }, {\n    key: \"render\",\n    value: function render(ctx, worldToScreenMatrix, styleState) {\n      if (!this.parent || typeof this.parent.width === \"undefined\" || this.parent.height === \"undefined\") {\n        return;\n      }\n\n      this._aaboxUpdated = false;\n      // do not fill the primary rectangle\n      _get(XformShape.prototype.__proto__ || Object.getPrototypeOf(XformShape.prototype), \"render\", this).call(this, ctx, worldToScreenMatrix, styleState, false);\n      if (!this._aaboxUpdated) {\n        this._updateAABox(true);\n      }\n\n      var scale = [0, 0];\n      var rot = [0, 0];\n      _mat2d2.default.svd(null, scale, rot, this._fullXform);\n      scale[0] = scale[0] < 0 ? -1 : 1;\n      scale[1] = scale[1] < 0 ? -1 : 1;\n\n      var halfBoxSz = this._interactiveBoxSize / 2;\n      var halfWidth = this.width / 2;\n      var halfHeight = this.height / 2;\n      var pt = [halfWidth, halfHeight];\n\n      ctx.save();\n\n      ctx.beginPath();\n      drawOBBoxModifierRect(ctx, pt, this._fullXform, this._interactiveBoxSize, halfBoxSz, rot, scale, \"3\");\n\n      Point2d.set(pt, halfWidth, -halfHeight);\n      drawOBBoxModifierRect(ctx, pt, this._fullXform, this._interactiveBoxSize, halfBoxSz, rot, scale, \"2\");\n\n      Point2d.set(pt, -halfWidth, -halfHeight);\n      drawOBBoxModifierRect(ctx, pt, this._fullXform, this._interactiveBoxSize, halfBoxSz, rot, scale, \"0\");\n\n      Point2d.set(pt, -halfWidth, halfHeight);\n      drawOBBoxModifierRect(ctx, pt, this._fullXform, this._interactiveBoxSize, halfBoxSz, rot, scale, \"1\");\n\n      if (this._scalable) {\n        Point2d.set(pt, 0, halfHeight);\n        drawOBBoxModifierRect(ctx, pt, this._fullXform, this._interactiveBoxSize, halfBoxSz, rot, scale);\n\n        Point2d.set(pt, 0, -halfHeight);\n        drawOBBoxModifierRect(ctx, pt, this._fullXform, this._interactiveBoxSize, halfBoxSz, rot, scale);\n\n        Point2d.set(pt, halfWidth, 0);\n        drawOBBoxModifierRect(ctx, pt, this._fullXform, this._interactiveBoxSize, halfBoxSz, rot, scale);\n\n        Point2d.set(pt, -halfWidth, 0);\n        drawOBBoxModifierRect(ctx, pt, this._fullXform, this._interactiveBoxSize, halfBoxSz, rot, scale);\n      }\n\n      if (this.isFillVisible()) {\n        styleState.setFillStyle(ctx, this);\n        ctx.fill();\n      }\n\n      if (this.isStrokeVisible()) {\n        styleState.setStrokeStyle(ctx, this);\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this.parent && this.parent.width !== \"undefined\" ? this.parent.width : 0;\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this.parent && this.parent.height !== \"undefined\" ? this.parent.height : 0;\n    }\n  }]);\n\n  return XformShape;\n}(_rect2.default);\n\nexports.default = XformShape;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _aabox2d = __webpack_require__(2);\n\nvar AABox2d = _interopRequireWildcard(_aabox2d);\n\nvar _baseShape = __webpack_require__(6);\n\nvar _baseShape2 = _interopRequireDefault(_baseShape);\n\nvar _math = __webpack_require__(5);\n\nvar _math2 = _interopRequireDefault(_math);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @typedef {object} CircleOptions\n * @property {number} [radius=10] Radius of the circle in world-space coordinates\n */\n\n/**\n * @class Shape class describing a circle\n * @extends {BaseShape}\n */\nvar Circle = function (_BaseShape) {\n  _inherits(Circle, _BaseShape);\n\n  /**\n   * Creates a new Circle shape\n   * @param  {CircleOptions} [opts]\n   * @return {Circle}\n   */\n  function Circle(opts) {\n    _classCallCheck(this, Circle);\n\n    var _this = _possibleConstructorReturn(this, (Circle.__proto__ || Object.getPrototypeOf(Circle)).call(this, opts));\n\n    _this._radius = 10;\n    if (typeof opts.radius !== \"undefined\") {\n      _this.radius = opts.radius;\n    }\n    AABox2d.initCenterExtents(_this._aabox, [0, 0], [_this._radius, _this._radius]);\n    return _this;\n  }\n\n  /**\n   * Sets the radius of the circle\n   * @param  {number} radius Radius of circle in world-space coordinates\n   * @return {Circle}        this\n   * @fires {Shape#geomChanged}\n   * @throws {Error} If radius is not a valid number\n   */\n\n\n  _createClass(Circle, [{\n    key: \"getDimensions\",\n\n\n    /**\n     * Gets the untransformed width/height of the circle\n     * @return {Vec2d} Width/height of the circle, untransformed\n     */\n    value: function getDimensions() {\n      var diameter = this.radius * 2;\n      return [diameter, diameter];\n    }\n\n    /**\n     * Gets the untransformed width of the circle\n     * @return {number}\n     */\n\n  }, {\n    key: \"_updateAABox\",\n\n\n    /**\n     * Called when the bounding box requires updating\n     * @private\n     * @override\n     */\n    value: function _updateAABox() {\n      if (this._geomDirty || this._boundsOutOfDate) {\n        var pos = this._pos;\n        var scale = this._scale;\n        var rot = _math2.default.DEG_TO_RAD * this._rotDeg;\n        var cossqr = _math2.default.pow(_math2.default.cos(rot), 2);\n        var sinsqr = _math2.default.pow(_math2.default.sin(rot), 2);\n        var asqr = _math2.default.pow(scale[0] * this._radius, 2);\n        var bsqr = _math2.default.pow(scale[1] * this._radius, 2);\n        var A = _math2.default.sqrt(bsqr * sinsqr + asqr * cossqr);\n        var B = _math2.default.sqrt(asqr * sinsqr + bsqr * cossqr);\n        AABox2d.initCenterExtents(this._aabox, pos, [A, B]);\n        this._geomDirty = false;\n        this._boundsOutOfDate = false;\n      }\n    }\n\n    /**\n     * Draws the circle using a 2d rendering context. Called by the BaseShape\n     * class\n     * @param  {CanvasRenderingContext2d} ctx 2d rendering context\n     * @override\n     */\n\n  }, {\n    key: \"_draw\",\n    value: function _draw(ctx) {\n      ctx.arc(0, 0, this._radius, 0, _math2.default.TWO_PI, false);\n    }\n\n    /**\n     * Called to convert the shape to a serializable JSON object\n     * @return {object}\n     * @override\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Object.assign({\n        type: \"Circle\", // NOTE: this much match the name of the class\n        radius: this.radius\n      }, _get(Circle.prototype.__proto__ || Object.getPrototypeOf(Circle.prototype), \"toJSON\", this).call(this));\n    }\n  }, {\n    key: \"radius\",\n    set: function set(radius) {\n      if (typeof radius !== \"number\") {\n        throw new Error(\"Radius must be a number\");\n      }\n\n      if (radius !== this._radius) {\n        var prev = this._radius;\n        this._radius = radius;\n        this._geomDirty = true; // dirty needs to be set before firing event\n\n        this.fire(\"changed:geom\", {\n          attr: \"radius\",\n          prevVal: prev,\n          currVal: this._radius\n        });\n      }\n\n      return this;\n    }\n\n    /**\n     * Gets the current radius of the circle\n     * @return {number}\n     */\n    ,\n    get: function get() {\n      return this._radius;\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this.radius * 2;\n    }\n\n    /**\n     * Gets the untransformed height of the circle\n     * @return {number}\n     */\n\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this.radius * 2;\n    }\n  }]);\n\n  return Circle;\n}(_baseShape2.default);\n\nexports.default = Circle;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zaGFwZXMvY2lyY2xlLmpzP2FkOWQiXSwibmFtZXMiOlsiQUFCb3gyZCIsIkNpcmNsZSIsIm9wdHMiLCJfcmFkaXVzIiwicmFkaXVzIiwiaW5pdENlbnRlckV4dGVudHMiLCJfYWFib3giLCJkaWFtZXRlciIsIl9nZW9tRGlydHkiLCJfYm91bmRzT3V0T2ZEYXRlIiwicG9zIiwiX3BvcyIsInNjYWxlIiwiX3NjYWxlIiwicm90IiwiTWF0aCIsIkRFR19UT19SQUQiLCJfcm90RGVnIiwiY29zc3FyIiwicG93IiwiY29zIiwic2luc3FyIiwic2luIiwiYXNxciIsImJzcXIiLCJBIiwic3FydCIsIkIiLCJjdHgiLCJhcmMiLCJUV09fUEkiLCJPYmplY3QiLCJhc3NpZ24iLCJ0eXBlIiwiRXJyb3IiLCJwcmV2IiwiZmlyZSIsImF0dHIiLCJwcmV2VmFsIiwiY3VyclZhbCIsIkJhc2VTaGFwZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFFQTs7SUFBWUEsTzs7QUFDWjs7OztBQUNBOzs7Ozs7Ozs7Ozs7OztBQUVBOzs7OztBQUtBOzs7O0lBSXFCQyxNOzs7QUFDbkI7Ozs7O0FBS0Esa0JBQVlDLElBQVosRUFBa0I7QUFBQTs7QUFBQSxnSEFDVkEsSUFEVTs7QUFFaEIsVUFBS0MsT0FBTCxHQUFlLEVBQWY7QUFDQSxRQUFJLE9BQU9ELEtBQUtFLE1BQVosS0FBdUIsV0FBM0IsRUFBd0M7QUFDdEMsWUFBS0EsTUFBTCxHQUFjRixLQUFLRSxNQUFuQjtBQUNEO0FBQ0RKLFlBQVFLLGlCQUFSLENBQTBCLE1BQUtDLE1BQS9CLEVBQXVDLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBdkMsRUFBK0MsQ0FBQyxNQUFLSCxPQUFOLEVBQWUsTUFBS0EsT0FBcEIsQ0FBL0M7QUFOZ0I7QUFPakI7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7QUFtQ0E7Ozs7b0NBSWdCO0FBQ2QsVUFBTUksV0FBVyxLQUFLSCxNQUFMLEdBQWMsQ0FBL0I7QUFDQSxhQUFPLENBQUNHLFFBQUQsRUFBV0EsUUFBWCxDQUFQO0FBQ0Q7O0FBRUQ7Ozs7Ozs7OztBQWdCQTs7Ozs7bUNBS2U7QUFDYixVQUFJLEtBQUtDLFVBQUwsSUFBbUIsS0FBS0MsZ0JBQTVCLEVBQThDO0FBQzVDLFlBQU1DLE1BQU0sS0FBS0MsSUFBakI7QUFDQSxZQUFNQyxRQUFRLEtBQUtDLE1BQW5CO0FBQ0EsWUFBTUMsTUFBTUMsZUFBS0MsVUFBTCxHQUFrQixLQUFLQyxPQUFuQztBQUNBLFlBQU1DLFNBQVNILGVBQUtJLEdBQUwsQ0FBU0osZUFBS0ssR0FBTCxDQUFTTixHQUFULENBQVQsRUFBd0IsQ0FBeEIsQ0FBZjtBQUNBLFlBQU1PLFNBQVNOLGVBQUtJLEdBQUwsQ0FBU0osZUFBS08sR0FBTCxDQUFTUixHQUFULENBQVQsRUFBd0IsQ0FBeEIsQ0FBZjtBQUNBLFlBQU1TLE9BQU9SLGVBQUtJLEdBQUwsQ0FBU1AsTUFBTSxDQUFOLElBQVcsS0FBS1QsT0FBekIsRUFBa0MsQ0FBbEMsQ0FBYjtBQUNBLFlBQU1xQixPQUFPVCxlQUFLSSxHQUFMLENBQVNQLE1BQU0sQ0FBTixJQUFXLEtBQUtULE9BQXpCLEVBQWtDLENBQWxDLENBQWI7QUFDQSxZQUFNc0IsSUFBSVYsZUFBS1csSUFBTCxDQUFVRixPQUFPSCxNQUFQLEdBQWdCRSxPQUFPTCxNQUFqQyxDQUFWO0FBQ0EsWUFBTVMsSUFBSVosZUFBS1csSUFBTCxDQUFVSCxPQUFPRixNQUFQLEdBQWdCRyxPQUFPTixNQUFqQyxDQUFWO0FBQ0FsQixnQkFBUUssaUJBQVIsQ0FBMEIsS0FBS0MsTUFBL0IsRUFBdUNJLEdBQXZDLEVBQTRDLENBQUNlLENBQUQsRUFBSUUsQ0FBSixDQUE1QztBQUNBLGFBQUtuQixVQUFMLEdBQWtCLEtBQWxCO0FBQ0EsYUFBS0MsZ0JBQUwsR0FBd0IsS0FBeEI7QUFDRDtBQUNGOztBQUVEOzs7Ozs7Ozs7MEJBTU1tQixHLEVBQUs7QUFDVEEsVUFBSUMsR0FBSixDQUFRLENBQVIsRUFBVyxDQUFYLEVBQWMsS0FBSzFCLE9BQW5CLEVBQTRCLENBQTVCLEVBQStCWSxlQUFLZSxNQUFwQyxFQUE0QyxLQUE1QztBQUNEOztBQUVEOzs7Ozs7Ozs2QkFLUztBQUNQLGFBQU9DLE9BQU9DLE1BQVAsQ0FBYztBQUNuQkMsY0FBTSxRQURhLEVBQ0g7QUFDaEI3QixnQkFBUSxLQUFLQTtBQUZNLE9BQWQseUdBQVA7QUFJRDs7O3NCQS9GVUEsTSxFQUFRO0FBQ2pCLFVBQUksT0FBT0EsTUFBUCxLQUFrQixRQUF0QixFQUFnQztBQUM5QixjQUFNLElBQUk4QixLQUFKLENBQVUseUJBQVYsQ0FBTjtBQUNEOztBQUVELFVBQUk5QixXQUFXLEtBQUtELE9BQXBCLEVBQTZCO0FBQzNCLFlBQU1nQyxPQUFPLEtBQUtoQyxPQUFsQjtBQUNBLGFBQUtBLE9BQUwsR0FBZUMsTUFBZjtBQUNBLGFBQUtJLFVBQUwsR0FBa0IsSUFBbEIsQ0FIMkIsQ0FHSjs7QUFFdkIsYUFBSzRCLElBQUwsQ0FBVSxjQUFWLEVBQTBCO0FBQ3hCQyxnQkFBTSxRQURrQjtBQUV4QkMsbUJBQVNILElBRmU7QUFHeEJJLG1CQUFTLEtBQUtwQztBQUhVLFNBQTFCO0FBS0Q7O0FBRUQsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQ7Ozs7O3dCQUlhO0FBQ1gsYUFBTyxLQUFLQSxPQUFaO0FBQ0Q7Ozt3QkFlVztBQUNWLGFBQU8sS0FBS0MsTUFBTCxHQUFjLENBQXJCO0FBQ0Q7O0FBRUQ7Ozs7Ozs7d0JBSWE7QUFDWCxhQUFPLEtBQUtBLE1BQUwsR0FBYyxDQUFyQjtBQUNEOzs7O0VBekVpQ29DLG1COztrQkFBZnZDLE0iLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuXG5pbXBvcnQgKiBhcyBBQUJveDJkIGZyb20gXCIuLi9jb3JlL2FhYm94MmRcIlxuaW1wb3J0IEJhc2VTaGFwZSBmcm9tIFwiLi9iYXNlLXNoYXBlLmpzXCJcbmltcG9ydCBNYXRoIGZyb20gXCIuLi9tYXRoL21hdGhcIlxuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IENpcmNsZU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbcmFkaXVzPTEwXSBSYWRpdXMgb2YgdGhlIGNpcmNsZSBpbiB3b3JsZC1zcGFjZSBjb29yZGluYXRlc1xuICovXG5cbi8qKlxuICogQGNsYXNzIFNoYXBlIGNsYXNzIGRlc2NyaWJpbmcgYSBjaXJjbGVcbiAqIEBleHRlbmRzIHtCYXNlU2hhcGV9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENpcmNsZSBleHRlbmRzIEJhc2VTaGFwZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IENpcmNsZSBzaGFwZVxuICAgKiBAcGFyYW0gIHtDaXJjbGVPcHRpb25zfSBbb3B0c11cbiAgICogQHJldHVybiB7Q2lyY2xlfVxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKG9wdHMpXG4gICAgdGhpcy5fcmFkaXVzID0gMTBcbiAgICBpZiAodHlwZW9mIG9wdHMucmFkaXVzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aGlzLnJhZGl1cyA9IG9wdHMucmFkaXVzXG4gICAgfVxuICAgIEFBQm94MmQuaW5pdENlbnRlckV4dGVudHModGhpcy5fYWFib3gsIFswLCAwXSwgW3RoaXMuX3JhZGl1cywgdGhpcy5fcmFkaXVzXSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSByYWRpdXMgb2YgdGhlIGNpcmNsZVxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IHJhZGl1cyBSYWRpdXMgb2YgY2lyY2xlIGluIHdvcmxkLXNwYWNlIGNvb3JkaW5hdGVzXG4gICAqIEByZXR1cm4ge0NpcmNsZX0gICAgICAgIHRoaXNcbiAgICogQGZpcmVzIHtTaGFwZSNnZW9tQ2hhbmdlZH1cbiAgICogQHRocm93cyB7RXJyb3J9IElmIHJhZGl1cyBpcyBub3QgYSB2YWxpZCBudW1iZXJcbiAgICovXG4gIHNldCByYWRpdXMocmFkaXVzKSB7XG4gICAgaWYgKHR5cGVvZiByYWRpdXMgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJhZGl1cyBtdXN0IGJlIGEgbnVtYmVyXCIpXG4gICAgfVxuXG4gICAgaWYgKHJhZGl1cyAhPT0gdGhpcy5fcmFkaXVzKSB7XG4gICAgICBjb25zdCBwcmV2ID0gdGhpcy5fcmFkaXVzXG4gICAgICB0aGlzLl9yYWRpdXMgPSByYWRpdXNcbiAgICAgIHRoaXMuX2dlb21EaXJ0eSA9IHRydWUgLy8gZGlydHkgbmVlZHMgdG8gYmUgc2V0IGJlZm9yZSBmaXJpbmcgZXZlbnRcblxuICAgICAgdGhpcy5maXJlKFwiY2hhbmdlZDpnZW9tXCIsIHtcbiAgICAgICAgYXR0cjogXCJyYWRpdXNcIixcbiAgICAgICAgcHJldlZhbDogcHJldixcbiAgICAgICAgY3VyclZhbDogdGhpcy5fcmFkaXVzXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgY3VycmVudCByYWRpdXMgb2YgdGhlIGNpcmNsZVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgcmFkaXVzKCkge1xuICAgIHJldHVybiB0aGlzLl9yYWRpdXNcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB1bnRyYW5zZm9ybWVkIHdpZHRoL2hlaWdodCBvZiB0aGUgY2lyY2xlXG4gICAqIEByZXR1cm4ge1ZlYzJkfSBXaWR0aC9oZWlnaHQgb2YgdGhlIGNpcmNsZSwgdW50cmFuc2Zvcm1lZFxuICAgKi9cbiAgZ2V0RGltZW5zaW9ucygpIHtcbiAgICBjb25zdCBkaWFtZXRlciA9IHRoaXMucmFkaXVzICogMlxuICAgIHJldHVybiBbZGlhbWV0ZXIsIGRpYW1ldGVyXVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHVudHJhbnNmb3JtZWQgd2lkdGggb2YgdGhlIGNpcmNsZVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgd2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMucmFkaXVzICogMlxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHVudHJhbnNmb3JtZWQgaGVpZ2h0IG9mIHRoZSBjaXJjbGVcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5yYWRpdXMgKiAyXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIGJvdW5kaW5nIGJveCByZXF1aXJlcyB1cGRhdGluZ1xuICAgKiBAcHJpdmF0ZVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIF91cGRhdGVBQUJveCgpIHtcbiAgICBpZiAodGhpcy5fZ2VvbURpcnR5IHx8IHRoaXMuX2JvdW5kc091dE9mRGF0ZSkge1xuICAgICAgY29uc3QgcG9zID0gdGhpcy5fcG9zXG4gICAgICBjb25zdCBzY2FsZSA9IHRoaXMuX3NjYWxlXG4gICAgICBjb25zdCByb3QgPSBNYXRoLkRFR19UT19SQUQgKiB0aGlzLl9yb3REZWdcbiAgICAgIGNvbnN0IGNvc3NxciA9IE1hdGgucG93KE1hdGguY29zKHJvdCksIDIpXG4gICAgICBjb25zdCBzaW5zcXIgPSBNYXRoLnBvdyhNYXRoLnNpbihyb3QpLCAyKVxuICAgICAgY29uc3QgYXNxciA9IE1hdGgucG93KHNjYWxlWzBdICogdGhpcy5fcmFkaXVzLCAyKVxuICAgICAgY29uc3QgYnNxciA9IE1hdGgucG93KHNjYWxlWzFdICogdGhpcy5fcmFkaXVzLCAyKVxuICAgICAgY29uc3QgQSA9IE1hdGguc3FydChic3FyICogc2luc3FyICsgYXNxciAqIGNvc3NxcilcbiAgICAgIGNvbnN0IEIgPSBNYXRoLnNxcnQoYXNxciAqIHNpbnNxciArIGJzcXIgKiBjb3NzcXIpXG4gICAgICBBQUJveDJkLmluaXRDZW50ZXJFeHRlbnRzKHRoaXMuX2FhYm94LCBwb3MsIFtBLCBCXSlcbiAgICAgIHRoaXMuX2dlb21EaXJ0eSA9IGZhbHNlXG4gICAgICB0aGlzLl9ib3VuZHNPdXRPZkRhdGUgPSBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgY2lyY2xlIHVzaW5nIGEgMmQgcmVuZGVyaW5nIGNvbnRleHQuIENhbGxlZCBieSB0aGUgQmFzZVNoYXBlXG4gICAqIGNsYXNzXG4gICAqIEBwYXJhbSAge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyZH0gY3R4IDJkIHJlbmRlcmluZyBjb250ZXh0XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgX2RyYXcoY3R4KSB7XG4gICAgY3R4LmFyYygwLCAwLCB0aGlzLl9yYWRpdXMsIDAsIE1hdGguVFdPX1BJLCBmYWxzZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdG8gY29udmVydCB0aGUgc2hhcGUgdG8gYSBzZXJpYWxpemFibGUgSlNPTiBvYmplY3RcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7XG4gICAgICB0eXBlOiBcIkNpcmNsZVwiLCAvLyBOT1RFOiB0aGlzIG11Y2ggbWF0Y2ggdGhlIG5hbWUgb2YgdGhlIGNsYXNzXG4gICAgICByYWRpdXM6IHRoaXMucmFkaXVzXG4gICAgfSwgc3VwZXIudG9KU09OKCkpXG4gIH1cblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc2hhcGVzL2NpcmNsZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _aabox2d = __webpack_require__(2);\n\nvar AABox2d = _interopRequireWildcard(_aabox2d);\n\nvar _baseShape = __webpack_require__(6);\n\nvar _baseShape2 = _interopRequireDefault(_baseShape);\n\nvar _mat2d = __webpack_require__(4);\n\nvar _mat2d2 = _interopRequireDefault(_mat2d);\n\nvar _math = __webpack_require__(5);\n\nvar _math2 = _interopRequireDefault(_math);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * @typedef {object} PointOptions\n * @property {number} [size=5] Size of the point in pixels\n */\n\n/**\n * @class Point shape class. A point differs from a circle in that\n *        a point's size is defined in screen/pixel space whereas\n *        a circle is defined in world space.\n * @extends {BaseShape}\n */\nvar Point = function (_BaseShape) {\n  _inherits(Point, _BaseShape);\n\n  /**\n   * Creates a new point shape\n   * @param  {PointOptions} [opts]\n   * @return {Point}\n   */\n  function Point(opts) {\n    _classCallCheck(this, Point);\n\n    var _this = _possibleConstructorReturn(this, (Point.__proto__ || Object.getPrototypeOf(Point)).call(this, opts));\n\n    _this._size = 5;\n    if (typeof opts.size !== \"undefined\") {\n      _this.size = opts.size;\n    }\n    AABox2d.initCenterExtents(_this._aabox, [0, 0], [_this._radius, _this._radius]);\n    _this.translate(opts.x || 0, opts.y || 0);\n    return _this;\n  }\n\n  /**\n   * Sets the size of the point\n   * @param  {nuber} size Size of the point in pixels\n   * @return {Pixel}      this\n   * @fires {Shape#geomChanged}\n   * @throws {Error} If size is not a valid number\n   */\n\n\n  _createClass(Point, [{\n    key: \"_updateAABox\",\n\n\n    /**\n     * Called when the bounding box requires updating\n     * @private\n     * @override\n     */\n    value: function _updateAABox() {\n      if (this._geomDirty || this._boundsOutOfDate) {\n        var pos = this._pos;\n        var scale = this._scale;\n        var rot = _math2.default.DEG_TO_RAD * this._rotDeg;\n        var cossqr = _math2.default.pow(_math2.default.cos(rot), 2);\n        var sinsqr = _math2.default.pow(_math2.default.sin(rot), 2);\n        var asqr = _math2.default.pow(scale[0] * this._size, 2);\n        var bsqr = _math2.default.pow(scale[1] * this._size, 2);\n        var A = _math2.default.sqrt(bsqr * sinsqr + asqr * cossqr);\n        var B = _math2.default.sqrt(asqr * sinsqr + bsqr * cossqr);\n        AABox2d.initCenterExtents(this._aabox, pos, [A, B]);\n        this._geomDirty = false;\n        this._boundsOutOfDate = false;\n      }\n    }\n\n    /**\n     * Draws the point using a 2d rendering context. Called by the BaseShape\n     * class\n     * @param  {CanvasRenderingContext2d} ctx 2d rendering context\n     * @override\n     */\n\n  }, {\n    key: \"_draw\",\n    value: function _draw(ctx) {\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      var pos = [0, 0];\n      _mat2d2.default.svd(pos, null, null, this._fullXform);\n      ctx.arc(pos[0], pos[1], this._size, 0, _math2.default.TWO_PI, false);\n    }\n\n    /**\n     * Called to convert the shape to a serializable JSON object\n     * @return {object}\n     * @override\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Object.assign({\n        type: \"Point\", // NOTE: this much match the name of the class\n        size: this.size\n      }, _get(Point.prototype.__proto__ || Object.getPrototypeOf(Point.prototype), \"toJSON\", this).call(this));\n    }\n  }, {\n    key: \"size\",\n    set: function set(size) {\n      if (typeof size !== \"number\") {\n        throw new Error(\"Radius must be a number\");\n      }\n\n      if (size !== this._size) {\n        var prev = this._size;\n        this._size = size;\n        this._geomDirty = true; // dirty needs to be set before firing event\n\n        this.fire(\"changed:geom\", {\n          attr: \"size\",\n          prevVal: prev,\n          currVal: this._size\n        });\n      }\n    }\n\n    /**\n     * Gets the current size of the point\n     * @return {number}\n     */\n    ,\n    get: function get() {\n      return this._size;\n    }\n  }]);\n\n  return Point;\n}(_baseShape2.default);\n\nexports.default = Point;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zaGFwZXMvcG9pbnQuanM/OWY2OSJdLCJuYW1lcyI6WyJBQUJveDJkIiwiUG9pbnQiLCJvcHRzIiwiX3NpemUiLCJzaXplIiwiaW5pdENlbnRlckV4dGVudHMiLCJfYWFib3giLCJfcmFkaXVzIiwidHJhbnNsYXRlIiwieCIsInkiLCJfZ2VvbURpcnR5IiwiX2JvdW5kc091dE9mRGF0ZSIsInBvcyIsIl9wb3MiLCJzY2FsZSIsIl9zY2FsZSIsInJvdCIsIk1hdGgiLCJERUdfVE9fUkFEIiwiX3JvdERlZyIsImNvc3NxciIsInBvdyIsImNvcyIsInNpbnNxciIsInNpbiIsImFzcXIiLCJic3FyIiwiQSIsInNxcnQiLCJCIiwiY3R4Iiwic2V0VHJhbnNmb3JtIiwiTWF0MmQiLCJzdmQiLCJfZnVsbFhmb3JtIiwiYXJjIiwiVFdPX1BJIiwiT2JqZWN0IiwiYXNzaWduIiwidHlwZSIsIkVycm9yIiwicHJldiIsImZpcmUiLCJhdHRyIiwicHJldlZhbCIsImN1cnJWYWwiLCJCYXNlU2hhcGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBRUE7O0lBQVlBLE87O0FBQ1o7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7OztBQUVBOzs7OztBQUtBOzs7Ozs7SUFNcUJDLEs7OztBQUNuQjs7Ozs7QUFLQSxpQkFBWUMsSUFBWixFQUFrQjtBQUFBOztBQUFBLDhHQUNWQSxJQURVOztBQUVoQixVQUFLQyxLQUFMLEdBQWEsQ0FBYjtBQUNBLFFBQUksT0FBT0QsS0FBS0UsSUFBWixLQUFxQixXQUF6QixFQUFzQztBQUNwQyxZQUFLQSxJQUFMLEdBQVlGLEtBQUtFLElBQWpCO0FBQ0Q7QUFDREosWUFBUUssaUJBQVIsQ0FBMEIsTUFBS0MsTUFBL0IsRUFBdUMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUF2QyxFQUErQyxDQUFDLE1BQUtDLE9BQU4sRUFBZSxNQUFLQSxPQUFwQixDQUEvQztBQUNBLFVBQUtDLFNBQUwsQ0FBZU4sS0FBS08sQ0FBTCxJQUFVLENBQXpCLEVBQTRCUCxLQUFLUSxDQUFMLElBQVUsQ0FBdEM7QUFQZ0I7QUFRakI7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7QUFpQ0E7Ozs7O21DQUtlO0FBQ2IsVUFBSSxLQUFLQyxVQUFMLElBQW1CLEtBQUtDLGdCQUE1QixFQUE4QztBQUM1QyxZQUFNQyxNQUFNLEtBQUtDLElBQWpCO0FBQ0EsWUFBTUMsUUFBUSxLQUFLQyxNQUFuQjtBQUNBLFlBQU1DLE1BQU1DLGVBQUtDLFVBQUwsR0FBa0IsS0FBS0MsT0FBbkM7QUFDQSxZQUFNQyxTQUFTSCxlQUFLSSxHQUFMLENBQVNKLGVBQUtLLEdBQUwsQ0FBU04sR0FBVCxDQUFULEVBQXdCLENBQXhCLENBQWY7QUFDQSxZQUFNTyxTQUFTTixlQUFLSSxHQUFMLENBQVNKLGVBQUtPLEdBQUwsQ0FBU1IsR0FBVCxDQUFULEVBQXdCLENBQXhCLENBQWY7QUFDQSxZQUFNUyxPQUFPUixlQUFLSSxHQUFMLENBQVNQLE1BQU0sQ0FBTixJQUFXLEtBQUtaLEtBQXpCLEVBQWdDLENBQWhDLENBQWI7QUFDQSxZQUFNd0IsT0FBT1QsZUFBS0ksR0FBTCxDQUFTUCxNQUFNLENBQU4sSUFBVyxLQUFLWixLQUF6QixFQUFnQyxDQUFoQyxDQUFiO0FBQ0EsWUFBTXlCLElBQUlWLGVBQUtXLElBQUwsQ0FBVUYsT0FBT0gsTUFBUCxHQUFnQkUsT0FBT0wsTUFBakMsQ0FBVjtBQUNBLFlBQU1TLElBQUlaLGVBQUtXLElBQUwsQ0FBVUgsT0FBT0YsTUFBUCxHQUFnQkcsT0FBT04sTUFBakMsQ0FBVjtBQUNBckIsZ0JBQVFLLGlCQUFSLENBQTBCLEtBQUtDLE1BQS9CLEVBQXVDTyxHQUF2QyxFQUE0QyxDQUFDZSxDQUFELEVBQUlFLENBQUosQ0FBNUM7QUFDQSxhQUFLbkIsVUFBTCxHQUFrQixLQUFsQjtBQUNBLGFBQUtDLGdCQUFMLEdBQXdCLEtBQXhCO0FBQ0Q7QUFDRjs7QUFFRDs7Ozs7Ozs7OzBCQU1NbUIsRyxFQUFLO0FBQ1RBLFVBQUlDLFlBQUosQ0FBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsRUFBdUIsQ0FBdkIsRUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsRUFBZ0MsQ0FBaEM7QUFDQSxVQUFNbkIsTUFBTSxDQUFDLENBQUQsRUFBSSxDQUFKLENBQVo7QUFDQW9CLHNCQUFNQyxHQUFOLENBQVVyQixHQUFWLEVBQWUsSUFBZixFQUFxQixJQUFyQixFQUEyQixLQUFLc0IsVUFBaEM7QUFDQUosVUFBSUssR0FBSixDQUFRdkIsSUFBSSxDQUFKLENBQVIsRUFBZ0JBLElBQUksQ0FBSixDQUFoQixFQUF3QixLQUFLVixLQUE3QixFQUFvQyxDQUFwQyxFQUF1Q2UsZUFBS21CLE1BQTVDLEVBQW9ELEtBQXBEO0FBQ0Q7O0FBRUQ7Ozs7Ozs7OzZCQUtTO0FBQ1AsYUFBT0MsT0FBT0MsTUFBUCxDQUFjO0FBQ25CQyxjQUFNLE9BRGEsRUFDSjtBQUNmcEMsY0FBTSxLQUFLQTtBQUZRLE9BQWQsdUdBQVA7QUFJRDs7O3NCQXZFUUEsSSxFQUFNO0FBQ2IsVUFBSSxPQUFPQSxJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQzVCLGNBQU0sSUFBSXFDLEtBQUosQ0FBVSx5QkFBVixDQUFOO0FBQ0Q7O0FBRUQsVUFBSXJDLFNBQVMsS0FBS0QsS0FBbEIsRUFBeUI7QUFDdkIsWUFBTXVDLE9BQU8sS0FBS3ZDLEtBQWxCO0FBQ0EsYUFBS0EsS0FBTCxHQUFhQyxJQUFiO0FBQ0EsYUFBS08sVUFBTCxHQUFrQixJQUFsQixDQUh1QixDQUdBOztBQUV2QixhQUFLZ0MsSUFBTCxDQUFVLGNBQVYsRUFBMEI7QUFDeEJDLGdCQUFNLE1BRGtCO0FBRXhCQyxtQkFBU0gsSUFGZTtBQUd4QkksbUJBQVMsS0FBSzNDO0FBSFUsU0FBMUI7QUFLRDtBQUNGOztBQUVEOzs7Ozt3QkFJVztBQUNULGFBQU8sS0FBS0EsS0FBWjtBQUNEOzs7O0VBL0NnQzRDLG1COztrQkFBZDlDLEsiLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuXG5pbXBvcnQgKiBhcyBBQUJveDJkIGZyb20gXCIuLi9jb3JlL2FhYm94MmRcIlxuaW1wb3J0IEJhc2VTaGFwZSBmcm9tIFwiLi9iYXNlLXNoYXBlLmpzXCJcbmltcG9ydCBNYXQyZCBmcm9tIFwiLi4vY29yZS9tYXQyZFwiXG5pbXBvcnQgTWF0aCBmcm9tIFwiLi4vbWF0aC9tYXRoXCJcblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBQb2ludE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbc2l6ZT01XSBTaXplIG9mIHRoZSBwb2ludCBpbiBwaXhlbHNcbiAqL1xuXG4vKipcbiAqIEBjbGFzcyBQb2ludCBzaGFwZSBjbGFzcy4gQSBwb2ludCBkaWZmZXJzIGZyb20gYSBjaXJjbGUgaW4gdGhhdFxuICogICAgICAgIGEgcG9pbnQncyBzaXplIGlzIGRlZmluZWQgaW4gc2NyZWVuL3BpeGVsIHNwYWNlIHdoZXJlYXNcbiAqICAgICAgICBhIGNpcmNsZSBpcyBkZWZpbmVkIGluIHdvcmxkIHNwYWNlLlxuICogQGV4dGVuZHMge0Jhc2VTaGFwZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9pbnQgZXh0ZW5kcyBCYXNlU2hhcGUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBwb2ludCBzaGFwZVxuICAgKiBAcGFyYW0gIHtQb2ludE9wdGlvbnN9IFtvcHRzXVxuICAgKiBAcmV0dXJuIHtQb2ludH1cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcihvcHRzKVxuICAgIHRoaXMuX3NpemUgPSA1XG4gICAgaWYgKHR5cGVvZiBvcHRzLnNpemUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IG9wdHMuc2l6ZVxuICAgIH1cbiAgICBBQUJveDJkLmluaXRDZW50ZXJFeHRlbnRzKHRoaXMuX2FhYm94LCBbMCwgMF0sIFt0aGlzLl9yYWRpdXMsIHRoaXMuX3JhZGl1c10pXG4gICAgdGhpcy50cmFuc2xhdGUob3B0cy54IHx8IDAsIG9wdHMueSB8fCAwKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHNpemUgb2YgdGhlIHBvaW50XG4gICAqIEBwYXJhbSAge251YmVyfSBzaXplIFNpemUgb2YgdGhlIHBvaW50IGluIHBpeGVsc1xuICAgKiBAcmV0dXJuIHtQaXhlbH0gICAgICB0aGlzXG4gICAqIEBmaXJlcyB7U2hhcGUjZ2VvbUNoYW5nZWR9XG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBzaXplIGlzIG5vdCBhIHZhbGlkIG51bWJlclxuICAgKi9cbiAgc2V0IHNpemUoc2l6ZSkge1xuICAgIGlmICh0eXBlb2Ygc2l6ZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmFkaXVzIG11c3QgYmUgYSBudW1iZXJcIilcbiAgICB9XG5cbiAgICBpZiAoc2l6ZSAhPT0gdGhpcy5fc2l6ZSkge1xuICAgICAgY29uc3QgcHJldiA9IHRoaXMuX3NpemVcbiAgICAgIHRoaXMuX3NpemUgPSBzaXplXG4gICAgICB0aGlzLl9nZW9tRGlydHkgPSB0cnVlIC8vIGRpcnR5IG5lZWRzIHRvIGJlIHNldCBiZWZvcmUgZmlyaW5nIGV2ZW50XG5cbiAgICAgIHRoaXMuZmlyZShcImNoYW5nZWQ6Z2VvbVwiLCB7XG4gICAgICAgIGF0dHI6IFwic2l6ZVwiLFxuICAgICAgICBwcmV2VmFsOiBwcmV2LFxuICAgICAgICBjdXJyVmFsOiB0aGlzLl9zaXplXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjdXJyZW50IHNpemUgb2YgdGhlIHBvaW50XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldCBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLl9zaXplXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIGJvdW5kaW5nIGJveCByZXF1aXJlcyB1cGRhdGluZ1xuICAgKiBAcHJpdmF0ZVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIF91cGRhdGVBQUJveCgpIHtcbiAgICBpZiAodGhpcy5fZ2VvbURpcnR5IHx8IHRoaXMuX2JvdW5kc091dE9mRGF0ZSkge1xuICAgICAgY29uc3QgcG9zID0gdGhpcy5fcG9zXG4gICAgICBjb25zdCBzY2FsZSA9IHRoaXMuX3NjYWxlXG4gICAgICBjb25zdCByb3QgPSBNYXRoLkRFR19UT19SQUQgKiB0aGlzLl9yb3REZWdcbiAgICAgIGNvbnN0IGNvc3NxciA9IE1hdGgucG93KE1hdGguY29zKHJvdCksIDIpXG4gICAgICBjb25zdCBzaW5zcXIgPSBNYXRoLnBvdyhNYXRoLnNpbihyb3QpLCAyKVxuICAgICAgY29uc3QgYXNxciA9IE1hdGgucG93KHNjYWxlWzBdICogdGhpcy5fc2l6ZSwgMilcbiAgICAgIGNvbnN0IGJzcXIgPSBNYXRoLnBvdyhzY2FsZVsxXSAqIHRoaXMuX3NpemUsIDIpXG4gICAgICBjb25zdCBBID0gTWF0aC5zcXJ0KGJzcXIgKiBzaW5zcXIgKyBhc3FyICogY29zc3FyKVxuICAgICAgY29uc3QgQiA9IE1hdGguc3FydChhc3FyICogc2luc3FyICsgYnNxciAqIGNvc3NxcilcbiAgICAgIEFBQm94MmQuaW5pdENlbnRlckV4dGVudHModGhpcy5fYWFib3gsIHBvcywgW0EsIEJdKVxuICAgICAgdGhpcy5fZ2VvbURpcnR5ID0gZmFsc2VcbiAgICAgIHRoaXMuX2JvdW5kc091dE9mRGF0ZSA9IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBwb2ludCB1c2luZyBhIDJkIHJlbmRlcmluZyBjb250ZXh0LiBDYWxsZWQgYnkgdGhlIEJhc2VTaGFwZVxuICAgKiBjbGFzc1xuICAgKiBAcGFyYW0gIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MmR9IGN0eCAyZCByZW5kZXJpbmcgY29udGV4dFxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIF9kcmF3KGN0eCkge1xuICAgIGN0eC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMClcbiAgICBjb25zdCBwb3MgPSBbMCwgMF1cbiAgICBNYXQyZC5zdmQocG9zLCBudWxsLCBudWxsLCB0aGlzLl9mdWxsWGZvcm0pXG4gICAgY3R4LmFyYyhwb3NbMF0sIHBvc1sxXSwgdGhpcy5fc2l6ZSwgMCwgTWF0aC5UV09fUEksIGZhbHNlKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB0byBjb252ZXJ0IHRoZSBzaGFwZSB0byBhIHNlcmlhbGl6YWJsZSBKU09OIG9iamVjdFxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHtcbiAgICAgIHR5cGU6IFwiUG9pbnRcIiwgLy8gTk9URTogdGhpcyBtdWNoIG1hdGNoIHRoZSBuYW1lIG9mIHRoZSBjbGFzc1xuICAgICAgc2l6ZTogdGhpcy5zaXplXG4gICAgfSwgc3VwZXIudG9KU09OKCkpXG4gIH1cblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc2hhcGVzL3BvaW50LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _polyLine = __webpack_require__(10);\n\nvar _polyLine2 = _interopRequireDefault(_polyLine);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Constants = {\n  MINIMUM_POINTS: 3\n};\n\nvar Poly = function (_PolyLine) {\n  _inherits(Poly, _PolyLine);\n\n  function Poly(opts) {\n    _classCallCheck(this, Poly);\n\n    var _this = _possibleConstructorReturn(this, (Poly.__proto__ || Object.getPrototypeOf(Poly)).call(this, opts));\n\n    if (_this._verts.length < Constants.MINIMUM_POINTS) {\n      throw new Error(\"Poly shapes must be initialized with an array of 2d points and contain at least 3 points\");\n    }\n    return _this;\n  }\n\n  _createClass(Poly, [{\n    key: \"removeVert\",\n    value: function removeVert(vertIndex) {\n      if (this._verts.length < Constants.MINIMUM_POINTS) {\n        throw new Error(\"Cannot remove vertex \" + vertIndex + \". It would result in a poly with < 3 points. A poly must contain at least 3 points.\");\n      }\n\n      _get(Poly.prototype.__proto__ || Object.getPrototypeOf(Poly.prototype), \"removeVert\", this).call(this, vertIndex);\n    }\n  }, {\n    key: \"_draw\",\n    value: function _draw(ctx) {\n      var rtn = false;\n      if (this._verts.length >= Constants.MINIMUM_POINTS) {\n        ctx.moveTo(this._verts[0][0], this._verts[0][1]);\n        for (var i = 1; i < this._verts.length; i += 1) {\n          ctx.lineTo(this._verts[i][0], this._verts[i][1]);\n        }\n        ctx.closePath();\n        rtn = true;\n      }\n      return rtn;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Object.assign(_get(Poly.prototype.__proto__ || Object.getPrototypeOf(Poly.prototype), \"toJSON\", this).call(this), {\n        type: \"Poly\" // NOTE: this much match the name of the class\n        // This is also supplied after the super.toJSON()\n        // so that this type overrides the parent class's\n        // type\n      });\n    }\n  }]);\n\n  return Poly;\n}(_polyLine2.default);\n\nexports.default = Poly;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zaGFwZXMvcG9seS5qcz8zNmZiIl0sIm5hbWVzIjpbIkNvbnN0YW50cyIsIk1JTklNVU1fUE9JTlRTIiwiUG9seSIsIm9wdHMiLCJfdmVydHMiLCJsZW5ndGgiLCJFcnJvciIsInZlcnRJbmRleCIsImN0eCIsInJ0biIsIm1vdmVUbyIsImkiLCJsaW5lVG8iLCJjbG9zZVBhdGgiLCJPYmplY3QiLCJhc3NpZ24iLCJ0eXBlIiwiUG9seUxpbmUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBRUE7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLFlBQVk7QUFDaEJDLGtCQUFnQjtBQURBLENBQWxCOztJQUlxQkMsSTs7O0FBQ25CLGdCQUFZQyxJQUFaLEVBQWtCO0FBQUE7O0FBQUEsNEdBQ1ZBLElBRFU7O0FBRWhCLFFBQUksTUFBS0MsTUFBTCxDQUFZQyxNQUFaLEdBQXFCTCxVQUFVQyxjQUFuQyxFQUFtRDtBQUNqRCxZQUFNLElBQUlLLEtBQUosQ0FBVSwwRkFBVixDQUFOO0FBQ0Q7QUFKZTtBQUtqQjs7OzsrQkFFVUMsUyxFQUFXO0FBQ3BCLFVBQUksS0FBS0gsTUFBTCxDQUFZQyxNQUFaLEdBQXFCTCxVQUFVQyxjQUFuQyxFQUFtRDtBQUNqRCxjQUFNLElBQUlLLEtBQUosMkJBQWtDQyxTQUFsQyx5RkFBTjtBQUNEOztBQUVELDZHQUFpQkEsU0FBakI7QUFDRDs7OzBCQUdLQyxHLEVBQUs7QUFDVCxVQUFJQyxNQUFNLEtBQVY7QUFDQSxVQUFJLEtBQUtMLE1BQUwsQ0FBWUMsTUFBWixJQUFzQkwsVUFBVUMsY0FBcEMsRUFBb0Q7QUFDbERPLFlBQUlFLE1BQUosQ0FBVyxLQUFLTixNQUFMLENBQVksQ0FBWixFQUFlLENBQWYsQ0FBWCxFQUE4QixLQUFLQSxNQUFMLENBQVksQ0FBWixFQUFlLENBQWYsQ0FBOUI7QUFDQSxhQUFLLElBQUlPLElBQUksQ0FBYixFQUFnQkEsSUFBSSxLQUFLUCxNQUFMLENBQVlDLE1BQWhDLEVBQXdDTSxLQUFLLENBQTdDLEVBQWdEO0FBQzlDSCxjQUFJSSxNQUFKLENBQVcsS0FBS1IsTUFBTCxDQUFZTyxDQUFaLEVBQWUsQ0FBZixDQUFYLEVBQThCLEtBQUtQLE1BQUwsQ0FBWU8sQ0FBWixFQUFlLENBQWYsQ0FBOUI7QUFDRDtBQUNESCxZQUFJSyxTQUFKO0FBQ0FKLGNBQU0sSUFBTjtBQUNEO0FBQ0QsYUFBT0EsR0FBUDtBQUNEOzs7NkJBRVE7QUFDUCxhQUFPSyxPQUFPQyxNQUFQLHFHQUE4QjtBQUNuQ0MsY0FBTSxNQUQ2QixDQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUpzQixPQUE5QixDQUFQO0FBTUQ7Ozs7RUFyQytCQyxrQjs7a0JBQWJmLEkiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuXG5pbXBvcnQgUG9seUxpbmUgZnJvbSBcIi4vcG9seS1saW5lXCJcblxuY29uc3QgQ29uc3RhbnRzID0ge1xuICBNSU5JTVVNX1BPSU5UUzogM1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb2x5IGV4dGVuZHMgUG9seUxpbmUge1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIob3B0cylcbiAgICBpZiAodGhpcy5fdmVydHMubGVuZ3RoIDwgQ29uc3RhbnRzLk1JTklNVU1fUE9JTlRTKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQb2x5IHNoYXBlcyBtdXN0IGJlIGluaXRpYWxpemVkIHdpdGggYW4gYXJyYXkgb2YgMmQgcG9pbnRzIGFuZCBjb250YWluIGF0IGxlYXN0IDMgcG9pbnRzXCIpXG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlVmVydCh2ZXJ0SW5kZXgpIHtcbiAgICBpZiAodGhpcy5fdmVydHMubGVuZ3RoIDwgQ29uc3RhbnRzLk1JTklNVU1fUE9JTlRTKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCByZW1vdmUgdmVydGV4ICR7dmVydEluZGV4fS4gSXQgd291bGQgcmVzdWx0IGluIGEgcG9seSB3aXRoIDwgMyBwb2ludHMuIEEgcG9seSBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgMyBwb2ludHMuYClcbiAgICB9XG5cbiAgICBzdXBlci5yZW1vdmVWZXJ0KHZlcnRJbmRleClcbiAgfVxuXG5cbiAgX2RyYXcoY3R4KSB7XG4gICAgbGV0IHJ0biA9IGZhbHNlXG4gICAgaWYgKHRoaXMuX3ZlcnRzLmxlbmd0aCA+PSBDb25zdGFudHMuTUlOSU1VTV9QT0lOVFMpIHtcbiAgICAgIGN0eC5tb3ZlVG8odGhpcy5fdmVydHNbMF1bMF0sIHRoaXMuX3ZlcnRzWzBdWzFdKVxuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLl92ZXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjdHgubGluZVRvKHRoaXMuX3ZlcnRzW2ldWzBdLCB0aGlzLl92ZXJ0c1tpXVsxXSlcbiAgICAgIH1cbiAgICAgIGN0eC5jbG9zZVBhdGgoKVxuICAgICAgcnRuID0gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gcnRuXG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oc3VwZXIudG9KU09OKCksIHtcbiAgICAgIHR5cGU6IFwiUG9seVwiIC8vIE5PVEU6IHRoaXMgbXVjaCBtYXRjaCB0aGUgbmFtZSBvZiB0aGUgY2xhc3NcbiAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGFsc28gc3VwcGxpZWQgYWZ0ZXIgdGhlIHN1cGVyLnRvSlNPTigpXG4gICAgICAgICAgICAgICAgICAgLy8gc28gdGhhdCB0aGlzIHR5cGUgb3ZlcnJpZGVzIHRoZSBwYXJlbnQgY2xhc3Mnc1xuICAgICAgICAgICAgICAgICAgIC8vIHR5cGVcbiAgICB9KVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zaGFwZXMvcG9seS5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 26 */
/***/ (function(module, exports) {

	eval("/* eslint-disable func-names */\n\"use strict\";\n\n/**\n * Gets the pixel ratio of a specific HTML canvas 2d context\n * @param  {CanvasRenderingContext2D} canvasCtx\n * @return {number}           pixel ratio of the canvas 2d context\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPixelRatio = getPixelRatio;\nexports.makeCanvasAutoHighDPI = makeCanvasAutoHighDPI;\nfunction getPixelRatio(canvasCtx) {\n  var backingStore = canvasCtx.backingStorePixelRatio || canvasCtx.webkitBackingStorePixelRatio || canvasCtx.mozBackingStorePixelRatio || canvasCtx.msBackingStorePixelRatio || canvasCtx.oBackingStorePixelRatio || canvasCtx.backingStorePixelRatio || 1;\n\n  return (window.devicePixelRatio || 1) / backingStore;\n}\n\n/**\n * Wraps certain canvas 2d context APIs to handle\n * displays with high per-pixel ratios. This is useful\n * so that the API can be called with screen-space coordinates\n * and the wrappers modify the arguments of those APIs to properly\n * handle displays with high pixel densities\n * @param  {CanvasRenderingContext2D} canvasCtx\n * @return {number}           pixel ratio of the wrapped canvas context\n */\nfunction makeCanvasAutoHighDPI(canvasCtx) {\n  var pixelRatio = getPixelRatio(canvasCtx);\n\n  if (pixelRatio === 1) {\n    return 1;\n  }\n\n  var allRatioArgs = [\"fillRect\", \"clearRect\", \"strokeRect\",\n  // \"moveTo\",\n  // \"lineTo\",\n  // \"arcTo\",\n  // \"bezierCurveTo\",\n  \"isPointInPath\", \"isPointInStroke\"\n  // \"quadraticCurveTo\",\n  // \"rect\",\n  // \"translate\",\n  // \"createRadialGradient\",\n  // \"createLinearGradient\"\n  ];\n\n  allRatioArgs.forEach(function (funcName) {\n    canvasCtx[funcName] = function (_super) {\n      return function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        args = args.map(function (a) {\n          return a * pixelRatio;\n        });\n\n        return _super.apply(this, args);\n      };\n    }(canvasCtx[funcName]);\n  });\n\n  // const ratioArgsByIndex = {\n  //   arc: [0, 1, 2]\n  // }\n\n  // Object.getOwnPropertyNames(ratioArgsByIndex).forEach(funcName => {\n  //   const value = ratioArgsByIndex[funcName]\n  //   canvasCtx[funcName] = (function(_super) {\n  //     return function(...args) {\n  //       let i = 0\n  //       let len = 0\n  //       for (i = 0, len = value.length; i < len; i += 1) {\n  //         args[value[i]] *= pixelRatio\n  //       }\n  //       return _super.apply(this, args)\n  //     }\n  //   })(canvasCtx[funcName])\n  // })\n\n  // // Stroke lineWidth adjustment\n  // canvasCtx.stroke = (function(_super) {\n  //   return function(...args) {\n  //     this.lineWidth *= pixelRatio\n  //     _super.apply(this, args)\n  //     this.lineWidth /= pixelRatio\n  //   }\n  // })(canvasCtx.stroke)\n\n  // // Text\n  // //\n  // canvasCtx.fillText = (function(_super) {\n  //   return function(...args) {\n  //     args[1] *= pixelRatio // x\n  //     args[2] *= pixelRatio // y\n\n  //     this.font = this.font.replace(\n  //       /(\\d+)(px|em|rem|pt)/g,\n  //       function(w, m, u) {\n  //         return (m * pixelRatio) + u\n  //       }\n  //     )\n\n  //     _super.apply(this, args)\n\n  //     this.font = this.font.replace(\n  //       /(\\d+)(px|em|rem|pt)/g,\n  //       function(w, m, u) {\n  //         return (m / pixelRatio) + u\n  //       }\n  //     )\n  //   }\n  // })(canvasCtx.fillText)\n\n  // canvasCtx.strokeText = (function(_super) {\n  //   return function(...args) {\n  //     args[1] *= pixelRatio // x\n  //     args[2] *= pixelRatio // y\n\n  //     this.font = this.font.replace(\n  //       /(\\d+)(px|em|rem|pt)/g,\n  //       function(w, m, u) {\n  //         return (m * pixelRatio) + u\n  //       }\n  //     )\n\n  //     _super.apply(this, args)\n\n  //     this.font = this.font.replace(\n  //       /(\\d+)(px|em|rem|pt)/g,\n  //       function(w, m, u) {\n  //         return (m / pixelRatio) + u\n  //       }\n  //     )\n  //   }\n  // })(canvasCtx.strokeText)\n\n\n  var setTransformArgs = [pixelRatio, 0, 0, pixelRatio, 0, 0];\n  canvasCtx.setTransform = function (_super) {\n    return function () {\n      _super.apply(this, setTransformArgs);\n      this.transform.apply(this, arguments);\n    };\n  }(canvasCtx.setTransform);\n\n  return pixelRatio;\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 27 */
/***/ (function(module, exports) {

	eval("\"use strict\";\n\n/**\n * Binds a this arg to a list of different function names.\n * This is most widely used to bind a this to member functions\n * that are used as callbacks in some fashion\n * @param  {string[]} funcNames array of member function names that are part of thisArg\n * @param  {Object} thisArg   object to bind\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bindAll = bindAll;\nfunction bindAll(funcNames, thisArg) {\n  funcNames.forEach(function (funcName) {\n    if (!thisArg[funcName]) {\n      return;\n    }\n    thisArg[funcName] = thisArg[funcName].bind(thisArg);\n  });\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi91dGlsL3V0aWxzLmpzPzMxMzEiXSwibmFtZXMiOlsiYmluZEFsbCIsImZ1bmNOYW1lcyIsInRoaXNBcmciLCJmb3JFYWNoIiwiZnVuY05hbWUiLCJiaW5kIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7Ozs7Ozs7Ozs7UUFPZ0JBLE8sR0FBQUEsTztBQUFULFNBQVNBLE9BQVQsQ0FBaUJDLFNBQWpCLEVBQTRCQyxPQUE1QixFQUFxQztBQUMxQ0QsWUFBVUUsT0FBVixDQUFrQixvQkFBWTtBQUM1QixRQUFJLENBQUNELFFBQVFFLFFBQVIsQ0FBTCxFQUF3QjtBQUN0QjtBQUNEO0FBQ0RGLFlBQVFFLFFBQVIsSUFBb0JGLFFBQVFFLFFBQVIsRUFBa0JDLElBQWxCLENBQXVCSCxPQUF2QixDQUFwQjtBQUNELEdBTEQ7QUFNRCIsImZpbGUiOiIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiXG5cbi8qKlxuICogQmluZHMgYSB0aGlzIGFyZyB0byBhIGxpc3Qgb2YgZGlmZmVyZW50IGZ1bmN0aW9uIG5hbWVzLlxuICogVGhpcyBpcyBtb3N0IHdpZGVseSB1c2VkIHRvIGJpbmQgYSB0aGlzIHRvIG1lbWJlciBmdW5jdGlvbnNcbiAqIHRoYXQgYXJlIHVzZWQgYXMgY2FsbGJhY2tzIGluIHNvbWUgZmFzaGlvblxuICogQHBhcmFtICB7c3RyaW5nW119IGZ1bmNOYW1lcyBhcnJheSBvZiBtZW1iZXIgZnVuY3Rpb24gbmFtZXMgdGhhdCBhcmUgcGFydCBvZiB0aGlzQXJnXG4gKiBAcGFyYW0gIHtPYmplY3R9IHRoaXNBcmcgICBvYmplY3QgdG8gYmluZFxuICovXG5leHBvcnQgZnVuY3Rpb24gYmluZEFsbChmdW5jTmFtZXMsIHRoaXNBcmcpIHtcbiAgZnVuY05hbWVzLmZvckVhY2goZnVuY05hbWUgPT4ge1xuICAgIGlmICghdGhpc0FyZ1tmdW5jTmFtZV0pIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB0aGlzQXJnW2Z1bmNOYW1lXSA9IHRoaXNBcmdbZnVuY05hbWVdLmJpbmQodGhpc0FyZylcbiAgfSlcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3V0aWwvdXRpbHMuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _aabox2d = __webpack_require__(2);\n\nvar AABox2d = _interopRequireWildcard(_aabox2d);\n\nvar _aggregation2 = __webpack_require__(7);\n\nvar _aggregation3 = _interopRequireDefault(_aggregation2);\n\nvar _transform2d = __webpack_require__(11);\n\nvar _eventHandler = __webpack_require__(12);\n\nvar _eventHandler2 = _interopRequireDefault(_eventHandler);\n\nvar _mat2d = __webpack_require__(4);\n\nvar _mat2d2 = _interopRequireDefault(_mat2d);\n\nvar _glMatrix = __webpack_require__(1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Camera modification event\n * @event EventedCamera#changed\n * @type {object}\n * @property {string} attr Name of the attribute modified\n * @property {} prevVal Previous value of the attribute prior to modification\n * @property {} currVal Value of the attribute post modification\n */\n\n/**\n * @class Base camera class for 2d screen projections\n *        The base class is used only for the NDC to screen space trasform\n * @extends {EventHandler}\n */\nvar BaseCamera2d = function (_EventHandler) {\n  _inherits(BaseCamera2d, _EventHandler);\n\n  /**\n   * Constructs a new 2d camera\n   * @param  {AABox2d}  viewport           Initial camera viewport boundary, in pixels\n   * @param  {Vec2d}  projectionDimensions The width and height of the viewport in world coordinates\n   * @param  {Boolean} [flipY=false]       Whether world y coordinates are flipped, if false\n   *                                       the top of the viewport window is smaller in y, and the bottom\n   *                                       is larger. If true, the bottom has smaller y coords, and the top\n   *                                       larger\n   * @return {BaseCamera2d}\n   */\n  function BaseCamera2d(viewport, projectionDimensions) {\n    var flipY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    _classCallCheck(this, BaseCamera2d);\n\n    var _this = _possibleConstructorReturn(this, (BaseCamera2d.__proto__ || Object.getPrototypeOf(BaseCamera2d)).call(this, [\"changed\", \"changed:xform\"]));\n    // initialize modify events\n\n\n    _this._viewport = AABox2d.clone(viewport);\n    _this._projectionDimensions = _glMatrix.vec2.clone(projectionDimensions);\n    _this._yflip = flipY;\n\n    // stores the NDC space to screen space matrix\n    // NDC (normalized device coordinates) is the space\n    // where the left edge of the window is -1, the right edge is 1\n    // the top edge is -1, and the bottom edge is 1.\n    _this._screenMatrix = _mat2d2.default.create();\n\n    // this flag is dirty whenever the attributes for the\n    // ndc-to-screen projection are modified\n    _this._screenDirty = true;\n    return _this;\n  }\n\n  /**\n   * Returns true if the world Y coordinates go from negative to positive\n   * in a bottom to top fashion in screen space, false otherwise.\n   * @return {Boolean}\n   */\n\n\n  _createClass(BaseCamera2d, [{\n    key: \"isYFlipped\",\n    value: function isYFlipped() {\n      return this._yflip;\n    }\n\n    /**\n     * Sets the camera's screen-space viewport bounds\n     * @param  {AABox2d} viewport\n     * @fires  EventedCamera#changed\n     * @return {BaseCamera2d}\n     */\n\n  }, {\n    key: \"viewport\",\n    set: function set(viewport) {\n      if (!AABox2d.equals(viewport, this._viewport)) {\n        var prev = AABox2d.clone(this._viewport);\n        AABox2d.copy(this._viewport, viewport);\n        this._screenDirty = true;\n        this._worldToScreenOutdated = true;\n        this.fire(\"changed\", {\n          attr: \"viewport\",\n          prevVal: prev,\n          currVal: viewport\n        });\n      }\n      return this;\n    }\n\n    /**\n     * Gets a copy of the camera's current viewport\n     * @return {AABox2d}\n     */\n    ,\n    get: function get() {\n      return AABox2d.clone(this._viewport);\n    }\n\n    /**\n     * Gets a reference to the camera's current viewport\n     * @return {AABox2d}\n     * @readOnly\n     */\n\n  }, {\n    key: \"viewportRef\",\n    get: function get() {\n      return this._viewport;\n    }\n\n    /**\n     * Gets the current NDC to screen space transform matrix\n     * @return {Mat2d}\n     */\n\n  }, {\n    key: \"screenMatrix\",\n    get: function get() {\n      if (this._screenDirty) {\n        var center = [0, 0];\n        var extents = [0, 0];\n        AABox2d.getCenter(center, this._viewport);\n        AABox2d.getExtents(extents, this._viewport);\n        _mat2d2.default.set(this._screenMatrix, extents[0], 0, 0, extents[1], center[0], center[1]);\n        this._worldToScreenOutdated = true;\n        this._screenDirty = false;\n      }\n      return this._screenMatrix;\n    }\n  }]);\n\n  return BaseCamera2d;\n}(_eventHandler2.default);\n\n/**\n * @class Main 2d camera class to manage othographic 2d projections\n * @extends {BaseCamera2d}\n * @mixin {EventedTransform2d}\n */\n\n\nvar Camera2d = function (_aggregation) {\n  _inherits(Camera2d, _aggregation);\n\n  /**\n   * Creates a new Camera2d object\n   * @param  {AABox2d} viewport             The camera's viewport bounds in pixel space\n   * @param  {Vec2d} projectionDimensions The width/height of the camera's viewport in world coordinates\n   * @param  {Boolean} flipY              True if the direction from negative to positive Y coordinates\n   *                                      go from the bottom to top of the window. False means Y coords\n   *                                      from negative to positive values go from the top to the bottom\n   * @return {Camera2d}\n   */\n  function Camera2d(viewport, projectionDimensions, flipY) {\n    _classCallCheck(this, Camera2d);\n\n    var _this2 = _possibleConstructorReturn(this, (Camera2d.__proto__ || Object.getPrototypeOf(Camera2d)).call(this, viewport, projectionDimensions, flipY));\n\n    _this2._viewMatrix = _mat2d2.default.create();\n    _this2._viewDirty = true;\n    _this2._projMatrix = _mat2d2.default.create();\n    _this2._projDirty = true;\n    return _this2;\n  }\n\n  /**\n   * Sets the projection dimensions of the camera's view. This is the width/height\n   * in world space coordiantes of the camera's view.\n   * @param  {Vec2d} projectionDimensions\n   * @return {Camera2d} this\n   */\n\n\n  _createClass(Camera2d, [{\n    key: \"_localXformUpdated\",\n\n\n    /**\n     * Called when the local transform (does not include parent transforms) of the Transform2d\n     * mixin is modified. Used to be notified internally that the view-to-screen space\n     * transformation needs updating\n     * @private\n     */\n    value: function _localXformUpdated() {\n      this._boundsOutOfDate = true;\n    }\n\n    /**\n     * Called when the global matrix (includes parent transforms) of the\n     * Transform2d mixin is modified. Used to be notified internally that\n     * the view-to-screen space transformation needs updating\n     * @private\n     */\n\n  }, {\n    key: \"_globalXformUpdated\",\n    value: function _globalXformUpdated() {\n      this._boundsOutOfDate = true;\n    }\n\n    /**\n     * Gets the transformation matrix from world space to view/camera space\n     * @return {Mat2d}\n     */\n\n  }, {\n    key: \"_matricesDirty\",\n\n\n    /**\n     * Returns true if any of the dirty flags are active\n     * @return {Boolean}\n     * @private\n     */\n    value: function _matricesDirty() {\n      return this._boundsOutOfDate || this._lxformDirty || this._xformDirty || this._viewDirty || this._projDirty || this._screenDirty;\n    }\n\n    /**\n     * Gets the transformation matrix from world space to screen space.\n     * @return {Mat2d}\n     */\n\n  }, {\n    key: \"projectionDimensions\",\n    set: function set(projectionDimensions) {\n      if (!_glMatrix.vec2.equals(projectionDimensions, this._projectionDimensions)) {\n        var prev = _glMatrix.vec2.clone(this._projectionDimensions);\n        AABox2d.copy(this._projectionDimensions, projectionDimensions);\n        this._viewDirty = true;\n        this._projDirty = true;\n        // this._yflip = this._projectionDimensions[3] < this._projectionDimensions[1]\n        this.fire(\"changed\", {\n          attr: \"projectionDimensions\",\n          prevVal: prev,\n          currVal: projectionDimensions\n        });\n      }\n      return this;\n    }\n\n    /**\n     * Gets a copy of the camera's current projection dimensions\n     * @return {Vec2d}\n     */\n    ,\n    get: function get() {\n      return _glMatrix.vec2.clone(this._projectionDimensions);\n    }\n\n    /**\n     * Gets a reference to the camera's current projection dimensions\n     * @return {Vec2d}\n     * @readOnly\n     */\n\n  }, {\n    key: \"projectionDimensionsRef\",\n    get: function get() {\n      return this._projectionDimensions;\n    }\n  }, {\n    key: \"viewMatrix\",\n    get: function get() {\n      if (this._viewDirty || this._boundsOutOfDate || this._xformDirty || this._lxformDirty) {\n        // the matrix has been marked dirty, so recalculate\n        var pos = [0, 0];\n        var scale = [0, 0];\n        var rot = [0, 0];\n        var xform = this.globalXform;\n        _mat2d2.default.svd(pos, scale, rot, xform);\n        _mat2d2.default.fromTranslation(this._viewMatrix, _glMatrix.vec2.negate(pos, pos));\n        _mat2d2.default.rotate(this._viewMatrix, this._viewMatrix, -rot[0]);\n        _mat2d2.default.scale(this._viewMatrix, this._viewMatrix, scale);\n        _mat2d2.default.rotate(this._viewMatrix, this._viewMatrix, -rot[1]);\n        this._worldToScreenOutdated = true;\n        this._viewDirty = false;\n      }\n      return this._viewMatrix;\n    }\n\n    /**\n     * Gets the orthographic projection transformation matrix from\n     * view to NDC (normalized device coordinates) space\n     * @return {Mat2d}\n     */\n\n  }, {\n    key: \"projMatrix\",\n    get: function get() {\n      if (this._projDirty) {\n        var flip = this._yflip ? -1 : 1;\n        _mat2d2.default.set(this._projMatrix, 2.0 / this._projectionDimensions[0], 0, 0, flip * 2.0 / this._projectionDimensions[1], 0, 0);\n        this._worldToScreenOutdated = true;\n        this._projDirty = false;\n      }\n      return this._projMatrix;\n    }\n  }, {\n    key: \"worldToScreenMatrix\",\n    get: function get() {\n      if (!this._worldToScreenMatrix || this._worldToScreenOutdated || this._matricesDirty()) {\n        if (!this._worldToScreenMatrix) {\n          this._worldToScreenMatrix = _mat2d2.default.create();\n        }\n        _mat2d2.default.copy(this._worldToScreenMatrix, this.viewMatrix);\n        _mat2d2.default.multiply(this._worldToScreenMatrix, this.projMatrix, this._worldToScreenMatrix);\n        _mat2d2.default.multiply(this._worldToScreenMatrix, this.screenMatrix, this._worldToScreenMatrix);\n        this._worldToScreenOutdated = false;\n        this._screenToWorldOutdated = true;\n      }\n      return this._worldToScreenMatrix;\n    }\n\n    /**\n     * Gets teh transform matrix from screen space to world space.\n     * @return {[type]} [description]\n     */\n\n  }, {\n    key: \"screenToWorldMatrix\",\n    get: function get() {\n      if (!this._screenToWorld || this._screenToWorldOutdated || this._matricesDirty()) {\n        if (!this._screenToWorld) {\n          this._screenToWorld = _mat2d2.default.create();\n        }\n        _mat2d2.default.copy(this._screenToWorld, this.worldToScreenMatrix);\n        _mat2d2.default.invert(this._screenToWorld, this._screenToWorld);\n        this._screenToWorldOutdated = false;\n      }\n      return this._screenToWorld;\n    }\n  }]);\n\n  return Camera2d;\n}((0, _aggregation3.default)(BaseCamera2d, (0, _transform2d.createEventedTransform2dMixin)(\"changed:xform\")));\n\nexports.default = Camera2d;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n;\n(function (root, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === \"object\") {\n        module.exports = factory();\n    } else {\n        root.ResizeSensor = factory();\n    }\n}(this, function () {\n\n    //Make sure it does not throw in a SSR (Server Side Rendering) situation\n    if (typeof window === \"undefined\") {\n        return null;\n    }\n    // Only used for the dirty checking, so the event callback count is limted to max 1 call per fps per sensor.\n    // In combination with the event based resize sensor this saves cpu time, because the sensor is too fast and\n    // would generate too many unnecessary events.\n    var requestAnimationFrame = window.requestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        function (fn) {\n            return window.setTimeout(fn, 20);\n        };\n\n    /**\n     * Iterate over each of the provided element(s).\n     *\n     * @param {HTMLElement|HTMLElement[]} elements\n     * @param {Function}                  callback\n     */\n    function forEachElement(elements, callback){\n        var elementsType = Object.prototype.toString.call(elements);\n        var isCollectionTyped = ('[object Array]' === elementsType\n            || ('[object NodeList]' === elementsType)\n            || ('[object HTMLCollection]' === elementsType)\n            || ('[object Object]' === elementsType)\n            || ('undefined' !== typeof jQuery && elements instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && elements instanceof Elements) //mootools\n        );\n        var i = 0, j = elements.length;\n        if (isCollectionTyped) {\n            for (; i < j; i++) {\n                callback(elements[i]);\n            }\n        } else {\n            callback(elements);\n        }\n    }\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    var ResizeSensor = function(element, callback) {\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            var q = [];\n            this.add = function(ev) {\n                q.push(ev);\n            };\n\n            var i, j;\n            this.call = function() {\n                for (i = 0, j = q.length; i < j; i++) {\n                    q[i].call();\n                }\n            };\n\n            this.remove = function(ev) {\n                var newQueue = [];\n                for(i = 0, j = q.length; i < j; i++) {\n                    if(q[i] !== ev) newQueue.push(q[i]);\n                }\n                q = newQueue;\n            }\n\n            this.length = function() {\n                return q.length;\n            }\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {String}      prop\n         * @returns {String|Number}\n         */\n        function getComputedStyle(element, prop) {\n            if (element.currentStyle) {\n                return element.currentStyle[prop];\n            } else if (window.getComputedStyle) {\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\n            } else {\n                return element.style[prop];\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element.resizedAttached) {\n                element.resizedAttached = new EventQueue();\n                element.resizedAttached.add(resized);\n            } else if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            element.resizeSensor = document.createElement('div');\n            element.resizeSensor.className = 'resize-sensor';\n            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\n            element.resizeSensor.style.cssText = style;\n            element.resizeSensor.innerHTML =\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + '\"></div>' +\n                '</div>' +\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n                '</div>';\n            element.appendChild(element.resizeSensor);\n\n            if (getComputedStyle(element, 'position') == 'static') {\n                element.style.position = 'relative';\n            }\n\n            var expand = element.resizeSensor.childNodes[0];\n            var expandChild = expand.childNodes[0];\n            var shrink = element.resizeSensor.childNodes[1];\n            var dirty, rafId, newWidth, newHeight;\n            var lastWidth = element.offsetWidth;\n            var lastHeight = element.offsetHeight;\n\n            var reset = function() {\n                expandChild.style.width = '100000px';\n                expandChild.style.height = '100000px';\n\n                expand.scrollLeft = 100000;\n                expand.scrollTop = 100000;\n\n                shrink.scrollLeft = 100000;\n                shrink.scrollTop = 100000;\n            };\n\n            reset();\n\n            var onResized = function() {\n                rafId = 0;\n\n                if (!dirty) return;\n\n                lastWidth = newWidth;\n                lastHeight = newHeight;\n\n                if (element.resizedAttached) {\n                    element.resizedAttached.call();\n                }\n            };\n\n            var onScroll = function() {\n                newWidth = element.offsetWidth;\n                newHeight = element.offsetHeight;\n                dirty = newWidth != lastWidth || newHeight != lastHeight;\n\n                if (dirty && !rafId) {\n                    rafId = requestAnimationFrame(onResized);\n                }\n\n                reset();\n            };\n\n            var addEvent = function(el, name, cb) {\n                if (el.attachEvent) {\n                    el.attachEvent('on' + name, cb);\n                } else {\n                    el.addEventListener(name, cb);\n                }\n            };\n\n            addEvent(expand, 'scroll', onScroll);\n            addEvent(shrink, 'scroll', onScroll);\n        }\n\n        forEachElement(element, function(elem){\n            attachResizeEvent(elem, callback);\n        });\n\n        this.detach = function(ev) {\n            ResizeSensor.detach(element, ev);\n        };\n    };\n\n    ResizeSensor.detach = function(element, ev) {\n        forEachElement(element, function(elem){\n            if(elem.resizedAttached && typeof ev == \"function\"){\n                elem.resizedAttached.remove(ev);\n                if(elem.resizedAttached.length()) return;\n            }\n            if (elem.resizeSensor) {\n                if (elem.contains(elem.resizeSensor)) {\n                    elem.removeChild(elem.resizeSensor);\n                }\n                delete elem.resizeSensor;\n                delete elem.resizedAttached;\n            }\n        });\n    };\n\n    return ResizeSensor;\n\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 30 */
/***/ (function(module, exports) {

	eval("module.exports = {\n\t\"name\": \"@mapd/mapd-draw\",\n\t\"description\": \"A Utility Library for drawing and interacting with shapes using canvas\",\n\t\"version\": \"1.1.0\",\n\t\"homepage\": \"https://omnisci.com\",\n\t\"bugs\": \"https://github.com/omnisci/mapd-draw/issues\",\n\t\"main\": \"dist/mapd-draw.js\",\n\t\"author\": \"MapD Technologies\",\n\t\"license\": \"MIT\",\n\t\"engines\": {\n\t\t\"node\": \">=4.0.0\"\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git+https://github.com/omnisci/mapd-draw.git\"\n\t},\n\t\"dependencies\": {\n\t\t\"gl-matrix\": \"^2.3.2\",\n\t\t\"css-element-queries\": \"^0.4.0\"\n\t},\n\t\"devDependencies\": {\n\t\t\"babel-core\": \"^6.10.4\",\n\t\t\"babel-eslint\": \"^10.0.1\",\n\t\t\"babel-loader\": \"^6.2.4\",\n\t\t\"babel-preset-es2015\": \"^6.9.0\",\n\t\t\"babel-preset-stage-0\": \"^6.5.0\",\n\t\t\"babel-register\": \"^6.24.1\",\n\t\t\"chai\": \"^3.5.0\",\n\t\t\"eslint\": \"^3.0.1\",\n\t\t\"eslint-plugin-react\": \"^7.12.4\",\n\t\t\"http-server\": \"^0.11.1\",\n\t\t\"json-loader\": \"0.5.4\",\n\t\t\"mocha\": \"^6.0.2\",\n\t\t\"pre-commit\": \"^1.2.2\",\n\t\t\"webpack\": \"^1.13.1\"\n\t},\n\t\"scripts\": {\n\t\t\"build\": \"npm run build:prod; npm run build:dev\",\n\t\t\"build:prod\": \"npm run webpack\",\n\t\t\"build:dev\": \"npm run webpack:dev\",\n\t\t\"clean\": \"bash scripts/clean.sh\",\n\t\t\"eslint\": \"eslint -c ./.eslintrc.json\",\n\t\t\"lint-fix\": \"eslint --fix $(find src -name \\\"*.js\\\" ! -name '*.spec.js')\",\n\t\t\"lint\": \"eslint $(find src -name \\\"*.js\\\" ! -name '*.spec.js')\",\n\t\t\"start\": \"npm run build; http-server -p 8080 -o;\",\n\t\t\"watch:dev\": \"node node_modules/webpack/bin/webpack.js --progress --colors --watch --config webpack.dev.config.js\",\n\t\t\"webpack\": \"node node_modules/webpack/bin/webpack.js\",\n\t\t\"webpack:dev\": \"node node_modules/webpack/bin/webpack.js --config webpack.dev.config.js\",\n\t\t\"test\": \"mocha --recursive --require babel-register\"\n\t},\n\t\"pre-commit\": [\n\t\t\"lint\",\n\t\t\"test\"\n\t]\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vcGFja2FnZS5qc29uPzBmYTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsd0JBQXdCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcblx0XCJuYW1lXCI6IFwiQG1hcGQvbWFwZC1kcmF3XCIsXG5cdFwiZGVzY3JpcHRpb25cIjogXCJBIFV0aWxpdHkgTGlicmFyeSBmb3IgZHJhd2luZyBhbmQgaW50ZXJhY3Rpbmcgd2l0aCBzaGFwZXMgdXNpbmcgY2FudmFzXCIsXG5cdFwidmVyc2lvblwiOiBcIjEuMS4wXCIsXG5cdFwiaG9tZXBhZ2VcIjogXCJodHRwczovL29tbmlzY2kuY29tXCIsXG5cdFwiYnVnc1wiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9vbW5pc2NpL21hcGQtZHJhdy9pc3N1ZXNcIixcblx0XCJtYWluXCI6IFwiZGlzdC9tYXBkLWRyYXcuanNcIixcblx0XCJhdXRob3JcIjogXCJNYXBEIFRlY2hub2xvZ2llc1wiLFxuXHRcImxpY2Vuc2VcIjogXCJNSVRcIixcblx0XCJlbmdpbmVzXCI6IHtcblx0XHRcIm5vZGVcIjogXCI+PTQuMC4wXCJcblx0fSxcblx0XCJyZXBvc2l0b3J5XCI6IHtcblx0XHRcInR5cGVcIjogXCJnaXRcIixcblx0XHRcInVybFwiOiBcImdpdCtodHRwczovL2dpdGh1Yi5jb20vb21uaXNjaS9tYXBkLWRyYXcuZ2l0XCJcblx0fSxcblx0XCJkZXBlbmRlbmNpZXNcIjoge1xuXHRcdFwiZ2wtbWF0cml4XCI6IFwiXjIuMy4yXCIsXG5cdFx0XCJjc3MtZWxlbWVudC1xdWVyaWVzXCI6IFwiXjAuNC4wXCJcblx0fSxcblx0XCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuXHRcdFwiYmFiZWwtY29yZVwiOiBcIl42LjEwLjRcIixcblx0XHRcImJhYmVsLWVzbGludFwiOiBcIl4xMC4wLjFcIixcblx0XHRcImJhYmVsLWxvYWRlclwiOiBcIl42LjIuNFwiLFxuXHRcdFwiYmFiZWwtcHJlc2V0LWVzMjAxNVwiOiBcIl42LjkuMFwiLFxuXHRcdFwiYmFiZWwtcHJlc2V0LXN0YWdlLTBcIjogXCJeNi41LjBcIixcblx0XHRcImJhYmVsLXJlZ2lzdGVyXCI6IFwiXjYuMjQuMVwiLFxuXHRcdFwiY2hhaVwiOiBcIl4zLjUuMFwiLFxuXHRcdFwiZXNsaW50XCI6IFwiXjMuMC4xXCIsXG5cdFx0XCJlc2xpbnQtcGx1Z2luLXJlYWN0XCI6IFwiXjcuMTIuNFwiLFxuXHRcdFwiaHR0cC1zZXJ2ZXJcIjogXCJeMC4xMS4xXCIsXG5cdFx0XCJqc29uLWxvYWRlclwiOiBcIjAuNS40XCIsXG5cdFx0XCJtb2NoYVwiOiBcIl42LjAuMlwiLFxuXHRcdFwicHJlLWNvbW1pdFwiOiBcIl4xLjIuMlwiLFxuXHRcdFwid2VicGFja1wiOiBcIl4xLjEzLjFcIlxuXHR9LFxuXHRcInNjcmlwdHNcIjoge1xuXHRcdFwiYnVpbGRcIjogXCJucG0gcnVuIGJ1aWxkOnByb2Q7IG5wbSBydW4gYnVpbGQ6ZGV2XCIsXG5cdFx0XCJidWlsZDpwcm9kXCI6IFwibnBtIHJ1biB3ZWJwYWNrXCIsXG5cdFx0XCJidWlsZDpkZXZcIjogXCJucG0gcnVuIHdlYnBhY2s6ZGV2XCIsXG5cdFx0XCJjbGVhblwiOiBcImJhc2ggc2NyaXB0cy9jbGVhbi5zaFwiLFxuXHRcdFwiZXNsaW50XCI6IFwiZXNsaW50IC1jIC4vLmVzbGludHJjLmpzb25cIixcblx0XHRcImxpbnQtZml4XCI6IFwiZXNsaW50IC0tZml4ICQoZmluZCBzcmMgLW5hbWUgXFxcIiouanNcXFwiICEgLW5hbWUgJyouc3BlYy5qcycpXCIsXG5cdFx0XCJsaW50XCI6IFwiZXNsaW50ICQoZmluZCBzcmMgLW5hbWUgXFxcIiouanNcXFwiICEgLW5hbWUgJyouc3BlYy5qcycpXCIsXG5cdFx0XCJzdGFydFwiOiBcIm5wbSBydW4gYnVpbGQ7IGh0dHAtc2VydmVyIC1wIDgwODAgLW87XCIsXG5cdFx0XCJ3YXRjaDpkZXZcIjogXCJub2RlIG5vZGVfbW9kdWxlcy93ZWJwYWNrL2Jpbi93ZWJwYWNrLmpzIC0tcHJvZ3Jlc3MgLS1jb2xvcnMgLS13YXRjaCAtLWNvbmZpZyB3ZWJwYWNrLmRldi5jb25maWcuanNcIixcblx0XHRcIndlYnBhY2tcIjogXCJub2RlIG5vZGVfbW9kdWxlcy93ZWJwYWNrL2Jpbi93ZWJwYWNrLmpzXCIsXG5cdFx0XCJ3ZWJwYWNrOmRldlwiOiBcIm5vZGUgbm9kZV9tb2R1bGVzL3dlYnBhY2svYmluL3dlYnBhY2suanMgLS1jb25maWcgd2VicGFjay5kZXYuY29uZmlnLmpzXCIsXG5cdFx0XCJ0ZXN0XCI6IFwibW9jaGEgLS1yZWN1cnNpdmUgLS1yZXF1aXJlIGJhYmVsLXJlZ2lzdGVyXCJcblx0fSxcblx0XCJwcmUtY29tbWl0XCI6IFtcblx0XHRcImxpbnRcIixcblx0XHRcInRlc3RcIlxuXHRdXG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL3BhY2thZ2UuanNvblxuLy8gbW9kdWxlIGlkID0gMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ })
/******/ ])
});
;