(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["MapdDraw"] = factory();
	else
		root["MapdDraw"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 24);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_matrix_common_js__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__gl_matrix_mat2_js__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__gl_matrix_mat2d_js__ = __webpack_require__(29);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__gl_matrix_mat3_js__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__gl_matrix_mat4_js__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__gl_matrix_quat_js__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__gl_matrix_quat2_js__ = __webpack_require__(30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__gl_matrix_vec2_js__ = __webpack_require__(31);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__gl_matrix_vec3_js__ = __webpack_require__(16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__gl_matrix_vec4_js__ = __webpack_require__(17);\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return __WEBPACK_IMPORTED_MODULE_0__gl_matrix_common_js__; });\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return __WEBPACK_IMPORTED_MODULE_1__gl_matrix_mat2_js__; });\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return __WEBPACK_IMPORTED_MODULE_2__gl_matrix_mat2d_js__; });\n/* unused harmony reexport mat3 */\n/* unused harmony reexport mat4 */\n/* unused harmony reexport quat */\n/* unused harmony reexport quat2 */\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return __WEBPACK_IMPORTED_MODULE_7__gl_matrix_vec2_js__; });\n/* unused harmony reexport vec3 */\n/* unused harmony reexport vec4 */\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9saWIvZ2wtbWF0cml4LmpzPzY5MGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFrRDtBQUNOO0FBQ0U7QUFDRjtBQUNBO0FBQ0E7QUFDRTtBQUNGO0FBQ0E7QUFDQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vZ2wtbWF0cml4L2NvbW1vbi5qc1wiO1xyXG5pbXBvcnQgKiBhcyBtYXQyIGZyb20gXCIuL2dsLW1hdHJpeC9tYXQyLmpzXCI7XHJcbmltcG9ydCAqIGFzIG1hdDJkIGZyb20gXCIuL2dsLW1hdHJpeC9tYXQyZC5qc1wiO1xyXG5pbXBvcnQgKiBhcyBtYXQzIGZyb20gXCIuL2dsLW1hdHJpeC9tYXQzLmpzXCI7XHJcbmltcG9ydCAqIGFzIG1hdDQgZnJvbSBcIi4vZ2wtbWF0cml4L21hdDQuanNcIjtcclxuaW1wb3J0ICogYXMgcXVhdCBmcm9tIFwiLi9nbC1tYXRyaXgvcXVhdC5qc1wiO1xyXG5pbXBvcnQgKiBhcyBxdWF0MiBmcm9tIFwiLi9nbC1tYXRyaXgvcXVhdDIuanNcIjtcclxuaW1wb3J0ICogYXMgdmVjMiBmcm9tIFwiLi9nbC1tYXRyaXgvdmVjMi5qc1wiO1xyXG5pbXBvcnQgKiBhcyB2ZWMzIGZyb20gXCIuL2dsLW1hdHJpeC92ZWMzLmpzXCI7XHJcbmltcG9ydCAqIGFzIHZlYzQgZnJvbSBcIi4vZ2wtbWF0cml4L3ZlYzQuanNcIjtcclxuXHJcbmV4cG9ydCB7IGdsTWF0cml4LCBtYXQyLCBtYXQyZCwgbWF0MywgbWF0NCwgcXVhdCwgcXVhdDIsIHZlYzIsIHZlYzMsIHZlYzQgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2xpYi9nbC1tYXRyaXguanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EPSILON\", function() { return EPSILON; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ARRAY_TYPE\", function() { return ARRAY_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RANDOM\", function() { return RANDOM; });\n/* harmony export (immutable) */ __webpack_exports__[\"setMatrixArrayType\"] = setMatrixArrayType;\n/* harmony export (immutable) */ __webpack_exports__[\"toRadian\"] = toRadian;\n/* harmony export (immutable) */ __webpack_exports__[\"equals\"] = equals;\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nvar EPSILON = 0.000001;\r\nvar ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nvar RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nfunction setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nfunction toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9saWIvZ2wtbWF0cml4L2NvbW1vbi5qcz8yNzliIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDTztBQUNBO0FBQ0E7O0FBRVA7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCO0FBQ087QUFDUDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDTztBQUNQO0FBQ0EiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb21tb24gdXRpbGl0aWVzXHJcbiAqIEBtb2R1bGUgZ2xNYXRyaXhcclxuICovXHJcblxyXG4vLyBDb25maWd1cmF0aW9uIENvbnN0YW50c1xyXG5leHBvcnQgdmFyIEVQU0lMT04gPSAwLjAwMDAwMTtcclxuZXhwb3J0IHZhciBBUlJBWV9UWVBFID0gdHlwZW9mIEZsb2F0MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBGbG9hdDMyQXJyYXkgOiBBcnJheTtcclxuZXhwb3J0IHZhciBSQU5ET00gPSBNYXRoLnJhbmRvbTtcclxuXHJcbi8qKlxyXG4gKiBTZXRzIHRoZSB0eXBlIG9mIGFycmF5IHVzZWQgd2hlbiBjcmVhdGluZyBuZXcgdmVjdG9ycyBhbmQgbWF0cmljZXNcclxuICpcclxuICogQHBhcmFtIHtUeXBlfSB0eXBlIEFycmF5IHR5cGUsIHN1Y2ggYXMgRmxvYXQzMkFycmF5IG9yIEFycmF5XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0TWF0cml4QXJyYXlUeXBlKHR5cGUpIHtcclxuICBBUlJBWV9UWVBFID0gdHlwZTtcclxufVxyXG5cclxudmFyIGRlZ3JlZSA9IE1hdGguUEkgLyAxODA7XHJcblxyXG4vKipcclxuICogQ29udmVydCBEZWdyZWUgVG8gUmFkaWFuXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBhIEFuZ2xlIGluIERlZ3JlZXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0b1JhZGlhbihhKSB7XHJcbiAgcmV0dXJuIGEgKiBkZWdyZWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUZXN0cyB3aGV0aGVyIG9yIG5vdCB0aGUgYXJndW1lbnRzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSB2YWx1ZSwgd2l0aGluIGFuIGFic29sdXRlXHJcbiAqIG9yIHJlbGF0aXZlIHRvbGVyYW5jZSBvZiBnbE1hdHJpeC5FUFNJTE9OIChhbiBhYnNvbHV0ZSB0b2xlcmFuY2UgaXMgdXNlZCBmb3IgdmFsdWVzIGxlc3NcclxuICogdGhhbiBvciBlcXVhbCB0byAxLjAsIGFuZCBhIHJlbGF0aXZlIHRvbGVyYW5jZSBpcyB1c2VkIGZvciBsYXJnZXIgdmFsdWVzKVxyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gYSBUaGUgZmlyc3QgbnVtYmVyIHRvIHRlc3QuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIFRoZSBzZWNvbmQgbnVtYmVyIHRvIHRlc3QuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBudW1iZXJzIGFyZSBhcHByb3hpbWF0ZWx5IGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcclxuICByZXR1cm4gTWF0aC5hYnMoYSAtIGIpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEpLCBNYXRoLmFicyhiKSk7XHJcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2xpYi9nbC1tYXRyaXgvY29tbW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MINX\", function() { return MINX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MINY\", function() { return MINY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAXX\", function() { return MAXX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MAXY\", function() { return MAXY; });\n/* harmony export (immutable) */ __webpack_exports__[\"set\"] = set;\n/* harmony export (immutable) */ __webpack_exports__[\"create\"] = create;\n/* harmony export (immutable) */ __webpack_exports__[\"clone\"] = clone;\n/* harmony export (immutable) */ __webpack_exports__[\"copy\"] = copy;\n/* harmony export (immutable) */ __webpack_exports__[\"initEmpty\"] = initEmpty;\n/* harmony export (immutable) */ __webpack_exports__[\"initInfinity\"] = initInfinity;\n/* harmony export (immutable) */ __webpack_exports__[\"initSizeFromOrigin\"] = initSizeFromOrigin;\n/* harmony export (immutable) */ __webpack_exports__[\"initSizeFromLocation\"] = initSizeFromLocation;\n/* harmony export (immutable) */ __webpack_exports__[\"initCenterExtents\"] = initCenterExtents;\n/* harmony export (immutable) */ __webpack_exports__[\"isEmpty\"] = isEmpty;\n/* harmony export (immutable) */ __webpack_exports__[\"isInfinite\"] = isInfinite;\n/* harmony export (immutable) */ __webpack_exports__[\"equals\"] = equals;\n/* harmony export (immutable) */ __webpack_exports__[\"getSize\"] = getSize;\n/* harmony export (immutable) */ __webpack_exports__[\"getExtents\"] = getExtents;\n/* harmony export (immutable) */ __webpack_exports__[\"getCenter\"] = getCenter;\n/* harmony export (immutable) */ __webpack_exports__[\"expand\"] = expand;\n/* harmony export (immutable) */ __webpack_exports__[\"area\"] = area;\n/* harmony export (immutable) */ __webpack_exports__[\"hull\"] = hull;\n/* harmony export (immutable) */ __webpack_exports__[\"intersection\"] = intersection;\n/* harmony export (immutable) */ __webpack_exports__[\"overlaps\"] = overlaps;\n/* harmony export (immutable) */ __webpack_exports__[\"contains\"] = contains;\n/* harmony export (immutable) */ __webpack_exports__[\"containsPt\"] = containsPt;\n/* harmony export (immutable) */ __webpack_exports__[\"encapsulatePt\"] = encapsulatePt;\n/* harmony export (immutable) */ __webpack_exports__[\"translate\"] = translate;\n/* harmony export (immutable) */ __webpack_exports__[\"transformMat2\"] = transformMat2;\n/* harmony export (immutable) */ __webpack_exports__[\"transformMat2d\"] = transformMat2d;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_gl_matrix__ = __webpack_require__(0);\n\n\n\nvar MINX = 0;\nvar MINY = 1;\nvar MAXX = 2;\nvar MAXY = 3;\nvar Constants = {\n  BOX_SIDES: 4\n};\n/**\n * Sets the boundaries of an existing 2d axis-aligned bounding box\n * If arguments are not supplied, the aabox is initialized as empty.\n * @param {AABox2d} out  AAbox2d to set\n * @param {Number} [minx = Infinity] Minimum x-axis value\n * @param {Number} [miny = Infinity] Minimum y-axis value\n * @param {Number} [maxx = -Infinity] Maximum x-axis value\n * @param {Number} [maxy = -Infinity] Maximum y-axis value\n * @return {AABox2d}    bounds referenced by out arg\n */\n\nfunction set(out, minx, miny, maxx, maxy) {\n  out[MINX] = typeof minx === \"number\" ? minx : Infinity;\n  out[MINY] = typeof miny === \"number\" ? miny : Infinity;\n  out[MAXX] = typeof maxx === \"number\" ? maxx : -Infinity;\n  out[MAXY] = typeof maxy === \"number\" ? maxy : -Infinity;\n  return out;\n}\n/**\n * Creates a new 2d axis-aligned bounding box object\n * with optional boundaries. If boundaries are not supplied,\n * the aabox is initialized as empty.\n * @param  {Number} [minx = Infinity] Minimum x-axis value\n * @param  {Number} [miny = Infinity] Minimum y-axis value\n * @param  {Number} [maxx = -Infinity] Maximum x-axis value\n * @param  {Number} [maxy = -Infinity] Maximum y-axis value\n * @return {AABox2d}      New AABox2d object\n */\n\nfunction create(minx, miny, maxx, maxy) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"a\" /* glMatrix */].ARRAY_TYPE(Constants.BOX_SIDES);\n  return set(out, minx, miny, maxx, maxy);\n}\n/**\n * Creates a new 2d axis-aligned bounding box with boundaries copied\n * from an existing aabox.\n * @param  {AABox2d} box existing bounds to copy boundaries from\n * @return {AABox2d}     new AABox2d object\n */\n\nfunction clone(box) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"a\" /* glMatrix */].ARRAY_TYPE(Constants.BOX_SIDES);\n  out[MINX] = box[MINX];\n  out[MINY] = box[MINY];\n  out[MAXX] = box[MAXX];\n  out[MAXY] = box[MAXY];\n  return out;\n}\n/**\n * Copies the boundaries from one existing aabox to another.\n * @param  {AABox2d} out bounds to copy to\n * @param  {AABox2d} box bounds to copy from\n * @return {AABox2d}     bounds referenced by out arg\n */\n\nfunction copy(out, box) {\n  out[MINX] = box[MINX];\n  out[MINY] = box[MINY];\n  out[MAXX] = box[MAXX];\n  out[MAXY] = box[MAXY];\n  return out;\n}\n/**\n * Re-initializes an existing aabox as empty.\n * An aabox is empty if the minimum value in either of\n * its dimensions exceeds its respective max value.\n * In this case, the minumums will be set to +Infinity\n * and the maximums to -Infinity\n * @param  {AABox2d} out existing bounds to re-initialize as empty\n * @return {AABox2d}     bounds referenced by out arg\n */\n\nfunction initEmpty(out) {\n  out[MINX] = Infinity;\n  out[MINY] = Infinity;\n  out[MAXX] = -Infinity;\n  out[MAXY] = -Infinity;\n  return out;\n}\n/**\n * Re-initializes an existing aabox to infinity, ultimately encompassing\n * all numeric values.\n * @param  {AABox2d} out existing bounds to initialize to infinity\n * @return {AABox2d}     bounds referenced by out arg\n */\n\nfunction initInfinity(out) {\n  out[MINX] = -Infinity;\n  out[MINY] = -Infinity;\n  out[MAXX] = Infinity;\n  out[MAXY] = Infinity;\n  return out;\n}\n/**\n * Initializes an existing aabox with its top-left corner set to be the origin ([0, 0]),\n * an extends outwards in each dimension by its respective size.\n *   minx: 0\n *   miny: 0\n *   maxx: sizes[x]\n *   maxy: sizes[y]\n * @param  {AABox2d} out   existing bounds to re-initialize\n * @param  {Vec2d} sizes   new width/height of the bounds\n * @return {AABox2d}       bounds referenced by out arg\n */\n\nfunction initSizeFromOrigin(out, sizes) {\n  if (sizes[0] < 0) {\n    out[MINX] = -sizes[0];\n    out[MAXX] = 0;\n  } else {\n    out[MINX] = 0;\n    out[MAXX] = sizes[0];\n  }\n\n  if (sizes[1] < 0) {\n    out[MINY] = -sizes[1];\n    out[MAXY] = 0;\n  } else {\n    out[MINY] = 0;\n    out[MAXY] = sizes[1];\n  }\n\n  return out;\n}\n/**\n * Initializes an existing aabox with its top-left corner set to be an existing pt and with\n * bounds extending outwards in each dimension by its respective size.\n *   minx: pt[x]\n *   miny: pt[y]\n *   maxx: pt[x] + sizes[x]\n *   maxy: pt[y] + sizes[y]\n * @param  {AABox2d} out   existing bounds to re-initialize\n * @param  {Point2d} pt    new position of the top-left corner of the bounds\n * @param  {Vec2d} sizes   new width/height of the bounds\n * @return {AABox2d}       bounds referenced by out arg\n */\n\nfunction initSizeFromLocation(out, pt, sizes) {\n  for (var i = 0; i < 2; i += 1) {\n    if (sizes[i] < 0) {\n      out[i] = pt[i] - sizes[i];\n      out[i + 2] = pt[i];\n    } else {\n      out[i] = pt[i];\n      out[i + 2] = pt[i] + sizes[i];\n    }\n  }\n\n  return out;\n}\n/**\n * Initializes an existing aabox with its center set to a specific pt and with bounds\n * extending outward in each dimension so that the aabox's width and height are a\n * specific size\n * @param  {AABox2d} out    existing bounds to re-initialize\n * @param  {Point2d} center new center of the bounds\n * @param  {Vec2d} sizes  new width/height of the bounds\n * @return {AABox2d}        bounds referenced by out arg\n */\n\nfunction initCenterExtents(out, center, sizes) {\n  for (var i = 0; i < 2; i += 1) {\n    if (sizes[i] < 0) {\n      out[i] = center[i] + sizes[i];\n      out[i + 2] = center[i] - sizes[i];\n    } else {\n      out[i] = center[i] - sizes[i];\n      out[i + 2] = center[i] + sizes[i];\n    }\n  }\n\n  return out;\n}\n/**\n * Returns true if the aabox is empty\n * @param  {AABox2d}  box\n * @return {Boolean}     true if box is empty, false otherwise\n */\n\nfunction isEmpty(box) {\n  return box[MINX] > box[MAXX] || box[MINY] > box[MAXY];\n}\n/**\n * Returns true if an aabox is infinite in either dimension\n * @param  {AABox2d}  box Existing aabox to check\n * @return {Boolean}     True if box extends to +/- inifinity in either dimension, false otherwise\n */\n\nfunction isInfinite(box) {\n  return !isFinite(box[MINX]) || !isFinite(box[MINY]) || !isFinite(box[MAXX]) || !isFinite(box[MAXY]);\n}\n/**\n * Returns true if one aabox approximately equals another\n * @param  {AABox2d} a\n * @param  {AABox2d} b\n * @return {Boolean}   true if a ~= b\n */\n\nfunction equals(a, b) {\n  var a0 = a[0];\n  var a1 = a[1];\n  var a2 = a[2];\n  var a3 = a[3];\n  var b0 = b[0];\n  var b1 = b[1];\n  var b2 = b[2];\n  var b3 = b[3];\n  return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"a\" /* glMatrix */].EPSILON && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"a\" /* glMatrix */].EPSILON && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"a\" /* glMatrix */].EPSILON && Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"a\" /* glMatrix */].EPSILON;\n}\n/**\n * Returns the width/height of an existing aabox\n * @param  {Vec2d} out 2d vector to store the width/height of an existing aabox\n * @param  {AABox2d} box bounds to extract the width/height from\n * @return {Vec2d}     vector referenced by the out arg\n */\n\nfunction getSize(out, box) {\n  return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].set(out, box[MAXX] - box[MINX], box[MAXY] - box[MINY]);\n}\n/**\n * Returns the extents of an existing aabox.\n * Extents is the size of a bounds in each dimension starting at the center\n * of the bounds. (i.e. extents = [width / 2, height / 2])\n * @param  {Vec2d} out 2d vector to store the extents of an existing aabox\n * @param  {AABox2d} box bounds to extract the extents from\n * @return {Vec2d}     vector referenced by the out arg\n */\n\nfunction getExtents(out, box) {\n  getSize(out, box);\n  return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].scale(out, out, 0.5); // eslint-disable-line no-magic-numbers\n}\n/**\n * Returns the center of an existing aabox\n * @param  {Point2d} out point to store the center of an existing bounds\n * @param  {AABox2d} box bounds to extract the center from\n * @return {Point2d}     point referenced by the out arg\n */\n\nfunction getCenter(out, box) {\n  getExtents(out, box);\n  out[MINX] += box[MINX];\n  out[MINY] += box[MINY];\n  return out;\n}\n/**\n * Expands an existing aabox by a specified size in each dimension.\n * @param  {AABox2d} out        bounds to store the resulting operation in\n * @param  {AABox2d} box        starting bounds to expand\n * @param  {Vec2d} expandSize   size to expand in each dimension\n * @return {AABox2d}            bounds referenced by the out arg\n */\n\nfunction expand(out, box, expandSize) {\n  out[MINX] = box[MINX] - expandSize[0];\n  out[MAXX] = box[MAXX] + expandSize[0];\n  out[MINY] = box[MINY] - expandSize[1];\n  out[MAXY] = box[MAXY] + expandSize[1];\n}\n/**\n * Computes the area of an existing aabox\n * @param  {AABox2d} box\n * @return {Number}     area of the bounds\n */\n\nfunction area(box) {\n  return (box[MAXX] - box[MINX]) * (box[MAXY] - box[MINY]);\n}\n/**\n * Calculates the hull of two aaboxes. The hull is the smallest bounds that contains\n * both of the aaboxes\n * @param  {AABox2d} out bounds to store the resulting operation in\n * @param  {AABox2d} a\n * @param  {AABox2d} b\n * @return {AABox2d}     bounds referenced by out arg\n */\n\nfunction hull(out, a, b) {\n  return create(Math.min(a[MINX], b[MINX]), Math.min(a[MINY], b[MINY]), Math.max(a[MAXX], b[MAXX]), Math.max(a[MAXY], b[MAXY]));\n}\n/**\n * Calculates the intersection of two existing bounds.\n * @param  {AABox2d} out bounds to store the resulting operation in\n * @param  {AABox2d} a\n * @param  {AABox2d} b\n * @return {AABox2d}     bounds referenced by out arg\n */\n\nfunction intersection(out, a, b) {\n  var boxToUse = out;\n\n  if (out === a) {\n    boxToUse = create();\n  }\n\n  var minindex = MINX;\n  var maxindex = MAXX;\n\n  for (; minindex <= MINY; minindex += 1, maxindex += 1) {\n    if (a[maxindex] < b[minindex] || a[minindex] > b[maxindex]) {\n      break;\n    }\n\n    boxToUse[minindex] = Math.max(a[minindex], b[minindex]);\n    boxToUse[maxindex] = Math.min(a[maxindex], b[maxindex]);\n  }\n\n  if (minindex !== MINY + 1) {\n    initEmpty(boxToUse);\n  }\n\n  if (out === a) {\n    copy(out, boxToUse);\n  }\n\n  return out;\n}\n/**\n * Returns true if one bounds overlaps another in any way (non-inclusive).\n * @param  {AABox2d} a\n * @param  {AABox2d} b\n * @return {Boolean}   Returns true if a overlaps b, false otherwise\n */\n\nfunction overlaps(a, b) {\n  return !(a[MAXX] <= b[MINX] || a[MINX] >= b[MAXX] || a[MAXY] <= b[MINY] || a[MINY] >= b[MAXY]);\n}\n/**\n * Returns true if one bounds full contains another (inclusive).\n * @param  {AABox2d} a\n * @param  {AABox2d} b\n * @return {Boolean}   true if a fully contains b.\n */\n\nfunction contains(a, b) {\n  return !(b[MINX] < a[MINX] || b[MAXX] > a[MAXX] || b[MINY] < a[MINY] || b[MAXY] > a[MAXY]);\n}\n/**\n * Returns true if an existing bounds contains a specific point (inclusive)\n * @param  {AABox2d} box\n * @param  {Point2d} pt\n * @return {Boolean}     Returns true if pt is inside of box, false otherwise\n */\n\nfunction containsPt(box, pt) {\n  return pt[MINX] >= box[MINX] && pt[MINX] <= box[MAXX] && pt[MINY] >= box[MINY] && pt[MINY] <= box[MAXY];\n}\n/**\n * Extends an existing bounds so that it would contain a specific point\n * @param  {AABox2d} out Bounds containing the operation result\n * @param  {AABox2d} box Starting bounds to possibly extend\n * @param  {Point2d} pt  Point to encapsulate in box\n * @return {AAbox2d}     bounds referenced by out arg\n */\n\nfunction encapsulatePt(out, box, pt) {\n  if (out !== box) {\n    copy(out, box);\n  }\n\n  if (isEmpty(box)) {\n    out[MINX] = pt[MINX];\n    out[MAXX] = pt[MINX];\n    out[MINY] = pt[MINY];\n    out[MAXY] = pt[MINY];\n  } else {\n    if (pt[MINX] < out[MINX]) {\n      out[MINX] = pt[MINX];\n    } else if (pt[MINX] > out[MAXX]) {\n      out[MAXX] = pt[MINX];\n    }\n\n    if (pt[MINY] < out[MINY]) {\n      out[MINY] = pt[MINY];\n    } else if (pt[MINY] > out[MAXY]) {\n      out[MAXY] = pt[MINY];\n    }\n  }\n\n  return out;\n}\n/**\n * Translates an existing bounds by a specified offset it each dimension\n * @param  {AABox2d} out bounds resulting from the operation\n * @param  {AABox2d} box starting bounds\n * @param  {Vec2d} pos   translation in each dimension\n * @return {AABox2d}     bounds referenced by out arg\n */\n\nfunction translate(out, box, pos) {\n  out[MINX] = box[MINX] + pos[0];\n  out[MINY] = box[MINY] + pos[1];\n  out[MAXX] = box[MAXX] + pos[0];\n  out[MAXY] = box[MAXY] + pos[1];\n}\n\nfunction transform(out, box, mat, xformFunc) {\n  var boxToUse = out;\n\n  if (out === box) {\n    boxToUse = create();\n  }\n\n  initEmpty(boxToUse);\n  var pt1 = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].set(__WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].create(), box[MINX], box[MINY]);\n  var pt2 = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].create();\n  xformFunc(pt2, pt1, mat);\n  encapsulatePt(boxToUse, boxToUse, pt2);\n  pt1[MINX] = box[MAXX];\n  xformFunc(pt2, pt1, mat);\n  encapsulatePt(boxToUse, boxToUse, pt2);\n  pt1[MINY] = box[MAXY];\n  xformFunc(pt2, pt1, mat);\n  encapsulatePt(boxToUse, boxToUse, pt2);\n  pt1[MINX] = box[MINX];\n  xformFunc(pt2, pt1, mat);\n  encapsulatePt(boxToUse, boxToUse, pt2);\n\n  if (out === box) {\n    copy(out, boxToUse);\n  }\n\n  return out;\n}\n/**\n * Transforms an existing bounds by a 2x2 matrix\n * @param  {AABox2d} out bounds to contain the operation result\n * @param  {AABox2d} box bounds to transform\n * @param  {Mat2} mat 2x2 matrix transformation\n * @return {AABox2d}     bounds referenced by out arg\n */\n\n\nfunction transformMat2(out, box, mat) {\n  return transform(out, box, mat, __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].transformMat2);\n}\n/**\n * Transforms an existing bounds by a 2x3 matrix.\n * A 2x3 matrix is a 2x2 matrix with a translation component.\n * @param  {AABox2d} out bounds to hold the operation result\n * @param  {AABox2d} box bounds to transform\n * @param  {Mat2d} mat   2x3 matrix\n * @return {AABox2d}     bounds referenced by out arg\n */\n\nfunction transformMat2d(out, box, mat) {\n  return transform(out, box, mat, __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].transformMat2d);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"set\"] = set;\n/* harmony export (immutable) */ __webpack_exports__[\"create\"] = create;\n/* harmony export (immutable) */ __webpack_exports__[\"clone\"] = clone;\n/* harmony export (immutable) */ __webpack_exports__[\"copy\"] = copy;\n/* harmony export (immutable) */ __webpack_exports__[\"initFromValues\"] = initFromValues;\n/* harmony export (immutable) */ __webpack_exports__[\"addVec2\"] = addVec2;\n/* harmony export (immutable) */ __webpack_exports__[\"sub\"] = sub;\n/* harmony export (immutable) */ __webpack_exports__[\"transformMat2\"] = transformMat2;\n/* harmony export (immutable) */ __webpack_exports__[\"transformMat2d\"] = transformMat2d;\n/* harmony export (immutable) */ __webpack_exports__[\"str\"] = str;\n/* harmony export (immutable) */ __webpack_exports__[\"distance\"] = distance;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dist\", function() { return dist; });\n/* harmony export (immutable) */ __webpack_exports__[\"squaredDistance\"] = squaredDistance;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrDist\", function() { return sqrDist; });\n/* harmony export (immutable) */ __webpack_exports__[\"lerp\"] = lerp;\n/* harmony export (immutable) */ __webpack_exports__[\"equals\"] = equals;\n/* harmony export (immutable) */ __webpack_exports__[\"exactEquals\"] = exactEquals;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_gl_matrix__ = __webpack_require__(0);\n\n\n\nvar X = 0;\nvar Y = 1;\n/**\n * Sets the coordinates of a 2D point\n * @param {Point2d} out Point to set\n * @param {Number} [x = 0]   X coordinate\n * @param {Number} [y = 0]   Y coordinate\n * @return {Point2d}    Point referenced by out arg\n */\n\nfunction set(out) {\n  var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  out[X] = x;\n  out[Y] = y;\n  return out;\n}\n/**\n * Creates a new Point2d object\n * @param  {Number} [x = 0] X coordinate\n * @param  {Number} [y = 0] Y coordinate\n * @return {Point2d}\n */\n\nfunction create() {\n  var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var out = new __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"a\" /* glMatrix */].ARRAY_TYPE(2);\n  return set(out, x, y);\n}\n/**\n * Creates a new Point2d object with coordinates initialized from an existing point.\n * @param  {Point2d} p\n * @return {Point2d}\n */\n\nfunction clone(p) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"a\" /* glMatrix */].ARRAY_TYPE(2);\n  out[X] = p[X];\n  out[Y] = p[Y];\n  return out;\n}\n/**\n * Copies the coordinates of one point to another.\n * @param  {Point2d} out The point to copy to\n * @param  {Point2d} p   The point to copy from\n * @return {Point2d}     Point referenced by out arg\n */\n\nfunction copy(out, p) {\n  out[X] = p[X];\n  out[Y] = p[Y];\n  return out;\n}\n/**\n * Creates a new point from coordinates\n * @param  {Number} x X coordinate\n * @param  {Number} y Y coordinate\n * @return {Point2d}   New point\n */\n\nfunction initFromValues(x, y) {\n  return create(x, y);\n}\n/**\n * Adds a 2d offset to an existing point\n * @param {Point2d} out Point receiving the operation result\n * @param {Point2d} pt  Existing point\n * @param {Vec2d} v   Vector describing the offset\n * @return {Point2d}   Point referenced by out arg\n */\n\nfunction addVec2(out, pt, v) {\n  return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].add(out, pt, v);\n}\n/**\n * Calculates the difference between two points\n * @param  {Vec2d} out Vector receiving operation result\n * @param  {Point2d} pt1\n * @param  {Point2d} pt2\n * @return {Vec2d}     Vector referenced by out arg\n */\n\nfunction sub(out, pt1, pt2) {\n  return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].sub(out, pt1, pt2);\n}\n/**\n * Performs an 2x2 matrix multiplication on a point\n * @param  {Point2d} out Point receiving operation result\n * @param  {Point2d} p\n * @param  {Mat2} m 2x2 matrix\n * @return {Point2d}     Point referenced by out arg\n */\n\nfunction transformMat2(out, p, m) {\n  return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].transformMat2(out, p, m);\n}\n/**\n * Performs a 2x3 matrix multiplication on a point.\n * A 2x3 matrix is ultimately a 2x2 matrix with a\n * translation component\n * @param  {Point2d} out Point receiving operation result\n * @param  {Point2d} p\n * @param  {Mat2d} m   2x3 matrix\n * @return {Point2d}     Point referenced by out arg\n */\n\nfunction transformMat2d(out, p, m) {\n  return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].transformMat2d(out, p, m);\n}\n/**\n * Creates a string representation of a point\n * @param  {Point2d} p\n * @return {string}\n */\n\nfunction str(p) {\n  return \"point2d(\".concat(p[0], \" , \").concat(p[1], \")\");\n}\n/**\n * Computes the distance between two 2d points\n * @param  {Point2d} p1\n * @param  {Point2d} p2\n * @return {Number}\n */\n\nfunction distance(p1, p2) {\n  return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].distance(p1, p2);\n}\nvar dist = distance;\n/**\n * Returns the squared distance between two points.\n * This is a cheaper operation than the true distance\n * calculation.\n * @param  {Point2d} p1\n * @param  {Point2d} p2\n * @return {Number}    distance^2\n */\n\nfunction squaredDistance(p1, p2) {\n  return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].squaredDistance(p1, p2);\n}\nvar sqrDist = squaredDistance;\n/**\n * Calculates the point linearly interpolated\n * between two points according to the relative operator t\n * [t == 0 = p1 & t == 1 = p2]\n * @param  {Point2d} out Point receiving result of operation\n * @param  {Point2d} p1  Start point (t = 0)\n * @param  {Point2d} p2  End point (t = 1)\n * @param  {[type]} t   Interpolate parameter [0, 1]\n * @return {Point2d}     Point referenced by out arg\n */\n\nfunction lerp(out, p1, p2, t) {\n  return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].lerp(out, p1, p2, t);\n}\n/**\n * Returns whether two points are relatively equal\n * @param  {Point2d} a\n * @param  {Point2d} b\n * @return {Boolean}   Returns true if two point are relatively equal, false otherwise\n */\n\nfunction equals(a, b) {\n  return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].equals(a, b);\n}\n/**\n * Returns whether two points are exactly equal.\n * @param  {Point2d} a\n * @param  {Point2d} b\n * @return {Boolean}   Returns true if the two points are exactly equal, false otherwise\n */\n\nfunction exactEquals(a, b) {\n  return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].exactEquals(a, b);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_gl_matrix__ = __webpack_require__(0);\n\n\n\n/**\n * Singular value decomposition\n * See: http://math.stackexchange.com/questions/861674/decompose-a-2d-arbitrary-transform-into-only-scaling-and-rotation\n */\n\n/**\n * Calculates the singular value decomposition to extract the\n * scale, rotation, and translation from a 2x3 matrix.\n * Any matrix built by affine transformations can be decomposed\n * into a rotation*scale*rotation*translation\n * See: http://math.stackexchange.com/questions/861674/decompose-a-2d-arbitrary-transform-into-only-scaling-and-rotation\n * @param  {Vec2d} outTranslate Vector to hold the translation components\n * @param  {Vec2d} outScale     Vector to hold the x,y scale components\n * @param  {Vec2d} outRotate    Vector to hold the rotation components\n * @param  {Mat2d} mat          Matrix to decompose\n */\n\n__WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"c\" /* mat2d */].svd = function (outTranslate, outScale, outRotate, mat) {\n  if (outTranslate) {\n    outTranslate[0] = mat[4];\n    outTranslate[1] = mat[5];\n  }\n\n  if (outScale || outRotate) {\n    var E = (mat[0] + mat[3]) / 2.0;\n    var F = (mat[0] - mat[3]) / 2.0;\n    var G = (mat[1] + mat[2]) / 2.0;\n    var H = (mat[1] - mat[2]) / 2.0;\n\n    if (outScale) {\n      var Q = Math.sqrt(E * E + H * H);\n      var R = Math.sqrt(F * F + G * G);\n      outScale[0] = Q + R;\n      outScale[1] = Q - R;\n    }\n\n    if (outRotate) {\n      var a1 = Math.atan2(G, F);\n      var a2 = Math.atan2(H, E);\n      outRotate[0] = (a2 - a1) / 2.0;\n      outRotate[1] = (a2 + a1) / 2.0;\n    }\n  }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (__WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"c\" /* mat2d */]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb3JlL21hdDJkLmpzPzY0YTUiXSwibmFtZXMiOlsiTWF0MmQiLCJzdmQiLCJvdXRUcmFuc2xhdGUiLCJvdXRTY2FsZSIsIm91dFJvdGF0ZSIsIm1hdCIsIkUiLCJGIiwiRyIsIkgiLCJRIiwiTWF0aCIsInNxcnQiLCJSIiwiYTEiLCJhdGFuMiIsImEyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBOztBQUVBO0FBRUE7Ozs7O0FBS0E7Ozs7Ozs7Ozs7OztBQVdBQSx3REFBSyxDQUFDQyxHQUFOLEdBQVksVUFBQ0MsWUFBRCxFQUFlQyxRQUFmLEVBQXlCQyxTQUF6QixFQUFvQ0MsR0FBcEMsRUFBNEM7QUFDdEQsTUFBSUgsWUFBSixFQUFrQjtBQUNoQkEsZ0JBQVksQ0FBQyxDQUFELENBQVosR0FBa0JHLEdBQUcsQ0FBQyxDQUFELENBQXJCO0FBQ0FILGdCQUFZLENBQUMsQ0FBRCxDQUFaLEdBQWtCRyxHQUFHLENBQUMsQ0FBRCxDQUFyQjtBQUNEOztBQUNELE1BQUlGLFFBQVEsSUFBSUMsU0FBaEIsRUFBMkI7QUFDekIsUUFBTUUsQ0FBQyxHQUFHLENBQUNELEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU0EsR0FBRyxDQUFDLENBQUQsQ0FBYixJQUFvQixHQUE5QjtBQUNBLFFBQU1FLENBQUMsR0FBRyxDQUFDRixHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNBLEdBQUcsQ0FBQyxDQUFELENBQWIsSUFBb0IsR0FBOUI7QUFDQSxRQUFNRyxDQUFDLEdBQUcsQ0FBQ0gsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTQSxHQUFHLENBQUMsQ0FBRCxDQUFiLElBQW9CLEdBQTlCO0FBQ0EsUUFBTUksQ0FBQyxHQUFHLENBQUNKLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU0EsR0FBRyxDQUFDLENBQUQsQ0FBYixJQUFvQixHQUE5Qjs7QUFDQSxRQUFJRixRQUFKLEVBQWM7QUFDWixVQUFNTyxDQUFDLEdBQUdDLElBQUksQ0FBQ0MsSUFBTCxDQUFVTixDQUFDLEdBQUdBLENBQUosR0FBUUcsQ0FBQyxHQUFHQSxDQUF0QixDQUFWO0FBQ0EsVUFBTUksQ0FBQyxHQUFHRixJQUFJLENBQUNDLElBQUwsQ0FBVUwsQ0FBQyxHQUFHQSxDQUFKLEdBQVFDLENBQUMsR0FBR0EsQ0FBdEIsQ0FBVjtBQUNBTCxjQUFRLENBQUMsQ0FBRCxDQUFSLEdBQWNPLENBQUMsR0FBR0csQ0FBbEI7QUFDQVYsY0FBUSxDQUFDLENBQUQsQ0FBUixHQUFjTyxDQUFDLEdBQUdHLENBQWxCO0FBQ0Q7O0FBQ0QsUUFBSVQsU0FBSixFQUFlO0FBQ2IsVUFBTVUsRUFBRSxHQUFHSCxJQUFJLENBQUNJLEtBQUwsQ0FBV1AsQ0FBWCxFQUFjRCxDQUFkLENBQVg7QUFDQSxVQUFNUyxFQUFFLEdBQUdMLElBQUksQ0FBQ0ksS0FBTCxDQUFXTixDQUFYLEVBQWNILENBQWQsQ0FBWDtBQUNBRixlQUFTLENBQUMsQ0FBRCxDQUFULEdBQWUsQ0FBQ1ksRUFBRSxHQUFHRixFQUFOLElBQVksR0FBM0I7QUFDQVYsZUFBUyxDQUFDLENBQUQsQ0FBVCxHQUFlLENBQUNZLEVBQUUsR0FBR0YsRUFBTixJQUFZLEdBQTNCO0FBQ0Q7QUFDRjtBQUNGLENBdkJEOztBQXlCZWQsaUhBQWYiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiXG5cbmltcG9ydCB7IG1hdDJkIGFzIE1hdDJkIH0gZnJvbSBcImdsLW1hdHJpeFwiXG5cbi8qKlxuICogU2luZ3VsYXIgdmFsdWUgZGVjb21wb3NpdGlvblxuICogU2VlOiBodHRwOi8vbWF0aC5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvODYxNjc0L2RlY29tcG9zZS1hLTJkLWFyYml0cmFyeS10cmFuc2Zvcm0taW50by1vbmx5LXNjYWxpbmctYW5kLXJvdGF0aW9uXG4gKi9cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzaW5ndWxhciB2YWx1ZSBkZWNvbXBvc2l0aW9uIHRvIGV4dHJhY3QgdGhlXG4gKiBzY2FsZSwgcm90YXRpb24sIGFuZCB0cmFuc2xhdGlvbiBmcm9tIGEgMngzIG1hdHJpeC5cbiAqIEFueSBtYXRyaXggYnVpbHQgYnkgYWZmaW5lIHRyYW5zZm9ybWF0aW9ucyBjYW4gYmUgZGVjb21wb3NlZFxuICogaW50byBhIHJvdGF0aW9uKnNjYWxlKnJvdGF0aW9uKnRyYW5zbGF0aW9uXG4gKiBTZWU6IGh0dHA6Ly9tYXRoLnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy84NjE2NzQvZGVjb21wb3NlLWEtMmQtYXJiaXRyYXJ5LXRyYW5zZm9ybS1pbnRvLW9ubHktc2NhbGluZy1hbmQtcm90YXRpb25cbiAqIEBwYXJhbSAge1ZlYzJkfSBvdXRUcmFuc2xhdGUgVmVjdG9yIHRvIGhvbGQgdGhlIHRyYW5zbGF0aW9uIGNvbXBvbmVudHNcbiAqIEBwYXJhbSAge1ZlYzJkfSBvdXRTY2FsZSAgICAgVmVjdG9yIHRvIGhvbGQgdGhlIHgseSBzY2FsZSBjb21wb25lbnRzXG4gKiBAcGFyYW0gIHtWZWMyZH0gb3V0Um90YXRlICAgIFZlY3RvciB0byBob2xkIHRoZSByb3RhdGlvbiBjb21wb25lbnRzXG4gKiBAcGFyYW0gIHtNYXQyZH0gbWF0ICAgICAgICAgIE1hdHJpeCB0byBkZWNvbXBvc2VcbiAqL1xuTWF0MmQuc3ZkID0gKG91dFRyYW5zbGF0ZSwgb3V0U2NhbGUsIG91dFJvdGF0ZSwgbWF0KSA9PiB7XG4gIGlmIChvdXRUcmFuc2xhdGUpIHtcbiAgICBvdXRUcmFuc2xhdGVbMF0gPSBtYXRbNF1cbiAgICBvdXRUcmFuc2xhdGVbMV0gPSBtYXRbNV1cbiAgfVxuICBpZiAob3V0U2NhbGUgfHwgb3V0Um90YXRlKSB7XG4gICAgY29uc3QgRSA9IChtYXRbMF0gKyBtYXRbM10pIC8gMi4wXG4gICAgY29uc3QgRiA9IChtYXRbMF0gLSBtYXRbM10pIC8gMi4wXG4gICAgY29uc3QgRyA9IChtYXRbMV0gKyBtYXRbMl0pIC8gMi4wXG4gICAgY29uc3QgSCA9IChtYXRbMV0gLSBtYXRbMl0pIC8gMi4wXG4gICAgaWYgKG91dFNjYWxlKSB7XG4gICAgICBjb25zdCBRID0gTWF0aC5zcXJ0KEUgKiBFICsgSCAqIEgpXG4gICAgICBjb25zdCBSID0gTWF0aC5zcXJ0KEYgKiBGICsgRyAqIEcpXG4gICAgICBvdXRTY2FsZVswXSA9IFEgKyBSXG4gICAgICBvdXRTY2FsZVsxXSA9IFEgLSBSXG4gICAgfVxuICAgIGlmIChvdXRSb3RhdGUpIHtcbiAgICAgIGNvbnN0IGExID0gTWF0aC5hdGFuMihHLCBGKVxuICAgICAgY29uc3QgYTIgPSBNYXRoLmF0YW4yKEgsIEUpXG4gICAgICBvdXRSb3RhdGVbMF0gPSAoYTIgLSBhMSkgLyAyLjBcbiAgICAgIG91dFJvdGF0ZVsxXSA9IChhMiArIGExKSAvIDIuMFxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNYXQyZFxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS9tYXQyZC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/*\n **  Aggregation -- Aggregation of Base Class and Mixin Classes\n **  Copyright (c) 2015 Ralf S. Engelschall <rse@engelschall.com>\n **\n **  Permission is hereby granted, free of charge, to any person obtaining\n **  a copy of this software and associated documentation files (the\n **  \"Software\"), to deal in the Software without restriction, including\n **  without limitation the rights to use, copy, modify, merge, publish,\n **  distribute, sublicense, and/or sell copies of the Software, and to\n **  permit persons to whom the Software is furnished to do so, subject to\n **  the following conditions:\n **\n **  The above copyright notice and this permission notice shall be included\n **  in all copies or substantial portions of the Software.\n **\n **  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n **  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n **  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n **  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n **  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n **  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n **  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/*  ==== ECMAScript 6 variant ====  */\n\n/**\n * Creates a new class constructor function using an optional base class\n * and an optional list of mixins. If mixins need initializing, then\n * they should contain an 'initializer' member function\n * @param  {function}    base   base class construct function, if null, a bare-bones\n *                              base class is used by default\n * @param  {...[function]} mixins mixin classes\n * @return {function}           new class constructor function\n */\nvar aggregation = function aggregation(base) {\n  for (var _len = arguments.length, mixins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    mixins[_key - 1] = arguments[_key];\n  }\n\n  /*  create aggregation class  */\n  var aggregate = base ?\n  /*#__PURE__*/\n  function (_base) {\n    _inherits(__Aggregate, _base);\n\n    function __Aggregate() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _classCallCheck(this, __Aggregate);\n\n      /*  call base class constructor  */\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(__Aggregate)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      /*  call mixin's initializer  */\n\n      mixins.forEach(function (mixin) {\n        if (typeof mixin.prototype.initializer === \"function\") {\n          var _mixin$prototype$init;\n\n          (_mixin$prototype$init = mixin.prototype.initializer).call.apply(_mixin$prototype$init, [_assertThisInitialized(_this)].concat(args));\n        }\n      });\n      return _this;\n    }\n\n    return __Aggregate;\n  }(base) : function () {}\n  /* do nothing */\n\n  /*  copy properties  */\n  ;\n\n  var copyProps = function copyProps(target, source) {\n    Object.getOwnPropertyNames(source).concat(Object.getOwnPropertySymbols(source)).forEach(function (prop) {\n      if (prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/)) {\n        return;\n      }\n\n      if (base && prop.match(/^(?:initializer)$/)) {\n        return;\n      }\n\n      Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop));\n    });\n  };\n  /*  copy all properties of all mixins into aggregation class  */\n\n\n  mixins.forEach(function (mixin) {\n    copyProps(aggregate.prototype, mixin.prototype);\n    copyProps(aggregate, mixin);\n  });\n  return aggregate;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (aggregation);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi91dGlsL2FnZ3JlZ2F0aW9uLmpzP2I4ODAiXSwibmFtZXMiOlsiYWdncmVnYXRpb24iLCJiYXNlIiwibWl4aW5zIiwiYWdncmVnYXRlIiwiYXJncyIsImZvckVhY2giLCJtaXhpbiIsInByb3RvdHlwZSIsImluaXRpYWxpemVyIiwiY2FsbCIsImNvcHlQcm9wcyIsInRhcmdldCIsInNvdXJjZSIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJjb25jYXQiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wIiwibWF0Y2giLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBOztBQUVBOzs7Ozs7Ozs7QUFTQSxJQUFNQSxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFDQyxJQUFELEVBQXFCO0FBQUEsb0NBQVhDLE1BQVc7QUFBWEEsVUFBVztBQUFBOztBQUN2QztBQUNBLE1BQU1DLFNBQVMsR0FBR0YsSUFBSTtBQUFBO0FBQUE7QUFBQTs7QUFFaEIsMkJBQXFCO0FBQUE7O0FBQUE7O0FBQUEseUNBQU5HLElBQU07QUFBTkEsWUFBTTtBQUFBOztBQUFBOztBQUNuQjtBQUNBLDRJQUFTQSxJQUFUO0FBRUE7O0FBQ0FGLFlBQU0sQ0FBQ0csT0FBUCxDQUFlLFVBQUFDLEtBQUssRUFBSTtBQUN0QixZQUFJLE9BQU9BLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsV0FBdkIsS0FBdUMsVUFBM0MsRUFBdUQ7QUFBQTs7QUFDckQsbUNBQUFGLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsV0FBaEIsRUFBNEJDLElBQTVCLHFFQUEwQ0wsSUFBMUM7QUFDRDtBQUNGLE9BSkQ7QUFMbUI7QUFVcEI7O0FBWmU7QUFBQSxJQUNRSCxJQURSLElBY2xCLFlBQU0sQ0FFTDtBQURDOztBQUdOO0FBbEJBOztBQW1CQSxNQUFNUyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFDQyxNQUFELEVBQVNDLE1BQVQsRUFBb0I7QUFDcENDLFVBQU0sQ0FBQ0MsbUJBQVAsQ0FBMkJGLE1BQTNCLEVBQ0dHLE1BREgsQ0FDVUYsTUFBTSxDQUFDRyxxQkFBUCxDQUE2QkosTUFBN0IsQ0FEVixFQUVHUCxPQUZILENBRVcsVUFBQVksSUFBSSxFQUFJO0FBQ2YsVUFDRUEsSUFBSSxDQUFDQyxLQUFMLENBQ0UsbUZBREYsQ0FERixFQUlFO0FBQ0E7QUFDRDs7QUFDRCxVQUFJakIsSUFBSSxJQUFJZ0IsSUFBSSxDQUFDQyxLQUFMLENBQVcsbUJBQVgsQ0FBWixFQUE2QztBQUMzQztBQUNEOztBQUNETCxZQUFNLENBQUNNLGNBQVAsQ0FDRVIsTUFERixFQUVFTSxJQUZGLEVBR0VKLE1BQU0sQ0FBQ08sd0JBQVAsQ0FBZ0NSLE1BQWhDLEVBQXdDSyxJQUF4QyxDQUhGO0FBS0QsS0FsQkg7QUFtQkQsR0FwQkQ7QUFzQkE7OztBQUNBZixRQUFNLENBQUNHLE9BQVAsQ0FBZSxVQUFBQyxLQUFLLEVBQUk7QUFDdEJJLGFBQVMsQ0FBQ1AsU0FBUyxDQUFDSSxTQUFYLEVBQXNCRCxLQUFLLENBQUNDLFNBQTVCLENBQVQ7QUFDQUcsYUFBUyxDQUFDUCxTQUFELEVBQVlHLEtBQVosQ0FBVDtBQUNELEdBSEQ7QUFLQSxTQUFPSCxTQUFQO0FBQ0QsQ0FsREQ7O0FBb0RlSCxvRUFBZiIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqKiAgQWdncmVnYXRpb24gLS0gQWdncmVnYXRpb24gb2YgQmFzZSBDbGFzcyBhbmQgTWl4aW4gQ2xhc3Nlc1xuICoqICBDb3B5cmlnaHQgKGMpIDIwMTUgUmFsZiBTLiBFbmdlbHNjaGFsbCA8cnNlQGVuZ2Vsc2NoYWxsLmNvbT5cbiAqKlxuICoqICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcbiAqKiAgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gKiogIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuICoqICB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4gKiogIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICoqICBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cbiAqKiAgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICoqXG4gKiogIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiogIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICoqXG4gKiogIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiogIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICoqICBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuXG4gKiogIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiogIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG4gKiogIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4gKiogIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbi8qICA9PT09IEVDTUFTY3JpcHQgNiB2YXJpYW50ID09PT0gICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBjbGFzcyBjb25zdHJ1Y3RvciBmdW5jdGlvbiB1c2luZyBhbiBvcHRpb25hbCBiYXNlIGNsYXNzXG4gKiBhbmQgYW4gb3B0aW9uYWwgbGlzdCBvZiBtaXhpbnMuIElmIG1peGlucyBuZWVkIGluaXRpYWxpemluZywgdGhlblxuICogdGhleSBzaG91bGQgY29udGFpbiBhbiAnaW5pdGlhbGl6ZXInIG1lbWJlciBmdW5jdGlvblxuICogQHBhcmFtICB7ZnVuY3Rpb259ICAgIGJhc2UgICBiYXNlIGNsYXNzIGNvbnN0cnVjdCBmdW5jdGlvbiwgaWYgbnVsbCwgYSBiYXJlLWJvbmVzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2UgY2xhc3MgaXMgdXNlZCBieSBkZWZhdWx0XG4gKiBAcGFyYW0gIHsuLi5bZnVuY3Rpb25dfSBtaXhpbnMgbWl4aW4gY2xhc3Nlc1xuICogQHJldHVybiB7ZnVuY3Rpb259ICAgICAgICAgICBuZXcgY2xhc3MgY29uc3RydWN0b3IgZnVuY3Rpb25cbiAqL1xuY29uc3QgYWdncmVnYXRpb24gPSAoYmFzZSwgLi4ubWl4aW5zKSA9PiB7XG4gIC8qICBjcmVhdGUgYWdncmVnYXRpb24gY2xhc3MgICovXG4gIGNvbnN0IGFnZ3JlZ2F0ZSA9IGJhc2VcbiAgICA/IGNsYXNzIF9fQWdncmVnYXRlIGV4dGVuZHMgYmFzZSB7XG4gICAgICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgICAvKiAgY2FsbCBiYXNlIGNsYXNzIGNvbnN0cnVjdG9yICAqL1xuICAgICAgICAgIHN1cGVyKC4uLmFyZ3MpXG5cbiAgICAgICAgICAvKiAgY2FsbCBtaXhpbidzIGluaXRpYWxpemVyICAqL1xuICAgICAgICAgIG1peGlucy5mb3JFYWNoKG1peGluID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWl4aW4ucHJvdG90eXBlLmluaXRpYWxpemVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgbWl4aW4ucHJvdG90eXBlLmluaXRpYWxpemVyLmNhbGwodGhpcywgLi4uYXJncylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgOiAoKSA9PiB7XG4gICAgICAgIC8qIGRvIG5vdGhpbmcgKi9cbiAgICAgIH1cblxuICAvKiAgY29weSBwcm9wZXJ0aWVzICAqL1xuICBjb25zdCBjb3B5UHJvcHMgPSAodGFyZ2V0LCBzb3VyY2UpID0+IHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2UpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKSlcbiAgICAgIC5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJvcC5tYXRjaChcbiAgICAgICAgICAgIC9eKD86Y29uc3RydWN0b3J8cHJvdG90eXBlfGFyZ3VtZW50c3xjYWxsZXJ8bmFtZXxiaW5kfGNhbGx8YXBwbHl8dG9TdHJpbmd8bGVuZ3RoKSQvXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpZiAoYmFzZSAmJiBwcm9wLm1hdGNoKC9eKD86aW5pdGlhbGl6ZXIpJC8pKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICBwcm9wLFxuICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBwcm9wKVxuICAgICAgICApXG4gICAgICB9KVxuICB9XG5cbiAgLyogIGNvcHkgYWxsIHByb3BlcnRpZXMgb2YgYWxsIG1peGlucyBpbnRvIGFnZ3JlZ2F0aW9uIGNsYXNzICAqL1xuICBtaXhpbnMuZm9yRWFjaChtaXhpbiA9PiB7XG4gICAgY29weVByb3BzKGFnZ3JlZ2F0ZS5wcm90b3R5cGUsIG1peGluLnByb3RvdHlwZSlcbiAgICBjb3B5UHJvcHMoYWdncmVnYXRlLCBtaXhpbilcbiAgfSlcblxuICByZXR1cm4gYWdncmVnYXRlXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFnZ3JlZ2F0aW9uXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi91dGlsL2FnZ3JlZ2F0aW9uLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var EPS = 1e-5;\nvar quarter = 0.25;\nvar half = 0.5;\nvar two = 2;\nMath.QUATER_PI = quarter * Math.PI;\nMath.HALF_PI = half * Math.PI;\nMath.HALF_NPI = -half * Math.PI;\nMath.TWO_PI = two * Math.PI;\nMath.NPI = -Math.PI;\nMath.NQUATER_PI = quarter * Math.NPI;\nMath.NHALF_PI = half * Math.NPI;\nMath.NTWO_PI = two * Math.NPI;\nMath.INV_PI = 1 / Math.PI;\nMath.RAD_TO_DEG = 180 / Math.PI;\nMath.DEG_TO_RAD = Math.PI / 180; // this could be useful to tweak in your app, depends on your world resolution\n\nMath.EPS = EPS;\n/**\n * Clamp f to be between a min and max.\n * @param {Number} f\n * @param {Number} minv\n * @param {Number} maxv\n * @return {Number}\n */\n\nfunction clamp(f, minv, maxv) {\n  return f < minv ? minv : f > maxv ? maxv : f;\n}\n/**\n * Clamp f to be between 0 and 1.\n * @param {Number} f\n * @return {Number}\n */\n\n\nfunction clamp01(f) {\n  return f < 0 ? 0 : f > 1 ? 1 : f;\n}\n/**\n * Linearly interpolate (or extrapolate) between @c f1 and @c f2 by @c t percent.\n * @param {Number} f1\n * @param {Number} f2\n * @param {Number} t\n * @return {Number}\n */\n\n\nfunction lerp(f1, f2, t) {\n  return f1 * (1 - t) + f2 * t;\n}\n\nMath.clamp = clamp;\nMath.clamp01 = clamp01;\nMath.lerp = lerp;\n/* harmony default export */ __webpack_exports__[\"a\"] = (Math);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9tYXRoL21hdGguanM/MDU5NiJdLCJuYW1lcyI6WyJFUFMiLCJxdWFydGVyIiwiaGFsZiIsInR3byIsIk1hdGgiLCJRVUFURVJfUEkiLCJQSSIsIkhBTEZfUEkiLCJIQUxGX05QSSIsIlRXT19QSSIsIk5QSSIsIk5RVUFURVJfUEkiLCJOSEFMRl9QSSIsIk5UV09fUEkiLCJJTlZfUEkiLCJSQURfVE9fREVHIiwiREVHX1RPX1JBRCIsImNsYW1wIiwiZiIsIm1pbnYiLCJtYXh2IiwiY2xhbXAwMSIsImxlcnAiLCJmMSIsImYyIiwidCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTUEsR0FBRyxHQUFHLElBQVo7QUFDQSxJQUFNQyxPQUFPLEdBQUcsSUFBaEI7QUFDQSxJQUFNQyxJQUFJLEdBQUcsR0FBYjtBQUNBLElBQU1DLEdBQUcsR0FBRyxDQUFaO0FBRUFDLElBQUksQ0FBQ0MsU0FBTCxHQUFpQkosT0FBTyxHQUFHRyxJQUFJLENBQUNFLEVBQWhDO0FBQ0FGLElBQUksQ0FBQ0csT0FBTCxHQUFlTCxJQUFJLEdBQUdFLElBQUksQ0FBQ0UsRUFBM0I7QUFDQUYsSUFBSSxDQUFDSSxRQUFMLEdBQWdCLENBQUNOLElBQUQsR0FBUUUsSUFBSSxDQUFDRSxFQUE3QjtBQUNBRixJQUFJLENBQUNLLE1BQUwsR0FBY04sR0FBRyxHQUFHQyxJQUFJLENBQUNFLEVBQXpCO0FBQ0FGLElBQUksQ0FBQ00sR0FBTCxHQUFXLENBQUNOLElBQUksQ0FBQ0UsRUFBakI7QUFDQUYsSUFBSSxDQUFDTyxVQUFMLEdBQWtCVixPQUFPLEdBQUdHLElBQUksQ0FBQ00sR0FBakM7QUFDQU4sSUFBSSxDQUFDUSxRQUFMLEdBQWdCVixJQUFJLEdBQUdFLElBQUksQ0FBQ00sR0FBNUI7QUFDQU4sSUFBSSxDQUFDUyxPQUFMLEdBQWVWLEdBQUcsR0FBR0MsSUFBSSxDQUFDTSxHQUExQjtBQUNBTixJQUFJLENBQUNVLE1BQUwsR0FBYyxJQUFJVixJQUFJLENBQUNFLEVBQXZCO0FBQ0FGLElBQUksQ0FBQ1csVUFBTCxHQUFrQixNQUFNWCxJQUFJLENBQUNFLEVBQTdCO0FBQ0FGLElBQUksQ0FBQ1ksVUFBTCxHQUFrQlosSUFBSSxDQUFDRSxFQUFMLEdBQVUsR0FBNUIsQyxDQUVBOztBQUNBRixJQUFJLENBQUNKLEdBQUwsR0FBV0EsR0FBWDtBQUVBOzs7Ozs7OztBQU9BLFNBQVNpQixLQUFULENBQWVDLENBQWYsRUFBa0JDLElBQWxCLEVBQXdCQyxJQUF4QixFQUE4QjtBQUM1QixTQUFPRixDQUFDLEdBQUdDLElBQUosR0FBV0EsSUFBWCxHQUFrQkQsQ0FBQyxHQUFHRSxJQUFKLEdBQVdBLElBQVgsR0FBa0JGLENBQTNDO0FBQ0Q7QUFFRDs7Ozs7OztBQUtBLFNBQVNHLE9BQVQsQ0FBaUJILENBQWpCLEVBQW9CO0FBQ2xCLFNBQU9BLENBQUMsR0FBRyxDQUFKLEdBQVEsQ0FBUixHQUFZQSxDQUFDLEdBQUcsQ0FBSixHQUFRLENBQVIsR0FBWUEsQ0FBL0I7QUFDRDtBQUVEOzs7Ozs7Ozs7QUFPQSxTQUFTSSxJQUFULENBQWNDLEVBQWQsRUFBa0JDLEVBQWxCLEVBQXNCQyxDQUF0QixFQUF5QjtBQUN2QixTQUFPRixFQUFFLElBQUksSUFBSUUsQ0FBUixDQUFGLEdBQWVELEVBQUUsR0FBR0MsQ0FBM0I7QUFDRDs7QUFFRHJCLElBQUksQ0FBQ2EsS0FBTCxHQUFhQSxLQUFiO0FBQ0FiLElBQUksQ0FBQ2lCLE9BQUwsR0FBZUEsT0FBZjtBQUNBakIsSUFBSSxDQUFDa0IsSUFBTCxHQUFZQSxJQUFaO0FBRWVsQiw2REFBZiIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRVBTID0gMWUtNVxuY29uc3QgcXVhcnRlciA9IDAuMjVcbmNvbnN0IGhhbGYgPSAwLjVcbmNvbnN0IHR3byA9IDJcblxuTWF0aC5RVUFURVJfUEkgPSBxdWFydGVyICogTWF0aC5QSVxuTWF0aC5IQUxGX1BJID0gaGFsZiAqIE1hdGguUElcbk1hdGguSEFMRl9OUEkgPSAtaGFsZiAqIE1hdGguUElcbk1hdGguVFdPX1BJID0gdHdvICogTWF0aC5QSVxuTWF0aC5OUEkgPSAtTWF0aC5QSVxuTWF0aC5OUVVBVEVSX1BJID0gcXVhcnRlciAqIE1hdGguTlBJXG5NYXRoLk5IQUxGX1BJID0gaGFsZiAqIE1hdGguTlBJXG5NYXRoLk5UV09fUEkgPSB0d28gKiBNYXRoLk5QSVxuTWF0aC5JTlZfUEkgPSAxIC8gTWF0aC5QSVxuTWF0aC5SQURfVE9fREVHID0gMTgwIC8gTWF0aC5QSVxuTWF0aC5ERUdfVE9fUkFEID0gTWF0aC5QSSAvIDE4MFxuXG4vLyB0aGlzIGNvdWxkIGJlIHVzZWZ1bCB0byB0d2VhayBpbiB5b3VyIGFwcCwgZGVwZW5kcyBvbiB5b3VyIHdvcmxkIHJlc29sdXRpb25cbk1hdGguRVBTID0gRVBTXG5cbi8qKlxuICogQ2xhbXAgZiB0byBiZSBiZXR3ZWVuIGEgbWluIGFuZCBtYXguXG4gKiBAcGFyYW0ge051bWJlcn0gZlxuICogQHBhcmFtIHtOdW1iZXJ9IG1pbnZcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXh2XG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGNsYW1wKGYsIG1pbnYsIG1heHYpIHtcbiAgcmV0dXJuIGYgPCBtaW52ID8gbWludiA6IGYgPiBtYXh2ID8gbWF4diA6IGZcbn1cblxuLyoqXG4gKiBDbGFtcCBmIHRvIGJlIGJldHdlZW4gMCBhbmQgMS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBmXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGNsYW1wMDEoZikge1xuICByZXR1cm4gZiA8IDAgPyAwIDogZiA+IDEgPyAxIDogZlxufVxuXG4vKipcbiAqIExpbmVhcmx5IGludGVycG9sYXRlIChvciBleHRyYXBvbGF0ZSkgYmV0d2VlbiBAYyBmMSBhbmQgQGMgZjIgYnkgQGMgdCBwZXJjZW50LlxuICogQHBhcmFtIHtOdW1iZXJ9IGYxXG4gKiBAcGFyYW0ge051bWJlcn0gZjJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0XG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGxlcnAoZjEsIGYyLCB0KSB7XG4gIHJldHVybiBmMSAqICgxIC0gdCkgKyBmMiAqIHRcbn1cblxuTWF0aC5jbGFtcCA9IGNsYW1wXG5NYXRoLmNsYW1wMDEgPSBjbGFtcDAxXG5NYXRoLmxlcnAgPSBsZXJwXG5cbmV4cG9ydCBkZWZhdWx0IE1hdGhcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL21hdGgvbWF0aC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BaseShape; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__style_fill_style__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__style_stroke_style__ = __webpack_require__(20);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__transform2d__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_aggregation__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__style_basic_style__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_event_handler__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_matrix__ = __webpack_require__(0);\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\n\n/**\n * @typedef {object} CoreShapeOptions\n * @property {number} [zIndex=0] Z index draw order of the shape. Lower numbers get drawn before larger numbers\n */\n\n/**\n * Shape geom modification event\n * @event Shape#geomChanged\n * @type {object}\n * @property {string} attr Name of the attribute modified\n * @property {} prevVal Previous value of the attribute prior to modification\n * @property {} currVal Value of the attribute post modification\n */\n\n/**\n * Shape modification event\n * @event EventedShape#changed\n * @type {object}\n * @property {string} attr Name of the attribute modified\n * @property {} prevVal Previous value of the attribute prior to modification\n * @property {} currVal Value of the attribute post modification\n */\n\n/**\n * @class Defines the core functionality for all shapes\n * @extends {EventHandler}\n */\n\nvar CoreBaseShape =\n/*#__PURE__*/\nfunction (_EventHandler) {\n  _inherits(CoreBaseShape, _EventHandler);\n\n  /**\n   * Creates new core functionality for a shape\n   * @param  {CoreShapeOptions} [opts]\n   * @return {CoreBaseShape}\n   */\n  function CoreBaseShape(opts) {\n    var _this;\n\n    _classCallCheck(this, CoreBaseShape);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CoreBaseShape).call(this, [\"changed:xform\", \"changed:style\", \"changed:order\", \"changed:visibility\", \"changed:geom\"]));\n    _this._aabox = __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"create\"]();\n    _this._zIndex = opts && opts.zIndex ? opts.zIndex : 0;\n    _this._visible = true;\n    _this._geomDirty = false;\n    _this._fullXform = __WEBPACK_IMPORTED_MODULE_7_gl_matrix__[\"c\" /* mat2d */].create();\n    return _this;\n  }\n  /**\n   * Sets the z index (back to front draw order) of the shape\n   * @param  {number} zIndex\n   * @fires  EventedShape#changed\n   * @return {CoreBaseShape}        this\n   */\n\n\n  _createClass(CoreBaseShape, [{\n    key: \"zIndex\",\n    set: function set(zIndex) {\n      if (!Number.isInteger(zIndex)) {\n        throw new Error(\"zIndex must be an integer\");\n      }\n\n      if (zIndex !== this._zIndex) {\n        var prev = this._zIndex;\n        this._zIndex = zIndex;\n        this.fire(\"changed:order\", {\n          attr: \"zIndex\",\n          prevVal: prev,\n          currVal: this._zIndex\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Gets the current z index (i.e. draw/layer order) of the shape\n     * @return {number}\n     */\n    ,\n    get: function get() {\n      return this._zIndex;\n    }\n    /**\n     * Gets a reference to the current axis-aligned bounding box of the\n     * shape\n     * @return {AABox2d}\n     * @readOnly\n     */\n\n  }, {\n    key: \"aabox\",\n    get: function get() {\n      this._updateAABox();\n\n      return this._aabox;\n    }\n    /**\n     * Sets the visibility of the shape\n     * @param  {Boolean} visible If true, the shape is considered visible\n     * @fires  EventedShape#changed\n     * @return {CoreBaseShape}         this\n     * @throws {Error} If argument is not a boolean type\n     */\n\n  }, {\n    key: \"visible\",\n    set: function set(visible) {\n      if (typeof visible !== \"boolean\") {\n        throw new Error(\"visible must be a boolean\");\n      }\n\n      if (visible !== this._visible) {\n        this._visible = visible;\n        this.fire(\"changed:visibility\", {\n          attr: \"visible\",\n          prevVal: !this._visible,\n          currVal: this._visible\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Gets the current visibility of the shape\n     * @return {boolean}\n     */\n    ,\n    get: function get() {\n      return this._visible;\n    }\n  }]);\n\n  return CoreBaseShape;\n}(__WEBPACK_IMPORTED_MODULE_6__util_event_handler__[\"a\" /* default */]);\n/**\n * @class Defines the basic functionality of all shapes. This includes\n *        mixing in from EventedTransform2d so that affine transformations\n *        can be applied to the shape. Also includes mixing in fill and stroke\n *        properties so that the shape's renderable properties can be modified.\n * @extends {CoreBaseShape}\n * @mixin {EventedTransform2d}\n * @mixin {EventedFillStyle}\n * @mixin {EventedStrokeStyle}\n */\n\n\nvar BaseShape =\n/*#__PURE__*/\nfunction (_aggregation) {\n  _inherits(BaseShape, _aggregation);\n\n  /**\n   * Creates new basic functionality (including transform, fill style, and stroke style properties)\n   * for a shape\n   * @param  {object} opts\n   * @return {BaseShape}\n   */\n  function BaseShape(opts) {\n    var _this2;\n\n    _classCallCheck(this, BaseShape);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(BaseShape).call(this, opts));\n    _this2._stateStack = [];\n    return _this2;\n  }\n  /**\n   * Saves the current state of the shape so that it can be restored later.\n   * @return {BaseShape} this\n   */\n\n\n  _createClass(BaseShape, [{\n    key: \"save\",\n    value: function save() {\n      // Currently only the state of the fill/stroke style properties\n      // and the z index are saved. May want to expand this to include\n      // all modifiable properties (i.e. transform props and visibility prop)\n      var state = new __WEBPACK_IMPORTED_MODULE_5__style_basic_style__[\"a\" /* default */]();\n      __WEBPACK_IMPORTED_MODULE_5__style_basic_style__[\"a\" /* default */].copyBasicStyle(this, state);\n      state.zIndex = this.zIndex;\n\n      this._stateStack.push(state);\n\n      return this;\n    }\n    /**\n     * Pops a saved state from the top of the saved state stack\n     * @return {BaseShape} this\n     */\n\n  }, {\n    key: \"restore\",\n    value: function restore() {\n      // Currently only restores the state of the fill/stroke style properties\n      // and the z index. May want to expand this to include\n      // all modifiable properties (i.e. transform props and visibility prop)\n      var state = this._stateStack.pop();\n\n      if (state) {\n        __WEBPACK_IMPORTED_MODULE_5__style_basic_style__[\"a\" /* default */].copyBasicStyle(state, this);\n        this.zIndex = state.zIndex;\n      }\n\n      return this;\n    }\n    /**\n     * Gets the visibility of the shape\n     * @return {boolean}\n     * @override\n     */\n\n  }, {\n    key: \"getGlobalDimensions\",\n\n    /**\n     * Gets the width/height of the shape after the parent transforms are applied\n     * @return {Vec2d} Width/Height of the shape after all parent transforms applied\n     */\n    value: function getGlobalDimensions() {\n      var scale = [0, 0];\n      __WEBPACK_IMPORTED_MODULE_7_gl_matrix__[\"c\" /* mat2d */].svd(null, scale, null, this.globalXform);\n      scale[0] *= this.width;\n      scale[1] *= this.height;\n      return scale;\n    }\n    /**\n     * Returns true the shape contains a screen/world space point\n     * @param  {Point2d} screenPt           The point to check in screen/pixel space\n     * @param  {Poitn2d} worldPt            The point to check in world space\n     * @param  {Mat2d} worldToScreenMatrix  The transform matrix from world to screen space\n     * @param  {CanvasRenderingContext2D} ctx The 2d rendering context\n     * @return {boolean}                    True if the shape contains the point, false otherwise\n     */\n\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(screenPt, worldPt, worldToScreenMatrix, ctx) {\n      // Should we update here, or is it safe to\n      // say that this is stateful, meaning a render\n      // should have been performed beforehand which\n      // would've updated its state\n      var rtn = false;\n      var aabox = this.aabox; // Check if the point is contained by the shape's bounds first\n\n      if (this.visible && __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"containsPt\"](aabox, worldPt)) {\n        // re-draw the shape (invisible) so that we can use canvas's\n        // isPointInPath/isPointInStroke api calls. Doing that\n        // as this should be compatible across all browsers\n        ctx.save();\n        ctx.setTransform(this._fullXform[0], this._fullXform[1], this._fullXform[2], this._fullXform[3], this._fullXform[4], this._fullXform[5]);\n        ctx.beginPath();\n\n        this._draw(ctx);\n\n        ctx.strokeStyle = \"rgba(0,0,0,0)\";\n        ctx.lineWidth = this.strokeWidth + 5; // eslint-disable-line no-magic-numbers\n\n        ctx.dashPattern = [];\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.stroke();\n\n        if (this.isFillVisible() && ctx.isPointInPath(screenPt[0], screenPt[1]) || this.isStrokeVisible() && ctx.isPointInStroke(screenPt[0], screenPt[1])) {\n          rtn = true;\n        }\n\n        ctx.restore();\n      }\n\n      return rtn;\n    }\n    /**\n     * Debug function to draw the bounds of the shape\n     * @param  {CanvasRenderingContext2D} ctx                 2d rendering context\n     * @param  {Mat2d} worldToScreenMatrix Transform from world to screen space\n     * @param  {StrokeStyle} boundsStrokeStyle   The stroke style to use to render the bounds\n     */\n\n  }, {\n    key: \"renderBounds\",\n    value: function renderBounds(ctx, worldToScreenMatrix, boundsStrokeStyle) {\n      ctx.save();\n      ctx.setTransform(worldToScreenMatrix[0], worldToScreenMatrix[1], worldToScreenMatrix[2], worldToScreenMatrix[3], worldToScreenMatrix[4], worldToScreenMatrix[5]);\n      boundsStrokeStyle.setStrokeCtx(ctx);\n      var center = [0, 0];\n      var extents = [0, 0];\n      var aabox = this.aabox;\n      __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"getCenter\"](center, aabox);\n      __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"getExtents\"](extents, aabox);\n      ctx.beginPath();\n      ctx.rect(center[0] - extents[0], center[1] - extents[1], extents[0] * 2, extents[1] * 2);\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.stroke();\n      ctx.restore();\n    }\n    /**\n     * Called when the local transform (does not include parent transforms) of the Transform2d\n     * mixin is modified. Used to be notified internally that the shape's bounds needs updating\n     * @private\n     */\n\n  }, {\n    key: \"_localXformUpdated\",\n    value: function _localXformUpdated() {\n      this._boundsOutOfDate = true;\n    }\n    /**\n     * Called when the global transform (includes parent transforms) of the Transform2d\n     * mixin is modified. Used to be notified internally that the shape's bounds needs updating\n     * @private\n     */\n\n  }, {\n    key: \"_globalXformUpdated\",\n    value: function _globalXformUpdated() {\n      this._boundsOutOfDate = true;\n    }\n    /**\n     * Renders the shape using a 2d rendering context\n     * @param  {CanvasRenderingContext2d} ctx                 2d rendering context\n     * @param  {Mat2d} worldToScreenMatrix Transform from world to screen space,\n     *                                     usually provided by a camera\n     * @param  {DrawStyleState} styleState Manages the current state of the fill/stroke style attrs\n     *                                     of the 2d rendering context. This is self-managed to minimize\n     *                                     context state switches\n     * @param  {boolean} [doFill=null]     If provided, used to manually override whether to fill the\n     *                                     shape.\n     * @param  {boolean} [doStroke=null]   If provided, used to manually override whether to stroke the\n     *                                     shape.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render(ctx, worldToScreenMatrix, styleState) {\n      var doFill = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var doStroke = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      this.transformCtx(ctx, this._fullXform, worldToScreenMatrix);\n      ctx.beginPath();\n\n      var rtn = this._draw(ctx);\n\n      if (rtn || typeof rtn === \"undefined\") {\n        if (this.isFillVisible() && (doFill === null || Boolean(doFill))) {\n          styleState.setFillStyle(ctx, this);\n          ctx.fill();\n        }\n\n        if (this.isStrokeVisible() && (doStroke === null || Boolean(doStroke))) {\n          styleState.setStrokeStyle(ctx, this);\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n          ctx.stroke();\n        }\n      }\n    }\n    /**\n     * Copies the fill/stroke style from one BasicStyle object to this shape\n     * @param {BasicStyle} newStyle The style to copy from.\n     * @return {BaseShape} this\n     */\n\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(newStyle) {\n      __WEBPACK_IMPORTED_MODULE_5__style_basic_style__[\"a\" /* default */].copyBasicStyle(newStyle, this);\n      return this;\n    }\n    /**\n     * Returns a JSON object containing the properties of this shape\n     * @return {object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var state = this; // eslint-disable-line consistent-this\n\n      if (this._stateStack && this._stateStack.length) {\n        state = this._stateStack[0];\n      }\n\n      return Object.assign({\n        // type: this.constructor.name,\n        // NOTE: I wanted to use the above call, which would keep the type\n        // consistent with the name of the class, but this isn't always\n        // the case, as was found out a few times when trying to add\n        // this to immerse\n        visible: this.visible,\n        zIndex: state.zIndex\n      }, __WEBPACK_IMPORTED_MODULE_5__style_basic_style__[\"a\" /* default */].toJSON(state), __WEBPACK_IMPORTED_MODULE_3__transform2d__[\"c\" /* default */].toJSON(this));\n    }\n    /**\n     * Compares two shapes, usually used to sort the shapes for drawing\n     * @param  {BaseShape} shape1\n     * @param  {BaseShape} shape2\n     * @return {number}        Returns < 0 if shape1 < shape2, > 0 if shape1 > shape2, 0 if shape1 === shape2\n     */\n\n  }, {\n    key: \"visible\",\n    get: function get() {\n      return this._visible && (this.isFillVisible() || this.isStrokeVisible());\n    }\n  }], [{\n    key: \"shapeCompare\",\n    value: function shapeCompare(shape1, shape2) {\n      var zIndex1 = shape1.zIndex;\n      var zIndex2 = shape2.zIndex;\n\n      if (zIndex1 < zIndex2) {\n        return -1;\n      } else if (zIndex1 > zIndex2) {\n        return 1;\n      }\n\n      var rtn = __WEBPACK_IMPORTED_MODULE_1__style_fill_style__[\"b\" /* default */].compareFillStyle(shape1, shape2);\n\n      if (!rtn) {\n        rtn = __WEBPACK_IMPORTED_MODULE_2__style_stroke_style__[\"b\" /* default */].compareStrokeStyle(shape1, shape2);\n      }\n\n      return rtn;\n    }\n  }]);\n\n  return BaseShape;\n}(Object(__WEBPACK_IMPORTED_MODULE_4__util_aggregation__[\"a\" /* default */])(CoreBaseShape, Object(__WEBPACK_IMPORTED_MODULE_3__transform2d__[\"b\" /* createEventedTransform2dMixin */])(\"changed:xform\"), Object(__WEBPACK_IMPORTED_MODULE_1__style_fill_style__[\"a\" /* createEventedFillStyleMixin */])(\"changed:style\"), Object(__WEBPACK_IMPORTED_MODULE_2__style_stroke_style__[\"a\" /* createEventedStrokeStyleMixin */])(\"changed:style\")));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BasicStyle; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_aggregation__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__style_fill_style__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__style_stroke_style__ = __webpack_require__(20);\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n/**\n * @class  Basic shape style for a 2d rendering context\n * @extends {FillStyle}\n * @extends {StrokeStyle}\n */\n\nvar BasicStyle =\n/*#__PURE__*/\nfunction (_aggregation) {\n  _inherits(BasicStyle, _aggregation);\n\n  function BasicStyle() {\n    _classCallCheck(this, BasicStyle);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BasicStyle).apply(this, arguments));\n  }\n\n  _createClass(BasicStyle, null, [{\n    key: \"copyBasicStyle\",\n\n    /**\n     * Copies the properties from one BasicStyle to another\n     * @param  {BasicStyle} srcBasicStyle The style to copy from\n     * @param  {BasicStyle} dstBasicStyle The style to copy to\n     */\n    value: function copyBasicStyle(srcBasicStyle, dstBasicStyle) {\n      __WEBPACK_IMPORTED_MODULE_1__style_fill_style__[\"b\" /* default */].copyFillStyle(srcBasicStyle, dstBasicStyle);\n      __WEBPACK_IMPORTED_MODULE_2__style_stroke_style__[\"b\" /* default */].copyStrokeStyle(srcBasicStyle, dstBasicStyle);\n    }\n    /**\n     * Converts a BasicStyle instance to a JSON object\n     * @param  {BasicStyle} basicStyleObj\n     * @return {{fillColor   : string,\n     *           strokeColor : string,\n     *           strokeWidth : number,\n     *           lineJoin    : string,\n     *           lineCap     : string,\n     *           dashPattern : number[],\n     *           dashOffset  : number\n     *          }}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(basicStyleObj) {\n      return Object.assign(__WEBPACK_IMPORTED_MODULE_1__style_fill_style__[\"b\" /* default */].toJSON(basicStyleObj), __WEBPACK_IMPORTED_MODULE_2__style_stroke_style__[\"b\" /* default */].toJSON(basicStyleObj));\n    }\n  }]);\n\n  return BasicStyle;\n}(Object(__WEBPACK_IMPORTED_MODULE_0__util_aggregation__[\"a\" /* default */])(function BaseBasicStyle() {\n  _classCallCheck(this, BaseBasicStyle);\n}, __WEBPACK_IMPORTED_MODULE_1__style_fill_style__[\"b\" /* default */], __WEBPACK_IMPORTED_MODULE_2__style_stroke_style__[\"b\" /* default */]));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdHlsZS9iYXNpYy1zdHlsZS5qcz9kNTU5Il0sIm5hbWVzIjpbIkJhc2ljU3R5bGUiLCJzcmNCYXNpY1N0eWxlIiwiZHN0QmFzaWNTdHlsZSIsIkZpbGxTdHlsZSIsImNvcHlGaWxsU3R5bGUiLCJTdHJva2VTdHlsZSIsImNvcHlTdHJva2VTdHlsZSIsImJhc2ljU3R5bGVPYmoiLCJPYmplY3QiLCJhc3NpZ24iLCJ0b0pTT04iLCJhZ2dyZWdhdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7O0lBS3FCQSxVOzs7Ozs7Ozs7Ozs7OztBQUtuQjs7Ozs7bUNBS3NCQyxhLEVBQWVDLGEsRUFBZTtBQUNsREMsd0VBQVMsQ0FBQ0MsYUFBVixDQUF3QkgsYUFBeEIsRUFBdUNDLGFBQXZDO0FBQ0FHLDBFQUFXLENBQUNDLGVBQVosQ0FBNEJMLGFBQTVCLEVBQTJDQyxhQUEzQztBQUNEO0FBRUQ7Ozs7Ozs7Ozs7Ozs7OzsyQkFZY0ssYSxFQUFlO0FBQzNCLGFBQU9DLE1BQU0sQ0FBQ0MsTUFBUCxDQUNMTixrRUFBUyxDQUFDTyxNQUFWLENBQWlCSCxhQUFqQixDQURLLEVBRUxGLG9FQUFXLENBQUNLLE1BQVosQ0FBbUJILGFBQW5CLENBRkssQ0FBUDtBQUlEOzs7O0VBaENxQ0ksMEVBQVc7QUFBQTtBQUFBLEdBRWpEUixrRUFGaUQsRUFHakRFLG9FQUhpRCxDIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuXG5pbXBvcnQgYWdncmVnYXRpb24gZnJvbSBcIi4uL3V0aWwvYWdncmVnYXRpb25cIlxuaW1wb3J0IEZpbGxTdHlsZSBmcm9tIFwiLi4vc3R5bGUvZmlsbC1zdHlsZVwiXG5pbXBvcnQgU3Ryb2tlU3R5bGUgZnJvbSBcIi4uL3N0eWxlL3N0cm9rZS1zdHlsZVwiXG5cbi8qKlxuICogQGNsYXNzICBCYXNpYyBzaGFwZSBzdHlsZSBmb3IgYSAyZCByZW5kZXJpbmcgY29udGV4dFxuICogQGV4dGVuZHMge0ZpbGxTdHlsZX1cbiAqIEBleHRlbmRzIHtTdHJva2VTdHlsZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzaWNTdHlsZSBleHRlbmRzIGFnZ3JlZ2F0aW9uKFxuICBjbGFzcyBCYXNlQmFzaWNTdHlsZSB7fSxcbiAgRmlsbFN0eWxlLFxuICBTdHJva2VTdHlsZVxuKSB7XG4gIC8qKlxuICAgKiBDb3BpZXMgdGhlIHByb3BlcnRpZXMgZnJvbSBvbmUgQmFzaWNTdHlsZSB0byBhbm90aGVyXG4gICAqIEBwYXJhbSAge0Jhc2ljU3R5bGV9IHNyY0Jhc2ljU3R5bGUgVGhlIHN0eWxlIHRvIGNvcHkgZnJvbVxuICAgKiBAcGFyYW0gIHtCYXNpY1N0eWxlfSBkc3RCYXNpY1N0eWxlIFRoZSBzdHlsZSB0byBjb3B5IHRvXG4gICAqL1xuICBzdGF0aWMgY29weUJhc2ljU3R5bGUoc3JjQmFzaWNTdHlsZSwgZHN0QmFzaWNTdHlsZSkge1xuICAgIEZpbGxTdHlsZS5jb3B5RmlsbFN0eWxlKHNyY0Jhc2ljU3R5bGUsIGRzdEJhc2ljU3R5bGUpXG4gICAgU3Ryb2tlU3R5bGUuY29weVN0cm9rZVN0eWxlKHNyY0Jhc2ljU3R5bGUsIGRzdEJhc2ljU3R5bGUpXG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBCYXNpY1N0eWxlIGluc3RhbmNlIHRvIGEgSlNPTiBvYmplY3RcbiAgICogQHBhcmFtICB7QmFzaWNTdHlsZX0gYmFzaWNTdHlsZU9ialxuICAgKiBAcmV0dXJuIHt7ZmlsbENvbG9yICAgOiBzdHJpbmcsXG4gICAqICAgICAgICAgICBzdHJva2VDb2xvciA6IHN0cmluZyxcbiAgICogICAgICAgICAgIHN0cm9rZVdpZHRoIDogbnVtYmVyLFxuICAgKiAgICAgICAgICAgbGluZUpvaW4gICAgOiBzdHJpbmcsXG4gICAqICAgICAgICAgICBsaW5lQ2FwICAgICA6IHN0cmluZyxcbiAgICogICAgICAgICAgIGRhc2hQYXR0ZXJuIDogbnVtYmVyW10sXG4gICAqICAgICAgICAgICBkYXNoT2Zmc2V0ICA6IG51bWJlclxuICAgKiAgICAgICAgICB9fVxuICAgKi9cbiAgc3RhdGljIHRvSlNPTihiYXNpY1N0eWxlT2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oXG4gICAgICBGaWxsU3R5bGUudG9KU09OKGJhc2ljU3R5bGVPYmopLFxuICAgICAgU3Ryb2tlU3R5bGUudG9KU09OKGJhc2ljU3R5bGVPYmopXG4gICAgKVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zdHlsZS9iYXNpYy1zdHlsZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_gl_matrix__ = __webpack_require__(0);\n\n\n\n/**\n * Returns the Z coordinate of a 2D crossproduct\n * @param  {Vec2d} v1\n * @param  {Vec2d} v2\n * @return {Number}    z coord of the 2D crossproduct\n */\n\n__WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].cross2d = function (v1, v2) {\n  return v1[0] * v2[1] - v1[1] * v2[0];\n};\n/**\n * Calculates the angle between two vectors when directionality\n * is unnecessary (only returns an angle between 0 and PI, inclusive)\n * @param  {Vec2d} v1\n * @param  {Vec2d} v2\n * @return {Number}    The angle between two vectors in radians [0, PI]\n */\n\n\n__WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].angleFast = function (v1, v2) {\n  return Math.acos(__WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].dot(v1, v2));\n};\n/**\n * Returns the true angle between two vectors\n * @param  {Vec2d} v1\n * @param  {Vec2d} v2\n * @return {Number}    The angle between two vectors in radians [-PI, PI]\n */\n\n\n__WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].angle = function (v1, v2) {\n  var c = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].dot(v1, v2);\n  var s = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].cross2d(v1, v2);\n  var angle = Math.atan2(s, c);\n  return angle;\n};\n/**\n * Returns the angle of a vector from the positive X direction\n * in a cartesian coordinate system\n * @param  {Vec2d} v1\n * @return {Number}    The angle in radians [-PI, PI]\n */\n\n\n__WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */].anglePosX = function (v) {\n  var angle = Math.atan2(v[1], v[0]);\n\n  if (angle < 0) {\n    angle *= -1;\n  }\n\n  return angle;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (__WEBPACK_IMPORTED_MODULE_0_gl_matrix__[\"d\" /* vec2 */]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jb3JlL3ZlYzJkLmpzPzhkZDMiXSwibmFtZXMiOlsiVmVjMmQiLCJjcm9zczJkIiwidjEiLCJ2MiIsImFuZ2xlRmFzdCIsIk1hdGgiLCJhY29zIiwiZG90IiwiYW5nbGUiLCJjIiwicyIsImF0YW4yIiwiYW5nbGVQb3NYIiwidiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTs7QUFFQTtBQUVBOzs7Ozs7O0FBTUFBLHVEQUFLLENBQUNDLE9BQU4sR0FBZ0IsVUFBQ0MsRUFBRCxFQUFLQyxFQUFMO0FBQUEsU0FBWUQsRUFBRSxDQUFDLENBQUQsQ0FBRixHQUFRQyxFQUFFLENBQUMsQ0FBRCxDQUFWLEdBQWdCRCxFQUFFLENBQUMsQ0FBRCxDQUFGLEdBQVFDLEVBQUUsQ0FBQyxDQUFELENBQXRDO0FBQUEsQ0FBaEI7QUFFQTs7Ozs7Ozs7O0FBT0FILHVEQUFLLENBQUNJLFNBQU4sR0FBa0IsVUFBQ0YsRUFBRCxFQUFLQyxFQUFMO0FBQUEsU0FBWUUsSUFBSSxDQUFDQyxJQUFMLENBQVVOLHVEQUFLLENBQUNPLEdBQU4sQ0FBVUwsRUFBVixFQUFjQyxFQUFkLENBQVYsQ0FBWjtBQUFBLENBQWxCO0FBRUE7Ozs7Ozs7O0FBTUFILHVEQUFLLENBQUNRLEtBQU4sR0FBYyxVQUFDTixFQUFELEVBQUtDLEVBQUwsRUFBWTtBQUN4QixNQUFNTSxDQUFDLEdBQUdULHVEQUFLLENBQUNPLEdBQU4sQ0FBVUwsRUFBVixFQUFjQyxFQUFkLENBQVY7QUFDQSxNQUFNTyxDQUFDLEdBQUdWLHVEQUFLLENBQUNDLE9BQU4sQ0FBY0MsRUFBZCxFQUFrQkMsRUFBbEIsQ0FBVjtBQUNBLE1BQU1LLEtBQUssR0FBR0gsSUFBSSxDQUFDTSxLQUFMLENBQVdELENBQVgsRUFBY0QsQ0FBZCxDQUFkO0FBQ0EsU0FBT0QsS0FBUDtBQUNELENBTEQ7QUFPQTs7Ozs7Ozs7QUFNQVIsdURBQUssQ0FBQ1ksU0FBTixHQUFrQixVQUFBQyxDQUFDLEVBQUk7QUFDckIsTUFBSUwsS0FBSyxHQUFHSCxJQUFJLENBQUNNLEtBQUwsQ0FBV0UsQ0FBQyxDQUFDLENBQUQsQ0FBWixFQUFpQkEsQ0FBQyxDQUFDLENBQUQsQ0FBbEIsQ0FBWjs7QUFDQSxNQUFJTCxLQUFLLEdBQUcsQ0FBWixFQUFlO0FBQ2JBLFNBQUssSUFBSSxDQUFDLENBQVY7QUFDRDs7QUFDRCxTQUFPQSxLQUFQO0FBQ0QsQ0FORDs7QUFRZVIsZ0hBQWYiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiXG5cbmltcG9ydCB7IHZlYzIgYXMgVmVjMmQgfSBmcm9tIFwiZ2wtbWF0cml4XCJcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBaIGNvb3JkaW5hdGUgb2YgYSAyRCBjcm9zc3Byb2R1Y3RcbiAqIEBwYXJhbSAge1ZlYzJkfSB2MVxuICogQHBhcmFtICB7VmVjMmR9IHYyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgIHogY29vcmQgb2YgdGhlIDJEIGNyb3NzcHJvZHVjdFxuICovXG5WZWMyZC5jcm9zczJkID0gKHYxLCB2MikgPT4gdjFbMF0gKiB2MlsxXSAtIHYxWzFdICogdjJbMF1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBhbmdsZSBiZXR3ZWVuIHR3byB2ZWN0b3JzIHdoZW4gZGlyZWN0aW9uYWxpdHlcbiAqIGlzIHVubmVjZXNzYXJ5IChvbmx5IHJldHVybnMgYW4gYW5nbGUgYmV0d2VlbiAwIGFuZCBQSSwgaW5jbHVzaXZlKVxuICogQHBhcmFtICB7VmVjMmR9IHYxXG4gKiBAcGFyYW0gIHtWZWMyZH0gdjJcbiAqIEByZXR1cm4ge051bWJlcn0gICAgVGhlIGFuZ2xlIGJldHdlZW4gdHdvIHZlY3RvcnMgaW4gcmFkaWFucyBbMCwgUEldXG4gKi9cblZlYzJkLmFuZ2xlRmFzdCA9ICh2MSwgdjIpID0+IE1hdGguYWNvcyhWZWMyZC5kb3QodjEsIHYyKSlcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0cnVlIGFuZ2xlIGJldHdlZW4gdHdvIHZlY3RvcnNcbiAqIEBwYXJhbSAge1ZlYzJkfSB2MVxuICogQHBhcmFtICB7VmVjMmR9IHYyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgIFRoZSBhbmdsZSBiZXR3ZWVuIHR3byB2ZWN0b3JzIGluIHJhZGlhbnMgWy1QSSwgUEldXG4gKi9cblZlYzJkLmFuZ2xlID0gKHYxLCB2MikgPT4ge1xuICBjb25zdCBjID0gVmVjMmQuZG90KHYxLCB2MilcbiAgY29uc3QgcyA9IFZlYzJkLmNyb3NzMmQodjEsIHYyKVxuICBjb25zdCBhbmdsZSA9IE1hdGguYXRhbjIocywgYylcbiAgcmV0dXJuIGFuZ2xlXG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYW5nbGUgb2YgYSB2ZWN0b3IgZnJvbSB0aGUgcG9zaXRpdmUgWCBkaXJlY3Rpb25cbiAqIGluIGEgY2FydGVzaWFuIGNvb3JkaW5hdGUgc3lzdGVtXG4gKiBAcGFyYW0gIHtWZWMyZH0gdjFcbiAqIEByZXR1cm4ge051bWJlcn0gICAgVGhlIGFuZ2xlIGluIHJhZGlhbnMgWy1QSSwgUEldXG4gKi9cblZlYzJkLmFuZ2xlUG9zWCA9IHYgPT4ge1xuICBsZXQgYW5nbGUgPSBNYXRoLmF0YW4yKHZbMV0sIHZbMF0pXG4gIGlmIChhbmdsZSA8IDApIHtcbiAgICBhbmdsZSAqPSAtMVxuICB9XG4gIHJldHVybiBhbmdsZVxufVxuXG5leHBvcnQgZGVmYXVsdCBWZWMyZFxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29yZS92ZWMyZC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = buildXformMatrix;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return Transform2d; });\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = createEventedTransform2dMixin;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_point2d__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_gl_matrix__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_aggregation__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__math_math__ = __webpack_require__(6);\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n/**\n * Builds a 2D transformation matrix (2x3 matrix) from a rotation (in degrees),\n * an x,y scale, a translation, and a pivot (an offset from the origin to\n * apply the transformation around)\n * @param  {Mat2d} mat   Matrix to store the result of the operation\n * @param  {number} rdeg  rotation, in degrees\n * @param  {Vec2d} s     Scale vector, in x & y\n * @param  {Vec2d} t     Translation vector, in x & y\n * @param  {Vec2d} pivot Offset from origin to apply the transformation\n * @return {Mat2d}       Matrix referenced by the mat argument\n */\n\nfunction buildXformMatrix(mat, rdeg, s, t, pivot) {\n  __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"c\" /* mat2d */].identity(mat);\n  __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"c\" /* mat2d */].translate(mat, mat, [t[0] + pivot[0], t[1] + pivot[1]]);\n  __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"c\" /* mat2d */].rotate(mat, mat, __WEBPACK_IMPORTED_MODULE_3__math_math__[\"a\" /* default */].DEG_TO_RAD * rdeg);\n  __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"c\" /* mat2d */].scale(mat, mat, s);\n  __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"c\" /* mat2d */].translate(mat, mat, [-pivot[0], -pivot[1]]);\n  return mat;\n}\n/**\n * Utility function to dirty all the descendants of a transform node.\n * This is called when a transform node has been modified in some way\n * that it's children need to be notified about.\n * @param  {Transform2d[]} children\n */\n\nfunction dirtyChildren(children) {\n  children.forEach(function (child) {\n    child._xformDirty = true;\n    dirtyChildren(child._children);\n  });\n}\n/**\n * @typedef {object} Transform2dOptions\n * @property {Point2d} [position = [0,0]] Position in world space coords\n * @property {Vec2d} [scale = [1,1]] Scale in world space coords\n * @property {number} [rotation = 0] Rotation in degrees\n * @property {Vec2d} [pivot = [0, 0]] Offset from origin to apply the setTransformations\n */\n\n/**\n * @class Class to manage basic 2d affine transformations\n * @mixin Can also be used as a mixin\n */\n\n\nvar Transform2d =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates a new Transform2d\n   * @param  {Transform2dOptions} [opts]\n   * @return {Transform2d}\n   */\n  function Transform2d(opts) {\n    _classCallCheck(this, Transform2d);\n\n    this.initializer(opts);\n  }\n  /**\n   * Initializes a transform 2d object from options\n   * @param  {Transform2dOptions} [opts]\n   * @private\n   */\n\n\n  _createClass(Transform2d, [{\n    key: \"_initTransformFromOptions\",\n    value: function _initTransformFromOptions(opts) {\n      if (!opts) {\n        return;\n      }\n\n      if (typeof opts.position !== \"undefined\") {\n        this.setPosition(opts.position);\n      }\n\n      if (typeof opts.scale !== \"undefined\") {\n        this.setScale(opts.scale);\n      }\n\n      if (typeof opts.rotation !== \"undefined\") {\n        this.setRotation(opts.rotation);\n      }\n\n      if (typeof opts.pivot !== \"undefined\") {\n        this.pivot = opts.pivot;\n      }\n    }\n    /**\n     * Initializes a transform 2d object from options,\n     * called from either constructor (if used as base class)\n     * or base mixin class (if used as a mixin)\n     * @param  {Transform2dOptions} [opts]\n     * @protected\n     */\n\n  }, {\n    key: \"initializer\",\n    value: function initializer(opts) {\n      this._localXform = __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"c\" /* mat2d */].create();\n      this._lxformDirty = false;\n      this._pivot = __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"create\"](0, 0);\n      this._pos = __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"create\"](0, 0);\n      this._scale = __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"d\" /* vec2 */].fromValues(1, 1);\n      this._rotDeg = 0;\n      this._globalXform = __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"c\" /* mat2d */].create();\n      this._xformDirty = false;\n      this._parent = null;\n      this._children = new Set();\n\n      this._initTransformFromOptions(opts);\n    }\n    /**\n     * Adds a child to this transform node\n     * @param {Transform2d} childXform\n     */\n\n  }, {\n    key: \"addChildXform\",\n    value: function addChildXform(childXform) {\n      if (!this._children.has(childXform)) {\n        this._children.add(childXform);\n\n        if (childXform._parent) {\n          childXform._parent.removeChild(childXform);\n        }\n\n        childXform._parent = this;\n        childXform._xformDirty = true;\n        dirtyChildren(childXform._children);\n      }\n    }\n    /**\n     * Removes a child from this transform node\n     * @param  {Transform2d} childXform\n     */\n\n  }, {\n    key: \"removeChildXform\",\n    value: function removeChildXform(childXform) {\n      this._children[\"delete\"](childXform);\n    }\n    /**\n     * Unparents this node from its parent, if it has one\n     */\n\n  }, {\n    key: \"unparentXform\",\n    value: function unparentXform() {\n      if (this._parent) {\n        this._parent.removeChild(this);\n\n        this._parent = null;\n        __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"c\" /* mat2d */].copy(this._globalXform, this.localXform);\n      }\n    }\n    /**\n     * Sets the pivot of the transform\n     * @param  {Vec2d} pivot Offset vector from the origin to apply the transformations\n     * @return {Transform2d}\n     */\n\n  }, {\n    key: \"getPosition\",\n\n    /**\n     * Gets the current unparented position of the transform\n     * @return {Point2d} This is the position of the node as if it were unparented\n     */\n    value: function getPosition() {\n      return __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"d\" /* vec2 */].clone(this._pos);\n    }\n    /**\n     * Gets the reference to the unparented position of the transform, avoiding\n     * a copy\n     * @return {Point2d}\n     * @readOnly\n     */\n\n  }, {\n    key: \"getPositionRef\",\n    value: function getPositionRef() {\n      return this._pos;\n    }\n    /**\n     * Gets the current world position of the transform, this is its position\n     * after all parent transformations have been applied\n     * @return {Point2d}\n     */\n\n  }, {\n    key: \"getWorldPosition\",\n    value: function getWorldPosition() {\n      var xform = this.globalXform;\n      return __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"create\"](xform[4], xform[5]);\n    }\n    /**\n     * Sets the unparented world position of the transform\n     * @param {Point2d} pos\n     */\n\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(pos) {\n      __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"copy\"](this._pos, pos);\n      this._lxformDirty = true;\n      dirtyChildren(this._children);\n    }\n    /**\n     * Translates the unparented world position of the transform by an offset\n     * @param  {Vec2d} translation\n     * @return {Transform2d}\n     */\n\n  }, {\n    key: \"translate\",\n    value: function translate(translation) {\n      if (translation[0] || translation[1]) {\n        __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"addVec2\"](this._pos, this._pos, translation);\n        this._lxformDirty = true;\n        dirtyChildren(this._children);\n      }\n\n      return this;\n    }\n    /**\n     * Gets the current unparented x,y scale of the transform\n     * @return {Vec2d}\n     */\n\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      return __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"d\" /* vec2 */].clone(this._scale);\n    }\n    /**\n     * Gets the current unparented x/y scale reference of the transform\n     * avoiding a copy\n     * @return {Vec2d}\n     * @readOnly\n     */\n\n  }, {\n    key: \"getScaleRef\",\n    value: function getScaleRef() {\n      return this._scale;\n    }\n    /**\n     * Sets the unparented scale of the transform\n     * @param {Vec2d} scale\n     * @return {Transform2d}\n     */\n\n  }, {\n    key: \"setScale\",\n    value: function setScale(scale) {\n      __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"d\" /* vec2 */].copy(this._scale, scale);\n      this._lxformDirty = true;\n      dirtyChildren(this._children);\n      return this;\n    }\n    /**\n     * Scales the current unparented scale by a 2d multiplier\n     * @param  {Vec2d} scaleMult\n     * @return {Transform2d}\n     */\n\n  }, {\n    key: \"scale\",\n    value: function scale(scaleMult) {\n      if (scaleMult[0] !== 1 || scaleMult[1] !== 1) {\n        __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"d\" /* vec2 */].multiply(this._scale, this._scale, scaleMult);\n        this._lxformDirty = true;\n        dirtyChildren(this._children);\n      }\n\n      return this;\n    }\n    /**\n     * Gets the current unparented rotation in degrees of the transform\n     * @return {number}\n     */\n\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      return this._rotDeg;\n    }\n    /**\n     * Sets the unparented rotation of the transform\n     * @param {number} deg Rotation in degrees\n     * @return {Transform2d}\n     */\n\n  }, {\n    key: \"setRotation\",\n    value: function setRotation(deg) {\n      this._rotDeg = deg;\n      this._lxformDirty = true;\n      dirtyChildren(this._children);\n      return this;\n    }\n    /**\n     * Adds an additional rotation in degrees to the current rotation\n     * of the transform\n     * @param  {number} deg Rotation offset in degrees\n     * @return {Transform2d}\n     */\n\n  }, {\n    key: \"rotate\",\n    value: function rotate(deg) {\n      if (deg) {\n        this._rotDeg += deg;\n        this._lxformDirty = true;\n        dirtyChildren(this._children);\n      }\n\n      return this;\n    }\n    /**\n     * Utility function to dirty all the descendants of this node\n     * @private\n     */\n\n  }, {\n    key: \"_dirtyChildren\",\n    value: function _dirtyChildren() {\n      dirtyChildren(this._children);\n    }\n    /**\n     * Updates the local affine matrix if marked as dirty\n     * If derived/mixin classes have a _localXformUpdates method\n     * defined, that will be called here when the local transform\n     * is updated.\n     * @private\n     */\n\n  }, {\n    key: \"_updatelocalxform\",\n    value: function _updatelocalxform() {\n      if (this._lxformDirty) {\n        buildXformMatrix(this._localXform, this._rotDeg, this._scale, this._pos, this._pivot);\n\n        if (this._localXformUpdated) {\n          this._localXformUpdated();\n        }\n\n        this._lxformDirty = false;\n      }\n    }\n    /**\n     * Updates the global 2x3 matrix of the transform if marked dirty\n     * If derived/mixin classes have a _globalXformUpdates method\n     * defined, that will be called here when the global transform\n     * is updated.\n     * @private\n     */\n\n  }, {\n    key: \"_updateglobalxform\",\n    value: function _updateglobalxform() {\n      if (this._lxformDirty || this._xformDirty) {\n        this._updatelocalxform();\n\n        if (this._parent) {\n          __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"c\" /* mat2d */].multiply(this._globalXform, this._parent.globalXform, this._localXform);\n        } else {\n          __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"c\" /* mat2d */].copy(this._globalXform, this._localXform);\n        }\n\n        if (this._globalXformUpdated) {\n          this._globalXformUpdated();\n        }\n\n        this._xformDirty = false;\n      }\n    }\n    /**\n     * Gets the current local transformation matrix of the node.\n     * @return {Mat2d}\n     */\n\n  }, {\n    key: \"transformCtx\",\n\n    /**\n     * Sets the transform state of a 2d rendering context\n     * @param  {CanvasRenderingContext2D} ctx\n     * @param  {Mat2d} currMatrix          The current matrix used to store the result of the\n     *                                     model-view-projection-screen matrix multiplication for this node\n     * @param  {Mat2d} worldToScreenMatrix The current world-to-screen tranform\n     */\n    value: function transformCtx(ctx, currMatrix, worldToScreenMatrix) {\n      __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"c\" /* mat2d */].multiply(currMatrix, worldToScreenMatrix, this.globalXform);\n      ctx.setTransform(currMatrix[0], currMatrix[1], currMatrix[2], currMatrix[3], currMatrix[4], currMatrix[5]);\n    }\n    /**\n     * Converts a Transform2d instance to a JSON object\n     * @param  {Transform2d} xformObj\n     * @return {{position: Point2d, scale: Vec2d, rotation: number, pivot: Vec2d}}\n     */\n\n  }, {\n    key: \"pivot\",\n    set: function set(pivot) {\n      __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"copy\"](this._pivot, pivot);\n      this._lxformDirty = true;\n      dirtyChildren(this._children);\n      return this;\n    }\n    /**\n     * Gets the current pivot of the transform\n     * @return {Vec2d}\n     */\n    ,\n    get: function get() {\n      return __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"clone\"](this._pivot);\n    }\n    /**\n     * Gets the current pivot reference of the transform.\n     * @return {[type]} [description]\n     * @readOnly\n     */\n\n  }, {\n    key: \"pivotRef\",\n    get: function get() {\n      return this._pivot;\n    }\n    /**\n     * Gets the parent transform node, if one is attached\n     * @return {Transform2d}\n     */\n\n  }, {\n    key: \"parent\",\n    get: function get() {\n      return this._parent;\n    }\n  }, {\n    key: \"localXform\",\n    get: function get() {\n      this._updatelocalxform();\n\n      return this._localXform;\n    }\n    /**\n     * Gets the current global transformation matrix of the node. This is essentially\n     * its local transform multiplied against all the local transforms of its parents.\n     * This is ultimately used to convert a point from object space to world space, and\n     * inversely, from world space to object space.\n     * @return {Mat2d}\n     */\n\n  }, {\n    key: \"globalXform\",\n    get: function get() {\n      this._updateglobalxform();\n\n      return this._globalXform;\n    }\n  }], [{\n    key: \"toJSON\",\n    value: function toJSON(xformObj) {\n      // TODO(croot): How do we deal with parenting here?\n      // To properly deal with this, we may need to supply an\n      // identifier for every created object... This may likely\n      // need to be a name string supplied by the user\n      var pos = xformObj.getPositionRef();\n      var scale = xformObj.getScaleRef();\n      var pivot = xformObj.pivotRef;\n      return {\n        position: [pos[0], pos[1]],\n        scale: [scale[0], scale[1]],\n        rotation: xformObj.getRotation(),\n        pivot: [pivot[0], pivot[1]]\n      };\n    }\n  }]);\n\n  return Transform2d;\n}();\n/**\n * Creates a new Transform2d mixin class that is intended to be mixed in with\n * a class that inherits from the EventHandler class\n * @param  {string} eventName Type name of the event fired when the transform is modified\n * @return {function}           Mixin\n */\n\n\n\nfunction createEventedTransform2dMixin(eventName) {\n  /**\n   * Transform2d modification event\n   * @event EventedTransform2d#changed\n   * @type {object}\n   * @property {string} attr Name of the attribute modified\n   * @property {} prevVal Previous value of the attribute prior to modification\n   * @property {} currVal Value of the attribute post modification\n   */\n\n  /**\n   * @mixin Transform2d mixin with event firing when modified\n   */\n  return Object(__WEBPACK_IMPORTED_MODULE_2__util_aggregation__[\"a\" /* default */])(null, Transform2d,\n  /*#__PURE__*/\n  function () {\n    function EventedTransform2d() {\n      _classCallCheck(this, EventedTransform2d);\n    }\n\n    _createClass(EventedTransform2d, [{\n      key: \"setPosition\",\n\n      /**\n       * Sets the unparented position of the transform.\n       * @param {Point2d} pos\n       * @fires  EventedTransform2d#changed\n       * @return {EventedTransform2d}\n       */\n      value: function setPosition(pos) {\n        if (!__WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"equals\"](pos, this._pos)) {\n          var prev = [this._pos[0], this._pos[1]];\n          __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"copy\"](this._pos, pos);\n          this._lxformDirty = true;\n          dirtyChildren(this._children);\n          this.fire(eventName, {\n            attr: \"position\",\n            prevVal: prev,\n            currVal: pos\n          });\n        }\n\n        return this;\n      }\n      /**\n       * Translates the unparented position of a transform by an offset.\n       * @param  {Vec2d} translation\n       * @fires  EventedTransform2d#changed\n       * @return {EventedTransform2d}\n       */\n\n    }, {\n      key: \"translate\",\n      value: function translate(translation) {\n        if (translation[0] || translation[1]) {\n          var prev = [this._pos[0], this._pos[1]];\n          __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"addVec2\"](this._pos, this._pos, translation);\n          this._lxformDirty = true;\n          dirtyChildren(this._children);\n          this.fire(eventName, {\n            attr: \"position\",\n            prevVal: prev,\n            currVal: [this._pos[0], this._pos[1]]\n          });\n        }\n\n        return this;\n      }\n      /**\n       * Sets the unparented 2d scale of the transform\n       * @param {Vec2d} scale\n       * @fires  EventedTransform2d#changed\n       * @return {EventedTransform2d}\n       */\n\n    }, {\n      key: \"setScale\",\n      value: function setScale(scale) {\n        if (!__WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"d\" /* vec2 */].equals(scale, this._scale)) {\n          var prev = [this._scale[0], this._scale[1]];\n          __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"d\" /* vec2 */].copy(this._scale, scale);\n          this._lxformDirty = true;\n          dirtyChildren(this._children);\n          this.fire(eventName, {\n            attr: \"size\",\n            prevVal: prev,\n            currVal: scale\n          });\n        }\n\n        return this;\n      }\n      /**\n       * Multiplies the current unparented scale of the transform by a 2d scalar\n       * @param  {Vec2d} scaleMult\n       * @fires  EventedTransform2d#changed\n       * @return {EventedTransform2d}\n       */\n\n    }, {\n      key: \"scale\",\n      value: function scale(scaleMult) {\n        if (scaleMult[0] !== 1 || scaleMult[1] !== 1) {\n          var prev = [this._scale[0], this._scale[1]];\n          __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"d\" /* vec2 */].multiply(this._scale, this._scale, scaleMult);\n          this._lxformDirty = true;\n          dirtyChildren(this._children);\n          this.fire(eventName, {\n            attr: \"size\",\n            prevVal: prev,\n            currVal: [this._scale[0], this._scale[1]]\n          });\n        }\n\n        return this;\n      }\n      /**\n       * Sets the unparented rotation of the transform in degrees\n       * @param {number} deg Rotation angle in degrees\n       * @fires  EventedTransform2d#changed\n       * @return {EventedTransform2d}\n       */\n\n    }, {\n      key: \"setRotation\",\n      value: function setRotation(deg) {\n        var degToUse = deg % 360;\n\n        if (degToUse !== this._rotDeg) {\n          var prev = this._rotDeg;\n          this._rotDeg = degToUse;\n          this._lxformDirty = true;\n          dirtyChildren(this._children);\n          this.fire(eventName, {\n            attr: \"orientation\",\n            prevVal: prev,\n            curral: this._rotDeg\n          });\n        }\n      }\n      /**\n       * Adds a rotation angle in degrees to the current unparented\n       * rotation of the transform.\n       * @param  {number} deg Additional rotation angle in degrees\n       * @fires  EventedTransform2d#changed\n       * @return {EventedTransform2d}\n       */\n\n    }, {\n      key: \"rotate\",\n      value: function rotate(deg) {\n        if (deg) {\n          var prev = this._rotDeg;\n          this._rotDeg += deg;\n          this._rotDeg %= 360;\n          this._lxformDirty = true;\n          dirtyChildren(this._children);\n          this.fire(eventName, {\n            attr: \"orientation\",\n            prevVal: prev,\n            curral: this._rotDeg\n          });\n        }\n\n        return this;\n      }\n      /**\n       * Utility function to reset all the unparented transform parameters\n       * @param {number} tx  Translation in x in world units\n       * @param {number} ty  Translation in y in world units\n       * @param {number} sx  Scale in x in world units\n       * @param {number} sy  Scale in y in world units\n       * @param {number} deg Rotation angle degrees\n       * @fires  EventedTransform2d#changed\n       * @return {EventedTransform2d}\n       */\n\n    }, {\n      key: \"setTransformations\",\n      value: function setTransformations(tx, ty, sx, sy, deg) {\n        var attrs = [];\n        var prevVals = [];\n        var currVals = [];\n\n        if (typeof tx !== \"undefined\" && typeof ty !== \"undefined\" && (!__WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"a\" /* glMatrix */].equals(tx, this._pos[0]) || !__WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"a\" /* glMatrix */].equals(ty, this._pos[1]))) {\n          var prev = __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"clone\"](this._pos);\n          this._pos[0] = tx;\n          this._pos[1] = ty;\n          attrs.push(\"position\");\n          prevVals.push(prev);\n          currVals.push(__WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"clone\"](this._pos));\n        }\n\n        if (typeof sx !== \"undefined\" && typeof sy !== \"undefined\" && (!__WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"a\" /* glMatrix */].equals(sx, this._scale[0]) || !__WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"a\" /* glMatrix */].equals(sy, this._scale[1]))) {\n          var _prev = __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"d\" /* vec2 */].clone(this._scale);\n\n          __WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"d\" /* vec2 */].set(this._scale, sx, sy);\n          attrs.push(\"size\");\n          prevVals.push(_prev);\n          currVals.push(__WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"d\" /* vec2 */].clone(this._scale));\n        }\n\n        if (typeof deg !== \"undefined\") {\n          var degToUse = deg % 360;\n\n          if (!__WEBPACK_IMPORTED_MODULE_1_gl_matrix__[\"a\" /* glMatrix */].equals(degToUse, this._rotDeg)) {\n            var _prev2 = this._rotDeg;\n            this._rotDeg = degToUse;\n            attrs.push(\"orientation\");\n            prevVals.push(_prev2);\n            currVals.push(this._rotDeg);\n          }\n        }\n\n        if (attrs.length) {\n          this._lxformDirty = true;\n          dirtyChildren(this._children);\n          this.fire(eventName, {\n            attrs: attrs,\n            prevVals: prevVals,\n            currVals: currVals\n          });\n        }\n\n        return this;\n      }\n    }, {\n      key: \"pivot\",\n\n      /**\n       * Sets the unparented pivot of the transform. The pivot is\n       * the offset from the transform's primary position where the\n       * transformation is applied.\n       * @param {Vec2d} pivot\n       * @fires  EventedTransform2d#changed\n       * @return {EventedTransform2d}\n       */\n      set: function set(pivot) {\n        if (!__WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"equals\"](pivot, this._pivot)) {\n          var prev = [this._pivot[0], this._pivot[1]];\n          __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"copy\"](this._pivot, pivot);\n          this._lxformDirty = true;\n          dirtyChildren(this._children);\n          this.fire(eventName, {\n            attr: \"pivot\",\n            prevVal: prev,\n            currVal: pivot\n          });\n        }\n\n        return this;\n      }\n      /**\n       * Gets a copy of the unparented pivot of the transform\n       * @return {Vec2d}\n       */\n      ,\n      get: function get() {\n        return __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"clone\"](this._pivot);\n      }\n    }]);\n\n    return EventedTransform2d;\n  }());\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return EventHandler; });\n\n/**\n  @typedef EventObject\n  @type {object}\n  @property {string} type - the type of the event\n  @property {string} target - the target object that fired the event\n /\n\n/**\n * This callback is displayed as a global member.\n * @callback EventCallback\n * @param {EventObject} Event object describing the event being fired\n */\n\n/**\n * Recursively fires hierarchical events from an handler's registered\n * event types. For example, if an event is registered as \"changed:color\",\n * both a \"changed:color\" and \"changed\" event is fired, so listeners who\n * only generically care if something changed on an object can be notified.\n * @param  {Map} currMap  map datastructure holding all hierarchical events and callbacks\n * @param  {string[]} subtypes the \":\" separated list of the event\n * @param  {number} currIdx  the current index of subtypes being processed\n * @param  {Object} fireData the event object to fire\n * @return {number}          total number of listeners called\n * @private\n */\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction recursiveFire(currMap, subtypes, currIdx, fireData) {\n  var _this = this;\n\n  if (currIdx >= subtypes.length) {\n    return 0;\n  }\n\n  var cnt = 0;\n  var data = null;\n  data = currMap.get(subtypes[currIdx]);\n\n  if (data) {\n    cnt = recursiveFire(data[0], subtypes, currIdx + 1, fireData);\n    data[1].forEach(function (listener) {\n      return listener.call(_this, fireData);\n    });\n    cnt += data[1].length;\n  }\n\n  return cnt;\n}\n/**\n * Recursively deletes specific listeners from a handlers event\n * data structure. For instance, if the same callback is used for both\n * a \"changed\" and a \"changed:color\" event, and that callback is deleted\n * from the \"changed\" event, it is also deleted from the \"changed:color\" event\n * @param  {Object} currNode  Current node of the map data structure being processed\n * @param  {function[]} listeners Array of listeners to delete\n * @private\n */\n\n\nfunction recursiveDelete(currNode, listeners) {\n  var index = -1;\n  var subnodes = currNode[0];\n  var nodelisteners = currNode[1];\n\n  if (nodelisteners.length) {\n    listeners.forEach(function (listener) {\n      if ((index = nodelisteners.indexOf(listener)) >= 0) {\n        nodelisteners.splice(index, 1);\n      }\n    });\n  }\n\n  subnodes.forEach(function (node) {\n    recursiveDelete(node, listeners);\n  });\n}\n/**\n * Validates that an input is a string or an array of strings, and if the former\n * returns a 1-element string array\n * @param  {string|string[]} intype\n * @return {string[]}\n * @private\n */\n\n\nfunction arrayify(intype) {\n  var arrayToUse = intype;\n\n  if (typeof intype === \"string\") {\n    arrayToUse = [intype];\n  } else if (!Array.isArray(intype)) {\n    throw new Error(\"Input must be an array of strings\");\n  }\n\n  return arrayToUse;\n}\n/** Class for managing events and listeners. Can be used as a base class or a mixin (using @see {@link aggregation}) */\n\n\nvar EventHandler =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create a new event handler\n   * @param  {string|string[]} eventsToRegister initial events to register\n   */\n  function EventHandler(eventsToRegister) {\n    _classCallCheck(this, EventHandler);\n\n    this.initializer(eventsToRegister);\n  }\n  /**\n   * Initializes an event handler object\n   * @param  {string|string[]} eventsToRegister events to initialize event handler with\n   * @see  {@link aggregation}\n   */\n\n\n  _createClass(EventHandler, [{\n    key: \"initializer\",\n    value: function initializer(eventsToRegister) {\n      this._listeners = new Map();\n      this.registerEvents(eventsToRegister);\n    }\n    /**\n     * Registers new events for the event handler\n     * @param  {string|string[]} events new event(s) to register\n     */\n\n  }, {\n    key: \"registerEvents\",\n    value: function registerEvents(events) {\n      var _this2 = this;\n\n      if (!events) {\n        return;\n      }\n\n      var eventsToUse = arrayify(events);\n\n      if (typeof events === \"string\") {\n        eventsToUse = [events];\n      } else if (!Array.isArray(events)) {\n        throw new Error(\"Events must be an array of strings\");\n      }\n\n      eventsToUse.forEach(function (event) {\n        var subevents = event.split(\":\");\n        var currMap = _this2._listeners;\n\n        for (var i = 0; i < subevents.length; i += 1) {\n          var data = currMap.get(subevents[i]);\n\n          if (!data) {\n            data = [new Map(), []];\n            currMap.set(subevents[i], data);\n          }\n\n          currMap = data[0];\n        }\n      });\n    }\n    /**\n     * Adds a new listener to a specific event or list of different events\n     * @param  {string|string[]} types    event(s) this listener is listening to\n     * @param  {EventCallback} listener function to be called when events destribed by types is fired\n     * @return {EventHandler}          this\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(types, listener) {\n      var _this3 = this;\n\n      var typesToUse = arrayify(types);\n      typesToUse.forEach(function (type) {\n        var subtypes = type.split(\":\");\n        var currMap = _this3._listeners;\n        var data = null;\n        subtypes.forEach(function (subtype) {\n          data = currMap.get(subtype);\n\n          if (!data) {\n            var keys = [];\n            currMap.forEach(function (val, key) {\n              return keys.push(key);\n            });\n            throw new Error(\"\".concat(type, \" is not a valid event type. The registered event types at this level are [\").concat(keys, \"]\"));\n          }\n\n          currMap = data[0];\n        });\n\n        if (data[1].indexOf(listener) < 0) {\n          data[1].push(listener);\n        }\n      });\n      return this;\n    }\n    /**\n     * Removes a listener from specific events\n     * @param  {string|string[]} types    event(s) the listener is being removed from\n     * @param  {EventCallback} listener callback function to be cleared from the specified event types\n     * @return {EventHandler}          this\n     */\n\n  }, {\n    key: \"off\",\n    value: function off(types, listener) {\n      var _this4 = this;\n\n      var typesToUse = arrayify(types);\n      var listeners = listener;\n\n      if (!Array.isArray(listeners)) {\n        listeners = [listener];\n      }\n\n      typesToUse.forEach(function (type) {\n        var subtypes = type.split(\":\");\n        var currMap = _this4._listeners;\n        var data = null;\n        var i = 0;\n\n        for (i = 0; i < subtypes.length; i += 1) {\n          data = currMap.get(subtypes[i]);\n\n          if (!data) {\n            break;\n          }\n\n          currMap = data[0];\n        }\n\n        if (data) {\n          recursiveDelete(data, listeners);\n        }\n      });\n      return this;\n    }\n    /**\n     * Sets up a lister callback to only be called once\n     * @param  {string|string[]} types    event(s) the listener is listening to\n     * @param  {EventCallback} listener callback function to be called with event(s) are fired\n     * @return {EventHandler}          this\n     */\n\n  }, {\n    key: \"once\",\n    value: function once(types, listener) {\n      var _this5 = this;\n\n      var wrapper = function wrapper(data) {\n        _this5.off(types, wrapper);\n\n        listener.call(_this5, data);\n      };\n\n      this.on(types, wrapper);\n      return this;\n    }\n    /**\n     * Fires a specific event and calls any listeners of that event type.\n     * @param  {string} type Event type to fire\n     * @param  {Object} data Additional data to fire with the event\n     * @return {EventHandler}      this\n     */\n\n  }, {\n    key: \"fire\",\n    value: function fire(type, data) {\n      var subtypes = type.split(\":\");\n      var fireData = {\n        type: type,\n        target: this\n      };\n      Object.assign(fireData, data);\n      recursiveFire(this._listeners, subtypes, 0, fireData); // To ensure that no error events are dropped, print them to the\n      // console if they have no listeners.\n      // if (!numFires && endsWith(type, \"error\")) {\n      //   console.error((data && data.error) || data || \"Empty error event\")\n      // }\n\n      if (this._eventParent) {\n        fireData = {};\n        Object.getOwnPropertyNames(data).forEach(function (key) {\n          fireData[key] = data[key];\n        });\n\n        this._eventParent.fire(type, fireData);\n      }\n\n      return this;\n    }\n    /**\n     * Returns whether or not this event hander fires a specific event type\n     * @param  {string} type Event type\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"listens\",\n    value: function listens(type) {\n      var subtypes = type.split(\":\");\n      var currMap = this._listeners;\n      var data = null;\n\n      for (var i = 0; i < subtypes.length; i += 1) {\n        data = currMap.get(subtypes[i]);\n\n        if (!data) {\n          break;\n        }\n\n        currMap = data[0];\n      }\n\n      return data || this._eventParent && this._eventParent.listens(type);\n    }\n    /**\n     * Sets a parent event handler\n     * @param {EventHandler} parent\n     * @param {object} data\n     */\n\n  }, {\n    key: \"setEventedParent\",\n    value: function setEventedParent(parent, data) {\n      this._eventParent = parent;\n      this._eventParentData = data;\n      return this;\n    }\n  }]);\n\n  return EventHandler;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return PolyLine; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_point2d__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__base_shape_js__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_matrix__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__math_math__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__math_convex_hull__ = __webpack_require__(22);\n/* eslint-disable no-magic-numbers */\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\n\nvar identityMatrix = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__[\"c\" /* mat2d */].create();\n/**\n * Expands an axis-aligned bounding box to encapsulate a 2d vertex\n * defined in an array of vertices, and updates a struct used to\n * store the indices of the vertices that define the final bounds\n * of the vertices\n * @param  {AABox2d} box          Bounds to expand\n * @param  {Point2d} pt           2d vertex to encapsulate\n * @param  {number} ptIdx         Index of the vertex in its list of vertices\n * @param  {number[]} extentIndices Struct to store the indices of the bounding vertices\n * @private\n */\n\nfunction aaboxEncapsulatePt(box, pt, ptIdx, extentIndices) {\n  if (__WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"isEmpty\"](box)) {\n    box[0] = pt[0];\n    box[2] = pt[0];\n    extentIndices[0] = extentIndices[2] = ptIdx;\n    box[1] = pt[1];\n    box[3] = pt[1];\n    extentIndices[1] = extentIndices[3] = ptIdx;\n  } else {\n    if (pt[0] < box[0]) {\n      box[0] = pt[0];\n      extentIndices[0] = ptIdx;\n    } else if (pt[0] > box[2]) {\n      box[2] = pt[0];\n      extentIndices[2] = ptIdx;\n    }\n\n    if (pt[1] < box[1]) {\n      box[1] = pt[1];\n      extentIndices[1] = ptIdx;\n    } else if (pt[1] > box[3]) {\n      box[3] = pt[1];\n      extentIndices[3] = ptIdx;\n    }\n  }\n}\n/**\n * Function called sequentially to calculate the centroid of a polygon\n * @param  {Point2d} centroidPt Current centroid point\n * @param  {Point2d} pt1        Point describing one end of an edge of a polygon\n * @param  {Point2d} pt2        Point describing other end of an edge of a polygon\n * @private\n */\n\n\nfunction buildCentroid(centroidPt, pt1, pt2) {\n  var a = pt1[0] * pt2[1] - pt2[0] * pt1[1];\n  centroidPt[0] += (pt1[0] + pt2[0]) * a;\n  centroidPt[1] += (pt1[1] + pt2[1]) * a;\n  return a;\n}\n/**\n * Utility function used to check whether an argument is an array\n * of an arraybuffer\n * @param  {}  obj\n * @return {Boolean}     Returns true if object is array-like\n */\n\n\nfunction isArray(obj) {\n  return Array.isArray(obj) || ArrayBuffer && ArrayBuffer.isView(obj);\n}\n/**\n * @typedef {object} PolyLineOptions\n * @property {number[]|Point2d[]} [verts=[]] Initial vertices of the polyline\n */\n\n/**\n * @class Class defining a poly line\n * @extends {BaseShape}\n */\n\n\nvar PolyLine =\n/*#__PURE__*/\nfunction (_BaseShape) {\n  _inherits(PolyLine, _BaseShape);\n\n  /**\n   * Creates a new poly line shape\n   * @param  {PolyLineOptions} [opts] [description]\n   * @return {PolyLine}\n   */\n  function PolyLine(opts) {\n    var _this;\n\n    _classCallCheck(this, PolyLine);\n\n    var verts = opts.verts || [];\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PolyLine).call(this, opts));\n\n    if (!isArray(verts) || verts.length === 0 || isArray(verts[0]) && verts.length < 1 || !isArray(verts[0]) && (verts.length < 2 || verts.length % 2 !== 0)) {\n      throw new Error(\"PolyLine shapes must be initialized with an array of 2d points and contain at least 1 points\");\n    } // going to build the aabox and store the indices for each vertex\n    // that defines the bounds\n\n\n    _this._extentIndices = [-1, -1, -1, -1];\n    _this._localaabox = __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"create\"]();\n    _this._verts = [];\n    _this._centroid = [0, 0];\n    __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"initEmpty\"](_this._aabox);\n    var signedArea = 0;\n    var i = 0;\n\n    if (isArray(verts[0])) {\n      for (i = 0; i < verts.length - 1; i += 1) {\n        _this._verts.push(__WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"clone\"](verts[i]));\n\n        aaboxEncapsulatePt(_this._aabox, verts[i], i, _this._extentIndices);\n        signedArea += buildCentroid(_this._centroid, verts[i], verts[i + 1]);\n      }\n\n      _this._verts.push(__WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"clone\"](verts[i]));\n\n      aaboxEncapsulatePt(_this._aabox, verts[i], i, _this._extentIndices);\n      signedArea += buildCentroid(_this._centroid, verts[i], verts[0]);\n    } else {\n      _this._verts.push(__WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"create\"](verts[0], verts[1]));\n\n      aaboxEncapsulatePt(_this._aabox, _this._verts[0], 0, _this._extentIndices);\n      var idx = 1;\n\n      for (i = 2; i < verts.length - 2; i += 2, idx += 1) {\n        _this._verts.push(__WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"create\"](verts[i], verts[i + 1]));\n\n        aaboxEncapsulatePt(_this._aabox, _this._verts[idx], idx, _this._extentIndices);\n        signedArea += buildCentroid(_this._centroid, _this._verts[idx - 1], _this._verts[idx]);\n      }\n\n      _this._verts.push(__WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"create\"](verts[i], verts[i + 1]));\n\n      aaboxEncapsulatePt(_this._aabox, _this._verts[idx], idx, _this._extentIndices);\n      signedArea += buildCentroid(_this._centroid, _this._verts[idx], _this._verts[0]);\n    }\n\n    signedArea *= 0.5;\n    _this._centroid[0] /= 6.0 * signedArea;\n    _this._centroid[1] /= 6.0 * signedArea; // extract the center of the aabox. We are going to use this as the\n    // shape's pivot, so all rotation/scale transformations will be sourced\n    // at this location\n\n    var pivot = __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"create\"]();\n    __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"getCenter\"](pivot, _this._aabox);\n    _this.pivot = pivot; // now build the convex hull of the vertices.\n    // When rebuilding the axis aligned box (a transform is applied for example),\n    // there's no need to traverse all the points. All we need to do is traverse\n    // the points that define the convex hull to rebuild the bounds\n\n    if (_this._verts.length < 3) {\n      _this._convexHull = _this._verts.map(function (val, idx) {\n        return idx;\n      });\n    } else {\n      _this._convexHull = Object(__WEBPACK_IMPORTED_MODULE_5__math_convex_hull__[\"a\" /* simpleHull_2D */])(_this._verts);\n    }\n\n    return _this;\n  }\n  /**\n   * Get the untransformed width/height of the polyline. This is essentially\n   * the width/height of the poly's bounds\n   * @return {Vec2d} Width/height of the bounds of the polyline\n   */\n\n\n  _createClass(PolyLine, [{\n    key: \"getDimensions\",\n    value: function getDimensions() {\n      return [this.width, this.height];\n    }\n    /**\n     * Get the untransformed width of the polyline. This is the width of the\n     * axis-aligned bounds of the poly\n     * @return {number} Width of the poly in world-space units\n     */\n\n  }, {\n    key: \"_collapseVerts\",\n\n    /**\n     * Utility function that collapses all the verts, meaning the verts\n     * are flattened to their position with local-space transforms applied\n     * and then the local transforms are cleared. This is done whenever\n     * the vertices of the polygon are modified as it can be a little tricky\n     * to re-adjust the pivot/transforms of the vert when new verts are added,\n     * deleted, etc.\n     * @return {boolean} Returns true if the points were indeed flattened\n     *                   The points wouldn't be flattened if there are no\n     *                   transforms to apply, for example\n     * @private\n     */\n    value: function _collapseVerts() {\n      var _this2 = this;\n\n      __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"set\"](this._pivot, 0, 0); // TODO(croot): what if this poly is\n      // parented to another transform?\n\n      var xform = this.localXform;\n\n      if (__WEBPACK_IMPORTED_MODULE_3_gl_matrix__[\"c\" /* mat2d */].equals(xform, identityMatrix)) {\n        // if there are no transforms to apply,\n        // do nothing - fast out\n        return false;\n      }\n\n      __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"initEmpty\"](this._aabox); // flatten all the points to their current world-space position\n      // with transforms applied\n\n      for (var i = 0; i < this._verts.length; i += 1) {\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"transformMat2d\"](this._verts[i], this._verts[i], xform);\n      } // now recalcute the convex hull of all the transformed points\n\n\n      if (this._verts.length < 3) {\n        this._convexHull = this._verts.map(function (val, idx) {\n          return idx;\n        });\n      } else {\n        this._convexHull = Object(__WEBPACK_IMPORTED_MODULE_5__math_convex_hull__[\"a\" /* simpleHull_2D */])(this._verts);\n      } // use the convex hull points to rebuild the bounds\n\n\n      this._convexHull.forEach(function (idx) {\n        aaboxEncapsulatePt(_this2._aabox, _this2._verts[idx], idx, _this2._extentIndices);\n      }); // reset the local transforms\n\n\n      this.setTransformations(0, 0, 1, 1, 0);\n      return true;\n    }\n    /**\n     * Translates a specific vertex of the polygon by an offset\n     * @param  {number} vertIndex Index of the vertex to translate\n     * @param  {Vec2d} t         Translation offset, in world-space units\n     * @return {PolyLine}           this\n     * @fires {Shape#geomChanged}\n     * @throws {Error} If vertIndex is invalid.\n     */\n\n  }, {\n    key: \"translateVert\",\n    value: function translateVert(vertIndex, t) {\n      if (vertIndex >= this._verts.length) {\n        throw new Error(\"Cannot translate vertex at index \".concat(vertIndex, \". There are only \").concat(this._verts.length, \" vertices in the polygon.\"));\n      }\n\n      if (t[0] || t[1]) {\n        var prev = __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"clone\"](this._verts[vertIndex]);\n        var newPt = __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"clone\"](this._verts[vertIndex]);\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"addVec2\"](newPt, newPt, t); // TODO(croot): this could be made smarter by determining whether\n        // this point affects the convex hull or not by checking it's relationship\n        // with its neighbors\n\n        this._collapseVerts();\n\n        this._resetAABox = true;\n        this._geomDirty = true;\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"copy\"](newPt);\n        this.fire(\"changed:geom\", {\n          attr: \"verts[\".concat(vertIndex, \"]\"),\n          prevVal: prev,\n          currVal: newPt\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setVertPosition\",\n    value: function setVertPosition(vertIndex, pos) {\n      if (vertIndex >= this._verts.length) {\n        throw new Error(\"Cannot translate vertex at index \".concat(vertIndex, \". There are only \").concat(this._verts.length, \" vertices in the polygon.\"));\n      }\n\n      if (!__WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"equals\"](pos, this._verts[vertIndex])) {\n        var prev = __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"clone\"](this._verts[vertIndex]);\n\n        this._collapseVerts();\n\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"copy\"](this._verts[vertIndex], pos); // TODO(croot): this could be made smarter by determining whether\n        // this point affects the convex hull or not by checking it's relationship\n        // with its neighbors\n\n        this._resetAABox = true;\n        this._geomDirty = true;\n        this.fire(\"changed:geom\", {\n          attr: \"verts[\".concat(vertIndex, \"]\"),\n          prevVal: prev,\n          currVal: pos\n        });\n      }\n    }\n  }, {\n    key: \"insertVert\",\n    value: function insertVert(vertIndex, pos) {\n      var idx = __WEBPACK_IMPORTED_MODULE_4__math_math__[\"a\" /* default */].min(__WEBPACK_IMPORTED_MODULE_4__math_math__[\"a\" /* default */].max(vertIndex, 0), this._verts.length);\n\n      this._collapseVerts();\n\n      if (vertIndex >= this._verts.length) {\n        this._verts.push(__WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"clone\"](pos));\n\n        idx = this._verts.length - 1;\n      } else {\n        this._verts.splice(vertIndex, 0, __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"clone\"](pos));\n      }\n\n      this._resetAABox = true;\n      this._geomDirty = true;\n      this.fire(\"changed:geom:addvert\", {\n        attr: \"verts[\".concat(idx, \"]\"),\n        currVal: pos\n      });\n      return idx;\n    }\n  }, {\n    key: \"appendVert\",\n    value: function appendVert(pos) {\n      return this.insertVert(this._verts.length, pos);\n    }\n  }, {\n    key: \"removeVert\",\n    value: function removeVert(vertIndex) {\n      if (vertIndex >= this._verts.length || vertIndex < 0) {\n        throw new Error(\"Cannot remove vertex \".concat(vertIndex, \". Invalid index. There are only \").concat(this._verts.length, \" vertices in the shape.\"));\n      }\n\n      var pos = this._verts[vertIndex];\n\n      this._verts.splice(vertIndex, 1);\n\n      this._collapseVerts();\n\n      this._resetAABox = true;\n      this._geomDirty = true;\n      this.fire(\"changed:geom:removevert\", {\n        attr: \"verts[\".concat(vertIndex, \"]\"),\n        currVal: pos\n      });\n      return vertIndex;\n    }\n  }, {\n    key: \"_rebuildAABox\",\n    value: function _rebuildAABox() {\n      var _this3 = this;\n\n      __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"initEmpty\"](this._aabox);\n\n      if (this._verts.length < 3) {\n        this._convexHull = this._verts.map(function (val, idx) {\n          return idx;\n        });\n      } else {\n        this._convexHull = Object(__WEBPACK_IMPORTED_MODULE_5__math_convex_hull__[\"a\" /* simpleHull_2D */])(this._verts);\n      }\n\n      this._convexHull.forEach(function (idx) {\n        aaboxEncapsulatePt(_this3._aabox, _this3._verts[idx], idx, _this3._extentIndices);\n      });\n\n      var pivot = __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"create\"](0, 0);\n      __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"getCenter\"](pivot, this._aabox);\n      this.pivot = pivot;\n    }\n  }, {\n    key: \"_updateAABox\",\n    value: function _updateAABox() {\n      var _this4 = this;\n\n      if (this._resetAABox) {\n        this._rebuildAABox();\n\n        this._resetAABox = false;\n      }\n\n      if (this._boundsOutOfDate || this._geomDirty) {\n        __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"initEmpty\"](this._aabox);\n        var tmppt = [0, 0];\n        var xform = this.globalXform;\n\n        this._convexHull.forEach(function (idx) {\n          __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"encapsulatePt\"](_this4._aabox, _this4._aabox, __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"transformMat2d\"](tmppt, _this4._verts[idx], xform));\n        });\n\n        this._boundsOutOfDate = false;\n\n        if (this._geomDirty) {\n          var pivot = __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"create\"]();\n          pivot[0] = this._verts[this._extentIndices[0]][0] + 0.5 * (this._verts[this._extentIndices[2]][0] - this._verts[this._extentIndices[0]][0]);\n          pivot[1] = this._verts[this._extentIndices[1]][1] + 0.5 * (this._verts[this._extentIndices[3]][1] - this._verts[this._extentIndices[1]][1]);\n          this.pivot = pivot;\n          this._geomDirty = false;\n        }\n      }\n    }\n  }, {\n    key: \"_draw\",\n    value: function _draw(ctx) {\n      var rtn = false;\n\n      if (this._verts.length >= 2) {\n        ctx.moveTo(this._verts[0][0], this._verts[0][1]);\n\n        for (var i = 1; i < this._verts.length; i += 1) {\n          ctx.lineTo(this._verts[i][0], this._verts[i][1]);\n        }\n\n        rtn = true;\n      }\n\n      return rtn;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Object.assign({\n        type: \"PolyLine\",\n        // NOTE: this much match the name of the class\n        verts: this.vertsRef.map(function (vert) {\n          return [vert[0], vert[1]];\n        })\n      }, _get(_getPrototypeOf(PolyLine.prototype), \"toJSON\", this).call(this));\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      this._updateAABox();\n\n      if (!this._verts.length || this._extentIndices[0] < 0 || this._extentIndices[2] < 0) {\n        return 0;\n      }\n\n      return this._verts[this._extentIndices[2]][0] - this._verts[this._extentIndices[0]][0];\n    }\n    /**\n     * Gets the untransformed height of the polyline. This is the height of the axis-aligned\n     * bounds of the poly\n     * @return {number} Height of the poly in world-space units\n     */\n\n  }, {\n    key: \"height\",\n    get: function get() {\n      this._updateAABox();\n\n      if (!this._verts.length || this._extentIndices[0] < 0 || this._extentIndices[2] < 0) {\n        return 0;\n      }\n\n      return this._verts[this._extentIndices[3]][1] - this._verts[this._extentIndices[1]][1];\n    }\n    /**\n     * Gets a reference to the vertex array of the polyline\n     * @return {Point2d[]}\n     * @readOnly\n     */\n\n  }, {\n    key: \"vertsRef\",\n    get: function get() {\n      return this._verts;\n    }\n    /**\n     * Gets the number of vertices in the polyline\n     * @return {number}\n     */\n\n  }, {\n    key: \"numVerts\",\n    get: function get() {\n      return this._verts.length;\n    }\n  }]);\n\n  return PolyLine;\n}(__WEBPACK_IMPORTED_MODULE_2__base_shape_js__[\"a\" /* default */]);\n\n\nPolyLine.aaboxEncapsulatePt = aaboxEncapsulatePt;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = create;\n/* unused harmony export fromMat4 */\n/* unused harmony export clone */\n/* unused harmony export copy */\n/* unused harmony export fromValues */\n/* unused harmony export set */\n/* unused harmony export identity */\n/* unused harmony export transpose */\n/* unused harmony export invert */\n/* unused harmony export adjoint */\n/* unused harmony export determinant */\n/* unused harmony export multiply */\n/* unused harmony export translate */\n/* unused harmony export rotate */\n/* unused harmony export scale */\n/* unused harmony export fromTranslation */\n/* unused harmony export fromRotation */\n/* unused harmony export fromScaling */\n/* unused harmony export fromMat2d */\n/* unused harmony export fromQuat */\n/* unused harmony export normalFromMat4 */\n/* unused harmony export projection */\n/* unused harmony export str */\n/* unused harmony export frob */\n/* unused harmony export add */\n/* unused harmony export subtract */\n/* unused harmony export multiplyScalar */\n/* unused harmony export multiplyScalarAndAdd */\n/* unused harmony export exactEquals */\n/* unused harmony export equals */\n/* unused harmony export mul */\n/* unused harmony export sub */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(1);\n\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nfunction create() {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](9);\r\n  if (__WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nfunction fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nfunction clone(a) {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nfunction fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nfunction set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nfunction identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nfunction transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nfunction invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nfunction adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nfunction determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nfunction translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nfunction rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nfunction scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nfunction fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nfunction fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nfunction fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nfunction fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nfunction fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nfunction normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nfunction projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nfunction str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nfunction frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nfunction multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nfunction multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nvar mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nvar sub = subtract;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export create */\n/* unused harmony export clone */\n/* unused harmony export copy */\n/* unused harmony export fromValues */\n/* unused harmony export set */\n/* unused harmony export identity */\n/* unused harmony export transpose */\n/* unused harmony export invert */\n/* unused harmony export adjoint */\n/* unused harmony export determinant */\n/* unused harmony export multiply */\n/* unused harmony export translate */\n/* unused harmony export scale */\n/* unused harmony export rotate */\n/* unused harmony export rotateX */\n/* unused harmony export rotateY */\n/* unused harmony export rotateZ */\n/* unused harmony export fromTranslation */\n/* unused harmony export fromScaling */\n/* unused harmony export fromRotation */\n/* unused harmony export fromXRotation */\n/* unused harmony export fromYRotation */\n/* unused harmony export fromZRotation */\n/* unused harmony export fromRotationTranslation */\n/* unused harmony export fromQuat2 */\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = getTranslation;\n/* unused harmony export getScaling */\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = getRotation;\n/* unused harmony export fromRotationTranslationScale */\n/* unused harmony export fromRotationTranslationScaleOrigin */\n/* unused harmony export fromQuat */\n/* unused harmony export frustum */\n/* unused harmony export perspective */\n/* unused harmony export perspectiveFromFieldOfView */\n/* unused harmony export ortho */\n/* unused harmony export lookAt */\n/* unused harmony export targetTo */\n/* unused harmony export str */\n/* unused harmony export frob */\n/* unused harmony export add */\n/* unused harmony export subtract */\n/* unused harmony export multiplyScalar */\n/* unused harmony export multiplyScalarAndAdd */\n/* unused harmony export exactEquals */\n/* unused harmony export equals */\n/* unused harmony export mul */\n/* unused harmony export sub */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(1);\n\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nfunction create() {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](16);\r\n  if (__WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nfunction clone(a) {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nfunction fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nfunction set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nfunction identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nfunction transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nfunction invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nfunction adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nfunction determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nfunction translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;\r\n    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;\r\n    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nfunction scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nfunction rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n  var b00 = void 0,\r\n      b01 = void 0,\r\n      b02 = void 0;\r\n  var b10 = void 0,\r\n      b11 = void 0,\r\n      b12 = void 0;\r\n  var b20 = void 0,\r\n      b21 = void 0,\r\n      b22 = void 0;\r\n\r\n  if (len < __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"]) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nfunction rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nfunction rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nfunction rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nfunction fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nfunction fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nfunction fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n\r\n  if (len < __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"]) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nfunction fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nfunction fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nfunction fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nfunction fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nfunction fromQuat2(out, a) {\r\n  var translation = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nfunction getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nfunction getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nfunction getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  var trace = mat[0] + mat[5] + mat[10];\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nfunction fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nfunction fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nfunction fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nfunction frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nfunction perspective(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf = void 0;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nfunction perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nfunction ortho(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nfunction lookAt(out, eye, center, up) {\r\n  var x0 = void 0,\r\n      x1 = void 0,\r\n      x2 = void 0,\r\n      y0 = void 0,\r\n      y1 = void 0,\r\n      y2 = void 0,\r\n      z0 = void 0,\r\n      z1 = void 0,\r\n      z2 = void 0,\r\n      len = void 0;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] && Math.abs(eyey - centery) < __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] && Math.abs(eyez - centerz) < __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"]) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nfunction targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nfunction str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nfunction frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nfunction multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nfunction multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n\r\n  return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nvar mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nvar sub = subtract;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"b\"] = create;\n/* unused harmony export identity */\n/* unused harmony export setAxisAngle */\n/* unused harmony export getAxisAngle */\n/* unused harmony export multiply */\n/* harmony export (immutable) */ __webpack_exports__[\"e\"] = rotateX;\n/* harmony export (immutable) */ __webpack_exports__[\"f\"] = rotateY;\n/* harmony export (immutable) */ __webpack_exports__[\"g\"] = rotateZ;\n/* unused harmony export calculateW */\n/* unused harmony export slerp */\n/* unused harmony export random */\n/* unused harmony export invert */\n/* unused harmony export conjugate */\n/* unused harmony export fromMat3 */\n/* unused harmony export fromEuler */\n/* unused harmony export str */\n/* unused harmony export clone */\n/* unused harmony export fromValues */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return copy; });\n/* unused harmony export set */\n/* unused harmony export add */\n/* unused harmony export mul */\n/* unused harmony export scale */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return dot; });\n/* unused harmony export lerp */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return length; });\n/* unused harmony export len */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return squaredLength; });\n/* unused harmony export sqrLen */\n/* unused harmony export normalize */\n/* unused harmony export exactEquals */\n/* unused harmony export equals */\n/* unused harmony export rotationTo */\n/* unused harmony export sqlerp */\n/* unused harmony export setAxes */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mat3_js__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vec3_js__ = __webpack_require__(16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__vec4_js__ = __webpack_require__(17);\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nfunction create() {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](4);\r\n  if (__WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nfunction identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nfunction setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nfunction getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n  if (s > __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"]) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nfunction rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nfunction rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nfunction rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nfunction calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nfunction slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  var omega = void 0,\r\n      cosom = void 0,\r\n      sinom = void 0,\r\n      scale0 = void 0,\r\n      scale1 = void 0;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  }\r\n  // calculate coefficients\r\n  if (1.0 - cosom > __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"]) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nfunction random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = __WEBPACK_IMPORTED_MODULE_0__common_js__[\"RANDOM\"]();\r\n  var u2 = __WEBPACK_IMPORTED_MODULE_0__common_js__[\"RANDOM\"]();\r\n  var u3 = __WEBPACK_IMPORTED_MODULE_0__common_js__[\"RANDOM\"]();\r\n\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nfunction invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nfunction conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nfunction fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot = void 0;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nfunction fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nfunction str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nvar clone = __WEBPACK_IMPORTED_MODULE_3__vec4_js__[\"b\" /* clone */];\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nvar fromValues = __WEBPACK_IMPORTED_MODULE_3__vec4_js__[\"g\" /* fromValues */];\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nvar copy = __WEBPACK_IMPORTED_MODULE_3__vec4_js__[\"c\" /* copy */];\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nvar set = __WEBPACK_IMPORTED_MODULE_3__vec4_js__[\"l\" /* set */];\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nvar add = __WEBPACK_IMPORTED_MODULE_3__vec4_js__[\"a\" /* add */];\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nvar mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nvar scale = __WEBPACK_IMPORTED_MODULE_3__vec4_js__[\"k\" /* scale */];\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nvar dot = __WEBPACK_IMPORTED_MODULE_3__vec4_js__[\"d\" /* dot */];\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nvar lerp = __WEBPACK_IMPORTED_MODULE_3__vec4_js__[\"i\" /* lerp */];\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nvar length = __WEBPACK_IMPORTED_MODULE_3__vec4_js__[\"h\" /* length */];\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nvar len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nvar squaredLength = __WEBPACK_IMPORTED_MODULE_3__vec4_js__[\"m\" /* squaredLength */];\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nvar sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nvar normalize = __WEBPACK_IMPORTED_MODULE_3__vec4_js__[\"j\" /* normalize */];\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nvar exactEquals = __WEBPACK_IMPORTED_MODULE_3__vec4_js__[\"f\" /* exactEquals */];\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nvar equals = __WEBPACK_IMPORTED_MODULE_3__vec4_js__[\"e\" /* equals */];\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nvar rotationTo = function () {\r\n  var tmpvec3 = __WEBPACK_IMPORTED_MODULE_2__vec3_js__[\"a\" /* create */]();\r\n  var xUnitVec3 = __WEBPACK_IMPORTED_MODULE_2__vec3_js__[\"d\" /* fromValues */](1, 0, 0);\r\n  var yUnitVec3 = __WEBPACK_IMPORTED_MODULE_2__vec3_js__[\"d\" /* fromValues */](0, 1, 0);\r\n\r\n  return function (out, a, b) {\r\n    var dot = __WEBPACK_IMPORTED_MODULE_2__vec3_js__[\"c\" /* dot */](a, b);\r\n    if (dot < -0.999999) {\r\n      __WEBPACK_IMPORTED_MODULE_2__vec3_js__[\"b\" /* cross */](tmpvec3, xUnitVec3, a);\r\n      if (__WEBPACK_IMPORTED_MODULE_2__vec3_js__[\"e\" /* len */](tmpvec3) < 0.000001) __WEBPACK_IMPORTED_MODULE_2__vec3_js__[\"b\" /* cross */](tmpvec3, yUnitVec3, a);\r\n      __WEBPACK_IMPORTED_MODULE_2__vec3_js__[\"f\" /* normalize */](tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      __WEBPACK_IMPORTED_MODULE_2__vec3_js__[\"b\" /* cross */](tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nvar sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}();\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nvar setAxes = function () {\r\n  var matr = __WEBPACK_IMPORTED_MODULE_1__mat3_js__[\"a\" /* create */]();\r\n\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = create;\n/* unused harmony export clone */\n/* unused harmony export length */\n/* harmony export (immutable) */ __webpack_exports__[\"d\"] = fromValues;\n/* unused harmony export copy */\n/* unused harmony export set */\n/* unused harmony export add */\n/* unused harmony export subtract */\n/* unused harmony export multiply */\n/* unused harmony export divide */\n/* unused harmony export ceil */\n/* unused harmony export floor */\n/* unused harmony export min */\n/* unused harmony export max */\n/* unused harmony export round */\n/* unused harmony export scale */\n/* unused harmony export scaleAndAdd */\n/* unused harmony export distance */\n/* unused harmony export squaredDistance */\n/* unused harmony export squaredLength */\n/* unused harmony export negate */\n/* unused harmony export inverse */\n/* harmony export (immutable) */ __webpack_exports__[\"f\"] = normalize;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = dot;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = cross;\n/* unused harmony export lerp */\n/* unused harmony export hermite */\n/* unused harmony export bezier */\n/* unused harmony export random */\n/* unused harmony export transformMat4 */\n/* unused harmony export transformMat3 */\n/* unused harmony export transformQuat */\n/* unused harmony export rotateX */\n/* unused harmony export rotateY */\n/* unused harmony export rotateZ */\n/* unused harmony export angle */\n/* unused harmony export str */\n/* unused harmony export exactEquals */\n/* unused harmony export equals */\n/* unused harmony export sub */\n/* unused harmony export mul */\n/* unused harmony export div */\n/* unused harmony export dist */\n/* unused harmony export sqrDist */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return len; });\n/* unused harmony export sqrLen */\n/* unused harmony export forEach */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(1);\n\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nfunction create() {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](3);\r\n  if (__WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nfunction clone(a) {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nfunction length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nfunction fromValues(x, y, z) {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nfunction set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nfunction divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nfunction ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nfunction floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nfunction min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nfunction max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nfunction round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nfunction scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nfunction scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nfunction distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nfunction squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nfunction squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nfunction negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nfunction inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nfunction normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nfunction dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nfunction cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nfunction lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nfunction hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nfunction bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nfunction random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = __WEBPACK_IMPORTED_MODULE_0__common_js__[\"RANDOM\"]() * 2.0 * Math.PI;\r\n  var z = __WEBPACK_IMPORTED_MODULE_0__common_js__[\"RANDOM\"]() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nfunction transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nfunction transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nfunction transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nfunction rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nfunction rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nfunction rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nfunction angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nfunction str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nvar sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nvar mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nvar div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nvar dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nvar sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nvar len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nvar sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nvar forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export create */\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = clone;\n/* harmony export (immutable) */ __webpack_exports__[\"g\"] = fromValues;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = copy;\n/* harmony export (immutable) */ __webpack_exports__[\"l\"] = set;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = add;\n/* unused harmony export subtract */\n/* unused harmony export multiply */\n/* unused harmony export divide */\n/* unused harmony export ceil */\n/* unused harmony export floor */\n/* unused harmony export min */\n/* unused harmony export max */\n/* unused harmony export round */\n/* harmony export (immutable) */ __webpack_exports__[\"k\"] = scale;\n/* unused harmony export scaleAndAdd */\n/* unused harmony export distance */\n/* unused harmony export squaredDistance */\n/* harmony export (immutable) */ __webpack_exports__[\"h\"] = length;\n/* harmony export (immutable) */ __webpack_exports__[\"m\"] = squaredLength;\n/* unused harmony export negate */\n/* unused harmony export inverse */\n/* harmony export (immutable) */ __webpack_exports__[\"j\"] = normalize;\n/* harmony export (immutable) */ __webpack_exports__[\"d\"] = dot;\n/* harmony export (immutable) */ __webpack_exports__[\"i\"] = lerp;\n/* unused harmony export random */\n/* unused harmony export transformMat4 */\n/* unused harmony export transformQuat */\n/* unused harmony export str */\n/* harmony export (immutable) */ __webpack_exports__[\"f\"] = exactEquals;\n/* harmony export (immutable) */ __webpack_exports__[\"e\"] = equals;\n/* unused harmony export sub */\n/* unused harmony export mul */\n/* unused harmony export div */\n/* unused harmony export dist */\n/* unused harmony export sqrDist */\n/* unused harmony export len */\n/* unused harmony export sqrLen */\n/* unused harmony export forEach */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(1);\n\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nfunction create() {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](4);\r\n  if (__WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nfunction clone(a) {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nfunction fromValues(x, y, z, w) {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nfunction set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nfunction divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nfunction ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nfunction floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nfunction min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nfunction max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nfunction round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nfunction scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nfunction scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nfunction distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nfunction squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nfunction length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nfunction squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nfunction negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nfunction inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nfunction normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nfunction dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nfunction lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nfunction random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = __WEBPACK_IMPORTED_MODULE_0__common_js__[\"RANDOM\"]() * 2 - 1;\r\n    v2 = __WEBPACK_IMPORTED_MODULE_0__common_js__[\"RANDOM\"]() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = __WEBPACK_IMPORTED_MODULE_0__common_js__[\"RANDOM\"]() * 2 - 1;\r\n    v4 = __WEBPACK_IMPORTED_MODULE_0__common_js__[\"RANDOM\"]() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nfunction transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nfunction transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nfunction str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nvar sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nvar mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nvar div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nvar dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nvar sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nvar len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nvar sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nvar forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return FillStyle; });\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = createEventedFillStyleMixin;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__color_rgba__ = __webpack_require__(19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_aggregation__ = __webpack_require__(5);\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n/**\n * @typedef {object} FillStyleOptions\n * @property {string} [fillColor=\"black\"] Fill color defined as a string\n * @property {number} [fillOpacity=1] Opacity of the fill color. This supersedes any opacity inherent in fillColor\n */\n\n/**\n * Manages the fill style of a 2d rendering context. Can be used as a mixin or base class\n * @class\n * @mixin\n */\n\nvar FillStyle =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates a new fill style object\n   * @param {FillStyleOptions} [opts]\n   * @return {FillStyle}\n   */\n  function FillStyle(opts) {\n    _classCallCheck(this, FillStyle);\n\n    // TODO(croot): support gradients and patterns\n    this.initializer(opts);\n  }\n  /**\n   * initializes the fill style object from an options object\n   * @param  {FillStyleOptions} [opts]\n   * @private\n   */\n\n\n  _createClass(FillStyle, [{\n    key: \"_initFillStyleFromOptions\",\n    value: function _initFillStyleFromOptions(opts) {\n      if (opts) {\n        if (typeof opts.fillColor !== \"undefined\") {\n          this.fillColor = opts.fillColor;\n        }\n\n        if (typeof opts.fillOpacity !== \"undefined\") {\n          this.fillOpacity = opts.fillOpacity;\n        }\n      }\n    }\n    /**\n     * Initializer method to initialize a fill style. Used for both initializing\n     * via base-class and mixin hierarchy.\n     * @param  {FillStyleOptions} [opts]\n     */\n\n  }, {\n    key: \"initializer\",\n    value: function initializer(opts) {\n      this._fillColor = new __WEBPACK_IMPORTED_MODULE_0__color_rgba__[\"b\" /* default */](\"black\");\n\n      this._initFillStyleFromOptions(opts);\n    }\n    /**\n     * Sets the fill color\n     * @param  {string} fillColor Color as a string, \"rgb()\", \"rgba()\", \"#......\", or a color keyword (i.e. \"black\")\n     * @return {FillStyle}\n     */\n\n  }, {\n    key: \"isFillVisible\",\n\n    /**\n     * Returns true if the fill style is visible, i.e. it has an opacity > 0\n     * @return {Boolean}\n     */\n    value: function isFillVisible() {\n      return this._fillColor.opacity > 0;\n    }\n    /**\n     * Returns true if the fill style is transparent in any way, i.e. opacity < 1\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isTransparent\",\n    value: function isTransparent() {\n      return this._fillColor.isTransparent();\n    }\n    /**\n     * Sets the fill style state of a 2d rendering context\n     * @param {CanvasRenderingContext2D} ctx\n     */\n\n  }, {\n    key: \"setFillCtx\",\n    value: function setFillCtx(ctx) {\n      ctx.fillStyle = this.fillColor;\n    }\n    /**\n     * Copies the properties of one fill style to another\n     * @param  {FillStyle} srcStyle FillStyle object to copy from\n     * @param  {FillStyle} dstStyle FillStyle object to copy to\n     */\n\n  }, {\n    key: \"fillColor\",\n    set: function set(fillColor) {\n      this._fillColor.value = fillColor;\n      return this;\n    }\n    /**\n     * Gets the fill color of the style\n     * @return {string}\n     */\n    ,\n    get: function get() {\n      return this._fillColor.value;\n    }\n    /**\n     * Sets the opacity of the fill style\n     * @param  {number} opacity [0,1]\n     * @return {FillStyle}\n     */\n\n  }, {\n    key: \"fillOpacity\",\n    set: function set(opacity) {\n      this._fillColor.opacity = opacity;\n      return this;\n    }\n    /**\n     * Gets the current opacity of the fill style [0,1]\n     * @return {number} Opacity in the range [0,1]\n     */\n    ,\n    get: function get() {\n      return this._fillColor.opacity;\n    }\n    /**\n     * Sets the fill color of the style defined as a 32-bit int\n     * @param  {number} packedFillColor Color value as a 32-bit int (i.e. 0xFFFFFFFF)\n     * @return {FillStyle}\n     */\n\n  }, {\n    key: \"packedFillColor\",\n    set: function set(packedFillColor) {\n      this._fillColor.packedValue = packedFillColor;\n      return this;\n    }\n    /**\n     * Gets the current value of the color of the fill style as a 32-bit int\n     * @return {number} i.e. 0xFFFFFFFF\n     */\n    ,\n    get: function get() {\n      return this._fillColor.packedValue;\n    }\n  }], [{\n    key: \"copyFillStyle\",\n    value: function copyFillStyle(srcStyle, dstStyle) {\n      if (typeof srcStyle.packedFillColor === \"undefined\") {\n        if (typeof srcStyle.fillColor !== \"undefined\") {\n          dstStyle.fillColor = srcStyle.fillColor;\n        }\n\n        if (typeof srcStyle.fillOpacity !== \"undefined\") {\n          dstStyle.fillOpacity = srcStyle.fillOpacity;\n        }\n      } else {\n        dstStyle.packedFillColor = srcStyle.packedFillColor;\n      }\n    }\n    /**\n     * Comparison operator between two FillStyle objects. This is primarily\n     * used for sorting to minimize context switching of a 2d renderer\n     * @param  {FillStyle} fillStyleA\n     * @param  {FillStyle} fillStyleB\n     * @return {number}            Returns < 0 if fillStyleA < fillStyleB, > 0 if fillStyleA > fillStyleB, or 0 if they are equal.\n     */\n\n  }, {\n    key: \"compareFillStyle\",\n    value: function compareFillStyle(fillStyleA, fillStyleB) {\n      var valA = fillStyleA.isFillVisible();\n      var valB = fillStyleB.isFillVisible();\n\n      if (valA !== valB) {\n        return valA - valB;\n      }\n\n      return fillStyleA.packedFillColor - fillStyleB.packedFillColor;\n    }\n    /**\n     * Returns a json object of a FillStyle object\n     * @param  {FillStyle} fillStyleObj\n     * @return {{fillColor: string}}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(fillStyleObj) {\n      return {\n        fillColor: fillStyleObj.fillColor\n      };\n    }\n  }]);\n\n  return FillStyle;\n}();\n/**\n * Creates a new fill style class that fires events whenever the style\n * is modified.\n * @param  {string} eventName Event type to fire when fill style is modified\n * @return {function}         New class constructor function\n */\n\n\n\nfunction createEventedFillStyleMixin(eventName) {\n  /**\n   * Evented fill color class to handle fill color modifications\n   * @type {ColorRGBA}\n   */\n  var FillColorClass = Object(__WEBPACK_IMPORTED_MODULE_0__color_rgba__[\"a\" /* createEventedColorRGBAClass */])(eventName, \"fillColor\");\n  /**\n   * @mixin New evented fill style mixin. Will fire events whenever\n   *        the fill color is modified\n   */\n\n  return Object(__WEBPACK_IMPORTED_MODULE_1__util_aggregation__[\"a\" /* default */])(null, FillStyle,\n  /*#__PURE__*/\n  function () {\n    function EventedFillStyle() {\n      _classCallCheck(this, EventedFillStyle);\n    }\n\n    _createClass(EventedFillStyle, [{\n      key: \"initializer\",\n      value: function initializer(opts) {\n        this._fillColor = new FillColorClass(\"red\", this);\n\n        this._initFillStyleFromOptions(opts);\n      }\n    }]);\n\n    return EventedFillStyle;\n  }());\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return ColorRGBA; });\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = createEventedColorRGBAClass;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math_math__ = __webpack_require__(6);\n/* eslint-disable no-magic-numbers */\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n/**\n * Color keywords as defined by the CSS color modules\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value}\n * @type {Map}\n */\n\nvar colorKeywords = new Map([[\"aliceblue\", \"#F0F8FF\"], [\"antiquewhite\", \"#FAEBD7\"], [\"aqua\", \"#00FFFF\"], [\"aquamarine\", \"#7FFFD4\"], [\"azure\", \"#F0FFFF\"], [\"beige\", \"#F5F5DC\"], [\"bisque\", \"#FFE4C4\"], [\"black\", \"#000000\"], [\"blanchedalmond\", \"#FFEBCD\"], [\"blue\", \"#0000FF\"], [\"blueviolet\", \"#8A2BE2\"], [\"brown\", \"#A52A2A\"], [\"burlywood\", \"#DEB887\"], [\"cadetblue\", \"#5F9EA0\"], [\"chartreuse\", \"#7FFF00\"], [\"chocolate\", \"#D2691E\"], [\"coral\", \"#FF7F50\"], [\"cornflowerblue\", \"#6495ED\"], [\"cornsilk\", \"#FFF8DC\"], [\"crimson\", \"#DC143C\"], [\"cyan\", \"#00FFFF\"], [\"darkblue\", \"#00008B\"], [\"darkcyan\", \"#008B8B\"], [\"darkgoldenrod\", \"#B8860B\"], [\"darkgray\", \"#A9A9A9\"], [\"darkgreen\", \"#006400\"], [\"darkkhaki\", \"#BDB76B\"], [\"darkmagenta\", \"#8B008B\"], [\"darkolivegreen\", \"#556B2F\"], [\"darkorange\", \"#FF8C00\"], [\"darkorchid\", \"#9932CC\"], [\"darkred\", \"#8B0000\"], [\"darksalmon\", \"#E9967A\"], [\"darkseagreen\", \"#8FBC8F\"], [\"darkslateblue\", \"#483D8B\"], [\"darkslategray\", \"#2F4F4F\"], [\"darkturquoise\", \"#00CED1\"], [\"darkviolet\", \"#9400D3\"], [\"deeppink\", \"#FF1493\"], [\"deepskyblue\", \"#00BFFF\"], [\"dimgray\", \"#696969\"], [\"dodgerblue\", \"#1E90FF\"], [\"firebrick\", \"#B22222\"], [\"floralwhite\", \"#FFFAF0\"], [\"forestgreen\", \"#228B22\"], [\"fuchsia\", \"#FF00FF\"], [\"gainsboro\", \"#DCDCDC\"], [\"ghostwhite\", \"#F8F8FF\"], [\"gold\", \"#FFD700\"], [\"goldenrod\", \"#DAA520\"], [\"gray\", \"#808080\"], [\"green\", \"#008000\"], [\"greenyellow\", \"#ADFF2F\"], [\"honeydew\", \"#F0FFF0\"], [\"hotpink\", \"#FF69B4\"], [\"indianred\", \"#CD5C5C\"], [\"indigo\", \"#4B0082\"], [\"ivory\", \"#FFFFF0\"], [\"khaki\", \"#F0E68C\"], [\"lavender\", \"#E6E6FA\"], [\"lavenderblush\", \"#FFF0F5\"], [\"lawngreen\", \"#7CFC00\"], [\"lemonchiffon\", \"#FFFACD\"], [\"lightblue\", \"#ADD8E6\"], [\"lightcoral\", \"#F08080\"], [\"lightcyan\", \"#E0FFFF\"], [\"lightgoldenrodyellow\", \"#FAFAD2\"], [\"lightgray\", \"#D3D3D3\"], [\"lightgreen\", \"#90EE90\"], [\"lightpink\", \"#FFB6C1\"], [\"lightsalmon\", \"#FFA07A\"], [\"lightseagreen\", \"#20B2AA\"], [\"lightskyblue\", \"#87CEFA\"], [\"lightslategray\", \"#778899\"], [\"lightsteelblue\", \"#B0C4DE\"], [\"lightyellow\", \"#FFFFE0\"], [\"lime\", \"#00FF00\"], [\"limegreen\", \"#32CD32\"], [\"linen\", \"#FAF0E6\"], [\"magenta\", \"#FF00FF\"], [\"maroon\", \"#800000\"], [\"mediumaquamarine\", \"#66CDAA\"], [\"mediumblue\", \"#0000CD\"], [\"mediumorchid\", \"#BA55D3\"], [\"mediumpurple\", \"#9370DB\"], [\"mediumseagreen\", \"#3CB371\"], [\"mediumslateblue\", \"#7B68EE\"], [\"mediumspringgreen\", \"#00FA9A\"], [\"mediumturquoise\", \"#48D1CC\"], [\"mediumvioletred\", \"#C71585\"], [\"midnightblue\", \"#191970\"], [\"mintcream\", \"#F5FFFA\"], [\"mistyrose\", \"#FFE4E1\"], [\"moccasin\", \"#FFE4B5\"], [\"navajowhite\", \"#FFDEAD\"], [\"navy\", \"#000080\"], [\"oldlace\", \"#FDF5E6\"], [\"olive\", \"#808000\"], [\"olivedrab\", \"#6B8E23\"], [\"orange\", \"#FFA500\"], [\"orangered\", \"#FF4500\"], [\"orchid\", \"#DA70D6\"], [\"palegoldenrod\", \"#EEE8AA\"], [\"palegreen\", \"#98FB98\"], [\"paleturquoise\", \"#AFEEEE\"], [\"palevioletred\", \"#DB7093\"], [\"papayawhip\", \"#FFEFD5\"], [\"peachpuff\", \"#FFDAB9\"], [\"peru\", \"#CD853F\"], [\"pink\", \"#FFC0CB\"], [\"plum\", \"#DDA0DD\"], [\"powderblue\", \"#B0E0E6\"], [\"purple\", \"#800080\"], [\"rebeccapurple\", \"#663399\"], [\"red\", \"#FF0000\"], [\"rosybrown\", \"#BC8F8F\"], [\"royalblue\", \"#4169E1\"], [\"saddlebrown\", \"#8B4513\"], [\"salmon\", \"#FA8072\"], [\"sandybrown\", \"#F4A460\"], [\"seagreen\", \"#2E8B57\"], [\"seashell\", \"#FFF5EE\"], [\"sienna\", \"#A0522D\"], [\"silver\", \"#C0C0C0\"], [\"skyblue\", \"#87CEEB\"], [\"slateblue\", \"#6A5ACD\"], [\"slategray\", \"#708090\"], [\"snow\", \"#FFFAFA\"], [\"springgreen\", \"#00FF7F\"], [\"steelblue\", \"#4682B4\"], [\"tan\", \"#D2B48C\"], [\"teal\", \"#008080\"], [\"thistle\", \"#D8BFD8\"], [\"tomato\", \"#FF6347\"], [\"turquoise\", \"#40E0D0\"], [\"violet\", \"#EE82EE\"], [\"wheat\", \"#F5DEB3\"], [\"white\", \"#FFFFFF\"], [\"whitesmoke\", \"#F5F5F5\"], [\"yellow\", \"#FFFF00\"], [\"yellowgreen\", \"#9ACD32\"]]);\n/**\n * rgb regex to handle \"rgb([0-255],[0-255],[0-255])\" color strings\n * @type {RegExp}\n */\n\nvar rgbRegex = /^rgb\\s*\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)\\s*$/i;\n/**\n * rgba regex to handle \"rgba([0-255],[0-255],[0-255],[0.0-1.0])\" color strings\n * @type {RegExp}\n */\n\nvar rgbaRegex = /^rgba\\s*\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*([0,1](?:\\.\\d*)?)\\s*\\)\\s*$/i;\n/**\n * hex regex to handle \"#[00-FF][00-FF][00-FF]\" color strings.\n * @type {RegExp}\n */\n\nvar hexRegex = /^#([0-9,a-f,A-F]{2})([0-9,a-f,A-F]{2})([0-9,a-f,A-F]{2})\\s*$/i;\n/**\n * Extracts an opacity from an rgba color packed into a 32-bit integer\n * @param  {number} packedRgbaColor\n * @return {number}                 opacity extracted in range of [0,1]\n */\n\nfunction getOpacity(packedRgbaColor) {\n  return (packedRgbaColor & 0xff) / 255.0;\n}\n/**\n * packs an opacity value [0,1] into an 8-bit integer to be packed\n * into a 32-bit int\n * @param  {number} opacity [0,1]\n * @return {number}         [0,255]\n */\n\n\nfunction packOpacity(opacity) {\n  return __WEBPACK_IMPORTED_MODULE_0__math_math__[\"a\" /* default */].floor(__WEBPACK_IMPORTED_MODULE_0__math_math__[\"a\" /* default */].clamp01(opacity) * 255);\n}\n/**\n * Given a color packed into a 32-bit integer, returns a css-style \"rgba()\" string\n * @param  {number} packedRgbaColor\n * @return {string}                 int the form \"rgba([0,255],[0,255],[0,255],[0,1])\"\n */\n\n\nfunction getRGBAString(packedRgbaColor) {\n  return \"rgba(\".concat(packedRgbaColor >>> 24, \", \").concat((packedRgbaColor & 0xff0000) >> 16, \", \").concat((packedRgbaColor & 0xff00) >> 8, \", \").concat(getOpacity(packedRgbaColor), \")\");\n}\n/**\n * Given an rgba() color string, extracts a numeric color packed into a 32-bit int\n * @param  {string} color\n * @return {number}\n */\n\n\nfunction getPackedColorRGBAFromString(color) {\n  if (typeof color !== \"string\") {\n    throw new Error(\"\".concat(color, \" is not a valid color string\"));\n  }\n\n  var packedColor = 0;\n  var match = null;\n\n  if (match = color.match(rgbRegex)) {\n    packedColor = 255; // (fully opaque)\n\n    packedColor |= __WEBPACK_IMPORTED_MODULE_0__math_math__[\"a\" /* default */].clamp(Number.parseInt(match[3], 10), 0, 255) << 8;\n    packedColor |= __WEBPACK_IMPORTED_MODULE_0__math_math__[\"a\" /* default */].clamp(Number.parseInt(match[2], 10), 0, 255) << 16;\n    packedColor |= __WEBPACK_IMPORTED_MODULE_0__math_math__[\"a\" /* default */].clamp(Number.parseInt(match[1], 10), 0, 255) << 24;\n  } else if (match = color.match(rgbaRegex)) {\n    packedColor = packOpacity(Number.parseFloat(match[4], 10));\n    packedColor |= __WEBPACK_IMPORTED_MODULE_0__math_math__[\"a\" /* default */].clamp(Number.parseInt(match[3], 10), 0, 255) << 8;\n    packedColor |= __WEBPACK_IMPORTED_MODULE_0__math_math__[\"a\" /* default */].clamp(Number.parseInt(match[2], 10), 0, 255) << 16;\n    packedColor |= __WEBPACK_IMPORTED_MODULE_0__math_math__[\"a\" /* default */].clamp(Number.parseInt(match[1], 10), 0, 255) << 24;\n  } else if (match = color.match(hexRegex)) {\n    packedColor = 255; // (fully opaque)\n\n    packedColor |= __WEBPACK_IMPORTED_MODULE_0__math_math__[\"a\" /* default */].clamp(Number.parseInt(match[3], 16), 0, 255) << 8;\n    packedColor |= __WEBPACK_IMPORTED_MODULE_0__math_math__[\"a\" /* default */].clamp(Number.parseInt(match[2], 16), 0, 255) << 16;\n    packedColor |= __WEBPACK_IMPORTED_MODULE_0__math_math__[\"a\" /* default */].clamp(Number.parseInt(match[1], 16), 0, 255) << 24;\n  } else if (colorKeywords.has(color)) {\n    match = colorKeywords.get(color).match(hexRegex);\n    packedColor = 255; // (fully opaque)\n\n    packedColor |= __WEBPACK_IMPORTED_MODULE_0__math_math__[\"a\" /* default */].clamp(Number.parseInt(match[3], 16), 0, 255) << 8;\n    packedColor |= __WEBPACK_IMPORTED_MODULE_0__math_math__[\"a\" /* default */].clamp(Number.parseInt(match[2], 16), 0, 255) << 16;\n    packedColor |= __WEBPACK_IMPORTED_MODULE_0__math_math__[\"a\" /* default */].clamp(Number.parseInt(match[1], 16), 0, 255) << 24;\n  } else {\n    throw new Error(\"\".concat(color, \" is not a valid color string\"));\n  }\n\n  return packedColor;\n}\n/** @class manages colors in the RGBA color space. Can also be used as a mixin */\n\n\nvar ColorRGBA =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates a new color in the RGBA color space\n   * @param  {string}    initColorStr color string in the form \"rgb()\", \"rgba()\", \"#......\", or a color keyword (i.e. \"red\")\n   * @param  {...object} args         Additional arguments that may be passed to other initializers/constructors\n   *                                  if this class is used as a base class or mixin\n   * @return {ColorRGBA}\n   */\n  function ColorRGBA(initColorStr) {\n    _classCallCheck(this, ColorRGBA);\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    this.initializer.apply(this, [initColorStr].concat(args));\n  }\n  /**\n   * initializes a color in the RGBA color space using a color string\n   * @param  {string} initColorStr initializer string in the form \"rgb()\", \"rgba()\", \"#......\", or color keyword\n   */\n\n\n  _createClass(ColorRGBA, [{\n    key: \"initializer\",\n    value: function initializer(initColorStr) {\n      this._color = 0;\n\n      if (initColorStr) {\n        this.value = initColorStr;\n      }\n    }\n    /**\n     * sets all the channels of the RGBA color given a color string\n     * @param  {string} color color string in the form \"rgb()\", \"rgba()\", \"#......\", or color keyword\n     * @return {ColorRGBA}\n     */\n\n  }, {\n    key: \"isTransparent\",\n\n    /**\n     * Returns true if the current opacity of the rgba color < 1\n     * @return {Boolean}\n     */\n    value: function isTransparent() {\n      return getOpacity(this._color) < 1.0;\n    }\n  }, {\n    key: \"value\",\n    set: function set(color) {\n      this._color = getPackedColorRGBAFromString(color);\n      return this;\n    }\n    /**\n     * Gets the rgba color as a color string \"rgba()\"\n     * @return {string} rgba color as a string\n     */\n    ,\n    get: function get() {\n      return getRGBAString(this._color);\n    }\n    /**\n     * Sets the value of the RGBA color packed as a 32-bit int\n     * @param  {number} packedColor\n     * @return {ColorRGBA}\n     */\n\n  }, {\n    key: \"packedValue\",\n    set: function set(packedColor) {\n      this._color = 0;\n      this._color |= packedColor;\n      return this;\n    }\n    /**\n     * Gets the current value of the RGBA color as a packed 32-bit int\n     * @return {number}\n     */\n    ,\n    get: function get() {\n      return this._color;\n    }\n    /**\n     * sets the opacity of the RGBA color (modifies alpha channel only)\n     * @param  {number} opacity [0,1]\n     * @return {ColorRGBA}\n     */\n\n  }, {\n    key: \"opacity\",\n    set: function set(opacity) {\n      if (typeof opacity !== \"number\") {\n        throw new Error(\"Opacity must be a number between 0-1\");\n      }\n\n      var currOpacity = this._color & 0xff;\n      var newOpacity = packOpacity(opacity);\n\n      if (newOpacity !== currOpacity) {\n        this._color &= 0xffffff00;\n        this._color |= newOpacity;\n      }\n\n      return this;\n    }\n    /**\n     * Gets the current opacity (alpha channel) of the RGBA color\n     * @return {number} [0,1]\n     */\n    ,\n    get: function get() {\n      return getOpacity(this._color);\n    }\n  }]);\n\n  return ColorRGBA;\n}();\n/**\n * Creates a new color RGBA class that fires events whenever the color\n * is changed externally\n * @param  {string} eventName Event type to fire when color is modified\n * @param  {string} colorName Name of the color attribute. This string is used in the event object fired\n * @return {function}         New class constructor function\n */\n\n\n\nfunction createEventedColorRGBAClass(eventName, colorName) {\n  /**\n   * @class New rgba color class that fires events when modified\n   * @extends {ColorRGBA}\n   */\n  return (\n    /*#__PURE__*/\n    function (_ColorRGBA) {\n      _inherits(EventedColorRGBA, _ColorRGBA);\n\n      function EventedColorRGBA() {\n        _classCallCheck(this, EventedColorRGBA);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(EventedColorRGBA).apply(this, arguments));\n      }\n\n      _createClass(EventedColorRGBA, [{\n        key: \"initializer\",\n\n        /**\n         * Color modification event\n         * @event EventedColor#changed\n         * @type {object}\n         * @property {string} attr Name of the attribute modified\n         * @property {} prevVal Previous value of the attribute prior to modification\n         * @property {} currVal Value of the attribute post modification\n         */\n\n        /**\n         * Initializes the evented color\n         * @param  {string} initColorStr initial color as string\n         * @param  {EventHandler} eventHandler Event handler instance used to manage the color\n         *                                     modification events\n         * @protected\n         */\n        value: function initializer(initColorStr, eventHandler) {\n          this._eventHandler = eventHandler;\n\n          _get(_getPrototypeOf(EventedColorRGBA.prototype), \"initializer\", this).call(this, initColorStr);\n        }\n        /**\n         * Validates modification of the rgba color, and if modified, fires\n         * modification events\n         * @param  {number} newPackedColor Color defined by a 32-bit int\n         * @private\n         */\n\n      }, {\n        key: \"_checkPackedColorChanged\",\n        value: function _checkPackedColorChanged(newPackedColor) {\n          if (newPackedColor !== this._color) {\n            var prev = this._color;\n            var prevOpacity = getOpacity(prev);\n            var opacity = getOpacity(newPackedColor);\n            this._color = newPackedColor;\n\n            this._eventHandler.fire(eventName, {\n              attr: colorName,\n              prevVal: getRGBAString(prev),\n              currVal: getRGBAString(this._color)\n            });\n\n            if (opacity !== prevOpacity) {\n              this._eventHandler.fire(eventName, {\n                attr: \"opacity\",\n                prevVal: prevOpacity,\n                currVal: opacity\n              });\n            }\n          }\n        }\n        /**\n         * sets all the channels of the RGBA color from a color string\n         * @param  {string} color color string in the form \"rgb()\", \"rgba()\", \"#......\", or color keyword\n         * @fires  EventedColor#changed\n         * @return {ColorRGBA}\n         */\n\n      }, {\n        key: \"value\",\n        set: function set(color) {\n          var tmpcolor = getPackedColorRGBAFromString(color);\n\n          this._checkPackedColorChanged(tmpcolor);\n\n          return this;\n        }\n        /**\n         * Gets the rgba color as a color string \"rgba()\"\n         * @return {string} rgba color as a string\n         */\n        ,\n        get: function get() {\n          return getRGBAString(this._color);\n        }\n        /**\n         * Sets the value of the RGBA color packed as a 32-bit int\n         * @param  {number} packedColor\n         * @fires  EventedColor#changed\n         * @return {ColorRGBA}\n         */\n\n      }, {\n        key: \"packedValue\",\n        set: function set(packedColor) {\n          var tmpcolor = 0;\n          tmpcolor |= packedColor;\n\n          this._checkPackedColorChanged(tmpcolor);\n\n          return this;\n        }\n        /**\n         * Gets the current value of the RGBA color as a packed 32-bit int\n         * @return {number}\n         */\n        ,\n        get: function get() {\n          return this._color;\n        }\n        /**\n         * sets the opacity of the RGBA color (modifies alpha channel only)\n         * @param  {number} opacity [0,1]\n         * @fires  EventedColor#changed\n         * @return {ColorRGBA}\n         */\n\n      }, {\n        key: \"opacity\",\n        set: function set(opacity) {\n          if (typeof opacity !== \"number\") {\n            throw new Error(\"Opacity must be a number between 0-1\");\n          }\n\n          var currOpacity = this._color & 0xff;\n          var newOpacity = packOpacity(opacity);\n\n          if (newOpacity !== currOpacity) {\n            this._color &= 0xffffff00;\n            this._color |= newOpacity;\n\n            this._eventHandler.fire(eventName, {\n              attr: \"opacity\",\n              prevVal: currOpacity / 255.0,\n              currVal: newOpacity / 255.0\n            });\n          }\n\n          return this;\n        }\n        /**\n         * Gets the current opacity (alpha channel) of the RGBA color\n         * @return {number} [0,1]\n         */\n        ,\n        get: function get() {\n          return getOpacity(this._color);\n        }\n      }]);\n\n      return EventedColorRGBA;\n    }(ColorRGBA)\n  );\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return StrokeStyle; });\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = createEventedStrokeStyleMixin;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__color_rgba__ = __webpack_require__(19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_aggregation__ = __webpack_require__(5);\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n/**\n * @typedef {object} StrokeStyleOptions\n * @property {string} [strokeColor = \"black\"]\n * @property {number} [strokeWidth = 0]\n * @property {string} [lineJoin = \"miter\"]\n * @property {string} [lineCap = \"butt\"]\n * @property {number[]} [dashPattern = []]\n * @property {number} [dashOffset = 0]\n */\n\n/**\n * validates a possible stroke width value\n * @param  {number} strokeWidth\n * @throws If validation fails\n * @private\n */\n\nfunction validateStrokeWidth(strokeWidth) {\n  if (typeof strokeWidth !== \"number\") {\n    throw new Error(\"Stroke width must be a number\");\n  }\n}\n/**\n * Enum for line join values\n * @enum {number}\n */\n\n\nvar JoinEnum = {\n  MITER: 0,\n  BEVEL: 1,\n  ROUND: 2\n};\n/**\n * line join values as strings, the enum values match the index in this string\n * @type {string[]}\n */\n\nvar lineJoinOpts = [\"miter\", \"bevel\", \"round\"];\n/**\n * validates a line join value\n * @param  {string} lineJoin Should be one of [\"miter\", \"bevel\", \"round\"]\n * @throws If validation fails\n * @return {JoinEnum}\n * @private\n */\n\nfunction validateLineJoin(lineJoin) {\n  var idx = -1;\n\n  if (typeof lineJoin !== \"string\" || (idx = lineJoinOpts.indexOf(lineJoin.toLowerCase())) < 0) {\n    throw new Error(\"Line join must be a string and must be one of [\".concat(lineJoinOpts.join(\", \"), \"]\"));\n  }\n\n  return idx;\n}\n/**\n * Enum for line cap values\n * @enum {number}\n */\n\n\nvar CapEnum = {\n  BUTT: 0,\n  SQUARE: 1,\n  ROUND: 2\n};\n/**\n * line cap values as strings, the CapEnum values match the index in this string\n * @type {string[]}\n */\n\nvar lineCapOpts = [\"butt\", \"square\", \"round\"];\n/**\n * validates a line cap value\n * @param  {string} lineCap Should be one of \"butt\", \"square\", \"round\"\n * @throws If validation fails\n * @return {CapEnum}\n * @private\n */\n\nfunction validateLineCap(lineCap) {\n  var idx = -1;\n\n  if (typeof lineCap !== \"string\" || (idx = lineCapOpts.indexOf(lineCap.toLowerCase())) < 0) {\n    throw new Error(\"Line cap must be a string and must be one of [\".concat(lineCapOpts.join(\", \"), \"]\"));\n  }\n\n  return idx;\n}\n/**\n * validates a dash pattern value\n * @param  {number[]} dashPattern\n * @throws If validation fails\n * @private\n */\n\n\nfunction validateDashPattern(dashPattern) {\n  if (!dashPattern || !Array.isArray(dashPattern) || dashPattern.length % 2 !== 0) {\n    throw new Error(\"The dash pattern must be an array with an even number of numbers (or an empty array)\");\n  }\n}\n/**\n * validates a dash offset value\n * @param  {number} dashOffset\n * @throws If validation fails\n * @private\n */\n\n\nfunction validateDashOffset(dashOffset) {\n  if (typeof dashOffset !== \"number\") {\n    throw new Error(\"The dash offset must be a number\");\n  }\n}\n/**\n * Manages the stroke style of a 2d rendering context. Can be used as a mixin or base class\n * @class\n * @mixin\n */\n\n\nvar StrokeStyle =\n/*#__PURE__*/\nfunction () {\n  function StrokeStyle(opts) {\n    _classCallCheck(this, StrokeStyle);\n\n    this.initializer(opts);\n  }\n  /**\n   * initializes the stroke style object from an options object\n   * @param  {StrokeStyleOptions} [opts]\n   * @private\n   */\n\n\n  _createClass(StrokeStyle, [{\n    key: \"_initStrokeStyleFromOptions\",\n    value: function _initStrokeStyleFromOptions(opts) {\n      if (opts) {\n        if (typeof opts.strokeColor !== \"undefined\") {\n          this.strokeColor = opts.strokeColor;\n        }\n\n        if (typeof opts.strokeOpacity !== \"undefined\") {\n          this.strokeOpacity = opts.strokeOpacity;\n        }\n\n        if (typeof opts.strokeWidth !== \"undefined\") {\n          this.strokeWidth = opts.strokeWidth;\n        }\n\n        if (typeof opts.lineMiter !== \"undefined\") {\n          this.lineJoin = opts.lineMiter;\n        }\n\n        if (typeof opts.lineCap !== \"undefined\") {\n          this.lineCap = opts.lineCap;\n        }\n\n        if (typeof opts.dashPattern !== \"undefined\") {\n          this.dashPattern = opts.dashPattern;\n        }\n\n        if (typeof opts.dashOffset !== \"undefined\") {\n          this.dashOffset = opts.dashOffset;\n        }\n      }\n    }\n    /**\n     * Initializer method to initialize a stroke style. Used for both initializing\n     * via base-class and mixin hierarchy.\n     * @param  {StrokeStyleOptions} [opts]\n     * @protected\n     */\n\n  }, {\n    key: \"initializer\",\n    value: function initializer(opts) {\n      this._strokeColor = new __WEBPACK_IMPORTED_MODULE_0__color_rgba__[\"b\" /* default */](\"black\");\n      this._strokeWidth = 0;\n      this._lineJoin = JoinEnum.MITER;\n      this._lineCap = CapEnum.BUTT;\n      this._dashPattern = [];\n      this._dashOffset = 0;\n\n      this._initStrokeStyleFromOptions(opts);\n    }\n    /**\n     * Sets the stroke color\n     * @param  {string} strokeColor Color as a string, \"rgb()\", \"rgba()\", \"#......\", or a color keyword (i.e. \"black\")\n     * @return {StrokeStyle}\n     */\n\n  }, {\n    key: \"isStrokeVisible\",\n\n    /**\n     * Returns true if the stroke style is visible, i.e. it is not fully transparent\n     * and has a width > 0\n     * @return {Boolean}\n     */\n    value: function isStrokeVisible() {\n      return this._strokeColor.opacity > 0 && this._strokeWidth > 0;\n    }\n    /**\n     * Returns true if stroke is partially transparent, i.e. opacity < 1\n     * @return {Boolean} [description]\n     */\n\n  }, {\n    key: \"isTransparent\",\n    value: function isTransparent() {\n      return this._strokeColor.isTransparent();\n    }\n    /**\n     * Sets the stroke style state of a 2d rendering context\n     * @param {CanvasRenderingContext2D} ctx\n     */\n\n  }, {\n    key: \"setStrokeCtx\",\n    value: function setStrokeCtx(ctx) {\n      ctx.strokeStyle = this.strokeColor;\n      ctx.lineWidth = this._strokeWidth;\n      ctx.lineJoin = this._lineJoin;\n      ctx.lineCap = this._lineCap;\n      ctx.setLineDash(this._dashPattern);\n      ctx.lineDashOffset = this._dashOffset;\n    }\n    /**\n     * Copies the properties of one stroke style to another\n     * @param  {StrokeStyle} srcStyle StrokeStyle object to copy from\n     * @param  {StrokeStyle} dstStyle StrokeStyle object to copy to\n     */\n\n  }, {\n    key: \"strokeColor\",\n    set: function set(strokeColor) {\n      this._strokeColor.value = strokeColor;\n      return this;\n    }\n    /**\n     * Gets the stroke color of the style\n     * @return {string}\n     */\n    ,\n    get: function get() {\n      return this._strokeColor.value;\n    }\n    /**\n     * Sets the opacity of the stroke style\n     * @param  {number} opacity [0,1]\n     * @return {StrokeStyle}\n     */\n\n  }, {\n    key: \"strokeOpacity\",\n    set: function set(opacity) {\n      this._strokeColor.opacity = opacity;\n    }\n    /**\n     * Gets the current opacity of the stroke style [0,1]\n     * @return {number} Opacity in the range [0,1]\n     */\n    ,\n    get: function get() {\n      return this._strokeColor.opacity;\n    }\n    /**\n     * Sets the stroke color of the style defined as a 32-bit int\n     * @param  {number} packedStrokeColor Color value as a 32-bit int (i.e. 0xFFFFFFFF)\n     * @return {StrokeStyle}\n     */\n\n  }, {\n    key: \"packedStrokeColor\",\n    set: function set(packedStrokeColor) {\n      this._strokeColor.packedValue = packedStrokeColor;\n    }\n    /**\n     * Gets the current value of the color of the stroke style as a 32-bit int\n     * @return {number} i.e. 0xFFFFFFFF\n     */\n    ,\n    get: function get() {\n      return this._strokeColor.packedValue;\n    }\n    /**\n     * Sets the stroke width\n     * @param  {number} strokeWidth\n     * @return {StrokeStyle}\n     */\n\n  }, {\n    key: \"strokeWidth\",\n    set: function set(strokeWidth) {\n      validateStrokeWidth(strokeWidth);\n      this._strokeWidth = strokeWidth;\n      return this;\n    }\n    /**\n     * Gets the current stroke width\n     * @return {number}\n     */\n    ,\n    get: function get() {\n      return this._strokeWidth;\n    }\n    /**\n     * Sets how lines should be joined\n     * @param  {string} lineJoin One of \"miter\", \"round\", or \"bevel\"\n     * @return {StrokeStyle}\n     */\n\n  }, {\n    key: \"lineJoin\",\n    set: function set(lineJoin) {\n      var enumVal = validateLineJoin(lineJoin);\n      this._lineJoin = enumVal;\n      return this;\n    }\n    /**\n     * Gets the current line join\n     * @return {string}\n     */\n    ,\n    get: function get() {\n      return lineJoinOpts[this._lineJoin];\n    }\n    /**\n     * Sets how lines should be capped\n     * @param  {string} lineCap One of \"butt\", \"square\", or \"round\"\n     * @return {StrokeStyle}\n     */\n\n  }, {\n    key: \"lineCap\",\n    set: function set(lineCap) {\n      var enumVal = validateLineCap(lineCap);\n      this._lineCap = enumVal;\n      return this;\n    }\n    /**\n     * Gets the current line cap of the style\n     * @return {string}\n     */\n    ,\n    get: function get() {\n      return lineCapOpts[this._lineJoin];\n    }\n    /**\n     * Sets the dash pattern of the style\n     * @param  {number[]} dashPattern A list of numbers that specifies distances to alternately\n     *                                draw a line and a gap (in screen units)\n     * @return {StrokeStyle}\n     */\n\n  }, {\n    key: \"dashPattern\",\n    set: function set(dashPattern) {\n      validateDashPattern(dashPattern);\n      this._dashPattern = dashPattern.slice();\n      return this;\n    }\n    /**\n     * Gets the current dash pattern of the style\n     * @return {number[]}\n     */\n    ,\n    get: function get() {\n      return this._dashPattern.slice();\n    }\n    /**\n     * Sets the dash offset of the style\n     * @param  {number} dashOffset\n     * @return {StrokeStyle}\n     */\n\n  }, {\n    key: \"dashOffset\",\n    set: function set(dashOffset) {\n      validateDashOffset(dashOffset);\n      this._dashOffset = dashOffset;\n      return this;\n    }\n    /**\n     * Gets the current dash offset\n     * @return {number}\n     */\n    ,\n    get: function get() {\n      return this._dashOffset;\n    }\n  }], [{\n    key: \"copyStrokeStyle\",\n    value: function copyStrokeStyle(srcStyle, dstStyle) {\n      if (typeof srcStyle.packedStrokeColor === \"undefined\") {\n        if (typeof srcStyle.strokeColor !== \"undefined\") {\n          dstStyle.strokeColor = srcStyle.strokeColor;\n        }\n\n        if (typeof srcStyle.strokeOpacity !== \"undefined\") {\n          dstStyle.strokeOpacity = srcStyle.strokeOpacity;\n        }\n      } else {\n        dstStyle.packedStrokeColor = srcStyle.packedStrokeColor;\n      }\n\n      if (typeof srcStyle.strokeWidth !== \"undefined\") {\n        dstStyle.strokeWidth = srcStyle.strokeWidth;\n      }\n\n      if (typeof srcStyle.lineJoin !== \"undefined\") {\n        dstStyle.lineJoin = srcStyle.lineJoin;\n      }\n\n      if (typeof srcStyle.lineCap !== \"undefined\") {\n        dstStyle.lineCap = srcStyle.lineCap;\n      }\n\n      if (typeof srcStyle.dashPattern !== \"undefined\") {\n        dstStyle.dashPattern = srcStyle.dashPattern;\n      }\n\n      if (typeof srcStyle.dashOffset !== \"undefined\") {\n        dstStyle.dashOffset = srcStyle.dashOffset;\n      }\n    }\n    /**\n     * Comparison operator between two StrokeStyle objects. This is primarily\n     * used for sorting to minimize context switching of a 2d renderer\n     * @param  {StrokeStyle} strokeStyleA\n     * @param  {StrokeStyle} strokeStyleB\n     * @return {number}            Returns < 0 if strokeStyleA < strokeStyleB, > 0 if strokeStyleA > strokeStyleB, or 0 if they are equal.\n     */\n\n  }, {\n    key: \"compareStrokeStyle\",\n    value: function compareStrokeStyle(strokeStyleA, strokeStyleB) {\n      var valA = strokeStyleA.isStrokeVisible();\n      var valB = strokeStyleB.isStrokeVisible();\n\n      if (valA !== valB) {\n        return valA - valB;\n      }\n\n      valA = strokeStyleA.packedStrokeColor;\n      valB = strokeStyleB.packedStrokeColor;\n\n      if (valA !== valB) {\n        return valA - valB;\n      }\n\n      valA = strokeStyleA.strokeWidth;\n      valB = strokeStyleB.strokeWidth;\n\n      if (valA !== valB) {\n        return valA - valB;\n      }\n\n      valA = strokeStyleA._lineJoin;\n      valB = strokeStyleB._lineJoin;\n\n      if (valA !== valB) {\n        return valA - valB;\n      }\n\n      valA = strokeStyleA._lineCap;\n      valB = strokeStyleB._lineCap;\n\n      if (valA !== valB) {\n        return valA - valB;\n      }\n\n      valA = strokeStyleA._dashPattern;\n      valB = strokeStyleB._dashPattern;\n\n      if (valA.length === valB.length && valA.length > 0) {\n        for (var i = 0; i < valA.length; i += 1) {\n          if (valA[i] !== valB[i]) {\n            return valA[i] - valB[i];\n          }\n        }\n\n        return strokeStyleA.dashOffset - strokeStyleB.dashOffset;\n      }\n\n      return valA.length - valB.length;\n    }\n    /**\n     * Returns a json object of a StrokeStyle object\n     * @param  {StrokeStyle} strokeStyleObj\n     * @return {{strokeColor: string,\n     *           strokeWidth: number,\n     *           lineJoin: string,\n     *           lineCap: string,\n     *           dashPattern: number[],\n     *           dashOffset: number\n     *          }}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(strokeStyleObj) {\n      return {\n        strokeColor: strokeStyleObj.strokeColor,\n        strokeWidth: strokeStyleObj.strokeWidth,\n        lineJoin: strokeStyleObj.lineJoin,\n        lineCap: strokeStyleObj.lineCap,\n        dashPattern: strokeStyleObj.dashPattern,\n        dashOffset: strokeStyleObj.dashOffset\n      };\n    }\n  }]);\n\n  return StrokeStyle;\n}();\n/**\n * Creates a new stroke style class that fires events whenever the style\n * is modified.\n * @param  {string} eventName Event type to fire when stroke style is modified\n * @return {function}         New class constructor function\n */\n\n\n\nfunction createEventedStrokeStyleMixin(eventName) {\n  /**\n   * Evented stroke color class to handle color modification events\n   * @type {ColorRGBA}\n   */\n  var StrokeColorClass = Object(__WEBPACK_IMPORTED_MODULE_0__color_rgba__[\"a\" /* createEventedColorRGBAClass */])(eventName, \"strokeColor\");\n  /**\n   * Stroke style modification event\n   * @event EventedStrokeStyle#changed\n   * @type {object}\n   * @property {string} attr Name of the attribute modified\n   * @property {} prevVal Previous value of the attribute prior to modification\n   * @property {} currVal Value of the attribute post modification\n   */\n\n  /**\n   * @mixin New evented stroke style mixin. Will fire events whenever\n   *        the stroke is modified\n   */\n\n  return Object(__WEBPACK_IMPORTED_MODULE_1__util_aggregation__[\"a\" /* default */])(null, StrokeStyle,\n  /*#__PURE__*/\n  function () {\n    function EventedStrokeStyle() {\n      _classCallCheck(this, EventedStrokeStyle);\n    }\n\n    _createClass(EventedStrokeStyle, [{\n      key: \"initializer\",\n\n      /**\n       * Initializer method to initialize an evented stroke style.\n       * @param  {StrokeStyleOptions} [opts]\n       * @protected\n       */\n      value: function initializer(opts) {\n        this._strokeColor = new StrokeColorClass(\"black\", this);\n        this._strokeWidth = 0;\n        this._lineJoin = JoinEnum.MITER;\n        this._lineCap = CapEnum.BUTT;\n        this._dashPattern = [];\n        this._dashOffset = 0;\n\n        this._initStrokeStyleFromOptions(opts);\n      }\n      /**\n       * Sets the stroke width\n       * @param  {number}\n       * @fires  EventedStrokeStyle#changed\n       * @return {EventedStrokeStyle}\n       */\n\n    }, {\n      key: \"strokeWidth\",\n      set: function set(strokeWidth) {\n        validateStrokeWidth(strokeWidth);\n\n        if (strokeWidth !== this._strokeWidth) {\n          var prev = this._strokeWidth;\n          this._strokeWidth = strokeWidth;\n          this.fire(eventName, {\n            attr: \"strokeWidth\",\n            prevVal: prev,\n            curral: this._strokeWidth\n          });\n        }\n\n        return this;\n      }\n      /**\n       * Gets the current stroke width\n       * @return {number}\n       */\n      ,\n      get: function get() {\n        return this._strokeWidth;\n      }\n      /**\n       * Sets the line join\n       * @param  {string} lineJoin\n       * @fires {EventedStrokeStyle#changed}\n       * @return {EventedStrokeStyle}\n       */\n\n    }, {\n      key: \"lineJoin\",\n      set: function set(lineJoin) {\n        var enumVal = validateLineJoin(lineJoin);\n\n        if (enumVal !== this._lineJoin) {\n          var prev = this._lineJoin;\n          this._lineJoin = enumVal;\n          this.fire(eventName, {\n            attr: \"lineJoin\",\n            prevVal: prev,\n            curral: this._lineJoin\n          });\n        }\n\n        return this;\n      }\n      /**\n       * Gets the current line join\n       * @return {string}\n       */\n      ,\n      get: function get() {\n        return lineJoinOpts[this._lineJoin];\n      }\n      /**\n       * Sets the line cap\n       * @param  {string} lineCap\n       * @fires {EventedStrokeStyle#changed}\n       * @return {EventedStrokeStyle}\n       */\n\n    }, {\n      key: \"lineCap\",\n      set: function set(lineCap) {\n        var enumVal = validateLineCap(lineCap);\n\n        if (enumVal !== this._lineCap) {\n          var prev = this._lineCap;\n          this._lineCap = enumVal;\n          this.fire(eventName, {\n            attr: \"lineCap\",\n            prevVal: prev,\n            curral: this._lineCap\n          });\n        }\n\n        return this;\n      }\n      /**\n       * Gets the line cap\n       * @return {string}\n       */\n      ,\n      get: function get() {\n        return lineCapOpts[this._lineCap];\n      }\n      /**\n       * Sets the dash pattern\n       * @param  {number[]} dashPattern\n       * @fires {EventedStrokeStyle#changed}\n       * @return {EventedStrokeStyle}\n       */\n\n    }, {\n      key: \"dashPattern\",\n      set: function set(dashPattern) {\n        validateDashPattern(dashPattern);\n        var diff = false;\n\n        if (dashPattern.length === this._dashPattern.length) {\n          for (var i = 0; i < dashPattern.length; i += 1) {\n            if (dashPattern[i] !== this._dashPattern[i]) {\n              diff = true;\n              break;\n            }\n          }\n        } else {\n          diff = true;\n        }\n\n        if (diff) {\n          var prev = this._dashPattern;\n          this._dashPattern = dashPattern.slice();\n          this.fire(eventName, {\n            attr: \"dashPattern\",\n            prevVal: prev,\n            curral: this._dashPattern.slice()\n          });\n        }\n\n        return this;\n      }\n      /**\n       * Gets the current dash pattern\n       * @return {number[]}\n       */\n      ,\n      get: function get() {\n        return this._dashPattern.slice();\n      }\n      /**\n       * Sets the current dash offset\n       * @param  {number} dashOffset\n       * @fires {EventedStrokeStyle#changed}\n       * @return {EventedStrokeStyle}\n       */\n\n    }, {\n      key: \"dashOffset\",\n      set: function set(dashOffset) {\n        validateDashOffset(dashOffset);\n\n        if (dashOffset !== this._dashOffset) {\n          var prev = this._dashOffset;\n          this._dashOffset = dashOffset;\n\n          if (this._dashPattern.length) {\n            // only fire if dashing is activated\n            this.fire(eventName, {\n              attr: \"dashOffset\",\n              prevVal: prev,\n              curral: this._dashOffset\n            });\n          }\n        }\n\n        return this;\n      }\n      /**\n       * Gets the current dash offset\n       * @return {number}\n       */\n      ,\n      get: function get() {\n        return this._dashOffset;\n      }\n    }]);\n\n    return EventedStrokeStyle;\n  }());\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdHlsZS9zdHJva2Utc3R5bGUuanM/MzNkZiJdLCJuYW1lcyI6WyJ2YWxpZGF0ZVN0cm9rZVdpZHRoIiwic3Ryb2tlV2lkdGgiLCJFcnJvciIsIkpvaW5FbnVtIiwiTUlURVIiLCJCRVZFTCIsIlJPVU5EIiwibGluZUpvaW5PcHRzIiwidmFsaWRhdGVMaW5lSm9pbiIsImxpbmVKb2luIiwiaWR4IiwiaW5kZXhPZiIsInRvTG93ZXJDYXNlIiwiam9pbiIsIkNhcEVudW0iLCJCVVRUIiwiU1FVQVJFIiwibGluZUNhcE9wdHMiLCJ2YWxpZGF0ZUxpbmVDYXAiLCJsaW5lQ2FwIiwidmFsaWRhdGVEYXNoUGF0dGVybiIsImRhc2hQYXR0ZXJuIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwidmFsaWRhdGVEYXNoT2Zmc2V0IiwiZGFzaE9mZnNldCIsIlN0cm9rZVN0eWxlIiwib3B0cyIsImluaXRpYWxpemVyIiwic3Ryb2tlQ29sb3IiLCJzdHJva2VPcGFjaXR5IiwibGluZU1pdGVyIiwiX3N0cm9rZUNvbG9yIiwiQ29sb3JSR0JBIiwiX3N0cm9rZVdpZHRoIiwiX2xpbmVKb2luIiwiX2xpbmVDYXAiLCJfZGFzaFBhdHRlcm4iLCJfZGFzaE9mZnNldCIsIl9pbml0U3Ryb2tlU3R5bGVGcm9tT3B0aW9ucyIsIm9wYWNpdHkiLCJpc1RyYW5zcGFyZW50IiwiY3R4Iiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJzZXRMaW5lRGFzaCIsImxpbmVEYXNoT2Zmc2V0IiwidmFsdWUiLCJwYWNrZWRTdHJva2VDb2xvciIsInBhY2tlZFZhbHVlIiwiZW51bVZhbCIsInNsaWNlIiwic3JjU3R5bGUiLCJkc3RTdHlsZSIsInN0cm9rZVN0eWxlQSIsInN0cm9rZVN0eWxlQiIsInZhbEEiLCJpc1N0cm9rZVZpc2libGUiLCJ2YWxCIiwiaSIsInN0cm9rZVN0eWxlT2JqIiwiY3JlYXRlRXZlbnRlZFN0cm9rZVN0eWxlTWl4aW4iLCJldmVudE5hbWUiLCJTdHJva2VDb2xvckNsYXNzIiwiY3JlYXRlRXZlbnRlZENvbG9yUkdCQUNsYXNzIiwiYWdncmVnYXRpb24iLCJwcmV2IiwiZmlyZSIsImF0dHIiLCJwcmV2VmFsIiwiY3VycmFsIiwiZGlmZiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7QUFFQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7QUFVQTs7Ozs7OztBQU1BLFNBQVNBLG1CQUFULENBQTZCQyxXQUE3QixFQUEwQztBQUN4QyxNQUFJLE9BQU9BLFdBQVAsS0FBdUIsUUFBM0IsRUFBcUM7QUFDbkMsVUFBTSxJQUFJQyxLQUFKLENBQVUsK0JBQVYsQ0FBTjtBQUNEO0FBQ0Y7QUFFRDs7Ozs7O0FBSUEsSUFBTUMsUUFBUSxHQUFHO0FBQ2ZDLE9BQUssRUFBRSxDQURRO0FBRWZDLE9BQUssRUFBRSxDQUZRO0FBR2ZDLE9BQUssRUFBRTtBQUhRLENBQWpCO0FBTUE7Ozs7O0FBSUEsSUFBTUMsWUFBWSxHQUFHLENBQUMsT0FBRCxFQUFVLE9BQVYsRUFBbUIsT0FBbkIsQ0FBckI7QUFFQTs7Ozs7Ozs7QUFPQSxTQUFTQyxnQkFBVCxDQUEwQkMsUUFBMUIsRUFBb0M7QUFDbEMsTUFBSUMsR0FBRyxHQUFHLENBQUMsQ0FBWDs7QUFDQSxNQUNFLE9BQU9ELFFBQVAsS0FBb0IsUUFBcEIsSUFDQSxDQUFDQyxHQUFHLEdBQUdILFlBQVksQ0FBQ0ksT0FBYixDQUFxQkYsUUFBUSxDQUFDRyxXQUFULEVBQXJCLENBQVAsSUFBdUQsQ0FGekQsRUFHRTtBQUNBLFVBQU0sSUFBSVYsS0FBSiwwREFDOENLLFlBQVksQ0FBQ00sSUFBYixDQUNoRCxJQURnRCxDQUQ5QyxPQUFOO0FBS0Q7O0FBQ0QsU0FBT0gsR0FBUDtBQUNEO0FBRUQ7Ozs7OztBQUlBLElBQU1JLE9BQU8sR0FBRztBQUNkQyxNQUFJLEVBQUUsQ0FEUTtBQUVkQyxRQUFNLEVBQUUsQ0FGTTtBQUdkVixPQUFLLEVBQUU7QUFITyxDQUFoQjtBQU1BOzs7OztBQUlBLElBQU1XLFdBQVcsR0FBRyxDQUFDLE1BQUQsRUFBUyxRQUFULEVBQW1CLE9BQW5CLENBQXBCO0FBRUE7Ozs7Ozs7O0FBT0EsU0FBU0MsZUFBVCxDQUF5QkMsT0FBekIsRUFBa0M7QUFDaEMsTUFBSVQsR0FBRyxHQUFHLENBQUMsQ0FBWDs7QUFDQSxNQUNFLE9BQU9TLE9BQVAsS0FBbUIsUUFBbkIsSUFDQSxDQUFDVCxHQUFHLEdBQUdPLFdBQVcsQ0FBQ04sT0FBWixDQUFvQlEsT0FBTyxDQUFDUCxXQUFSLEVBQXBCLENBQVAsSUFBcUQsQ0FGdkQsRUFHRTtBQUNBLFVBQU0sSUFBSVYsS0FBSix5REFDNkNlLFdBQVcsQ0FBQ0osSUFBWixDQUFpQixJQUFqQixDQUQ3QyxPQUFOO0FBR0Q7O0FBQ0QsU0FBT0gsR0FBUDtBQUNEO0FBRUQ7Ozs7Ozs7O0FBTUEsU0FBU1UsbUJBQVQsQ0FBNkJDLFdBQTdCLEVBQTBDO0FBQ3hDLE1BQ0UsQ0FBQ0EsV0FBRCxJQUNBLENBQUNDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixXQUFkLENBREQsSUFFQUEsV0FBVyxDQUFDRyxNQUFaLEdBQXFCLENBQXJCLEtBQTJCLENBSDdCLEVBSUU7QUFDQSxVQUFNLElBQUl0QixLQUFKLENBQ0osc0ZBREksQ0FBTjtBQUdEO0FBQ0Y7QUFFRDs7Ozs7Ozs7QUFNQSxTQUFTdUIsa0JBQVQsQ0FBNEJDLFVBQTVCLEVBQXdDO0FBQ3RDLE1BQUksT0FBT0EsVUFBUCxLQUFzQixRQUExQixFQUFvQztBQUNsQyxVQUFNLElBQUl4QixLQUFKLENBQVUsa0NBQVYsQ0FBTjtBQUNEO0FBQ0Y7QUFFRDs7Ozs7OztJQUtxQnlCLFc7OztBQUNuQix1QkFBWUMsSUFBWixFQUFrQjtBQUFBOztBQUNoQixTQUFLQyxXQUFMLENBQWlCRCxJQUFqQjtBQUNEO0FBRUQ7Ozs7Ozs7OztnREFLNEJBLEksRUFBTTtBQUNoQyxVQUFJQSxJQUFKLEVBQVU7QUFDUixZQUFJLE9BQU9BLElBQUksQ0FBQ0UsV0FBWixLQUE0QixXQUFoQyxFQUE2QztBQUMzQyxlQUFLQSxXQUFMLEdBQW1CRixJQUFJLENBQUNFLFdBQXhCO0FBQ0Q7O0FBQ0QsWUFBSSxPQUFPRixJQUFJLENBQUNHLGFBQVosS0FBOEIsV0FBbEMsRUFBK0M7QUFDN0MsZUFBS0EsYUFBTCxHQUFxQkgsSUFBSSxDQUFDRyxhQUExQjtBQUNEOztBQUNELFlBQUksT0FBT0gsSUFBSSxDQUFDM0IsV0FBWixLQUE0QixXQUFoQyxFQUE2QztBQUMzQyxlQUFLQSxXQUFMLEdBQW1CMkIsSUFBSSxDQUFDM0IsV0FBeEI7QUFDRDs7QUFDRCxZQUFJLE9BQU8yQixJQUFJLENBQUNJLFNBQVosS0FBMEIsV0FBOUIsRUFBMkM7QUFDekMsZUFBS3ZCLFFBQUwsR0FBZ0JtQixJQUFJLENBQUNJLFNBQXJCO0FBQ0Q7O0FBQ0QsWUFBSSxPQUFPSixJQUFJLENBQUNULE9BQVosS0FBd0IsV0FBNUIsRUFBeUM7QUFDdkMsZUFBS0EsT0FBTCxHQUFlUyxJQUFJLENBQUNULE9BQXBCO0FBQ0Q7O0FBQ0QsWUFBSSxPQUFPUyxJQUFJLENBQUNQLFdBQVosS0FBNEIsV0FBaEMsRUFBNkM7QUFDM0MsZUFBS0EsV0FBTCxHQUFtQk8sSUFBSSxDQUFDUCxXQUF4QjtBQUNEOztBQUNELFlBQUksT0FBT08sSUFBSSxDQUFDRixVQUFaLEtBQTJCLFdBQS9CLEVBQTRDO0FBQzFDLGVBQUtBLFVBQUwsR0FBa0JFLElBQUksQ0FBQ0YsVUFBdkI7QUFDRDtBQUNGO0FBQ0Y7QUFFRDs7Ozs7Ozs7O2dDQU1ZRSxJLEVBQU07QUFDaEIsV0FBS0ssWUFBTCxHQUFvQixJQUFJQyw0REFBSixDQUFjLE9BQWQsQ0FBcEI7QUFDQSxXQUFLQyxZQUFMLEdBQW9CLENBQXBCO0FBQ0EsV0FBS0MsU0FBTCxHQUFpQmpDLFFBQVEsQ0FBQ0MsS0FBMUI7QUFDQSxXQUFLaUMsUUFBTCxHQUFnQnZCLE9BQU8sQ0FBQ0MsSUFBeEI7QUFDQSxXQUFLdUIsWUFBTCxHQUFvQixFQUFwQjtBQUNBLFdBQUtDLFdBQUwsR0FBbUIsQ0FBbkI7O0FBQ0EsV0FBS0MsMkJBQUwsQ0FBaUNaLElBQWpDO0FBQ0Q7QUFFRDs7Ozs7Ozs7O0FBb0pBOzs7OztzQ0FLa0I7QUFDaEIsYUFBTyxLQUFLSyxZQUFMLENBQWtCUSxPQUFsQixHQUE0QixDQUE1QixJQUFpQyxLQUFLTixZQUFMLEdBQW9CLENBQTVEO0FBQ0Q7QUFFRDs7Ozs7OztvQ0FJZ0I7QUFDZCxhQUFPLEtBQUtGLFlBQUwsQ0FBa0JTLGFBQWxCLEVBQVA7QUFDRDtBQUVEOzs7Ozs7O2lDQUlhQyxHLEVBQUs7QUFDaEJBLFNBQUcsQ0FBQ0MsV0FBSixHQUFrQixLQUFLZCxXQUF2QjtBQUNBYSxTQUFHLENBQUNFLFNBQUosR0FBZ0IsS0FBS1YsWUFBckI7QUFDQVEsU0FBRyxDQUFDbEMsUUFBSixHQUFlLEtBQUsyQixTQUFwQjtBQUNBTyxTQUFHLENBQUN4QixPQUFKLEdBQWMsS0FBS2tCLFFBQW5CO0FBQ0FNLFNBQUcsQ0FBQ0csV0FBSixDQUFnQixLQUFLUixZQUFyQjtBQUNBSyxTQUFHLENBQUNJLGNBQUosR0FBcUIsS0FBS1IsV0FBMUI7QUFDRDtBQUVEOzs7Ozs7OztzQkE3S2dCVCxXLEVBQWE7QUFDM0IsV0FBS0csWUFBTCxDQUFrQmUsS0FBbEIsR0FBMEJsQixXQUExQjtBQUNBLGFBQU8sSUFBUDtBQUNEO0FBRUQ7Ozs7O3dCQUlrQjtBQUNoQixhQUFPLEtBQUtHLFlBQUwsQ0FBa0JlLEtBQXpCO0FBQ0Q7QUFFRDs7Ozs7Ozs7c0JBS2tCUCxPLEVBQVM7QUFDekIsV0FBS1IsWUFBTCxDQUFrQlEsT0FBbEIsR0FBNEJBLE9BQTVCO0FBQ0Q7QUFFRDs7Ozs7d0JBSW9CO0FBQ2xCLGFBQU8sS0FBS1IsWUFBTCxDQUFrQlEsT0FBekI7QUFDRDtBQUVEOzs7Ozs7OztzQkFLc0JRLGlCLEVBQW1CO0FBQ3ZDLFdBQUtoQixZQUFMLENBQWtCaUIsV0FBbEIsR0FBZ0NELGlCQUFoQztBQUNEO0FBRUQ7Ozs7O3dCQUl3QjtBQUN0QixhQUFPLEtBQUtoQixZQUFMLENBQWtCaUIsV0FBekI7QUFDRDtBQUVEOzs7Ozs7OztzQkFLZ0JqRCxXLEVBQWE7QUFDM0JELHlCQUFtQixDQUFDQyxXQUFELENBQW5CO0FBQ0EsV0FBS2tDLFlBQUwsR0FBb0JsQyxXQUFwQjtBQUNBLGFBQU8sSUFBUDtBQUNEO0FBRUQ7Ozs7O3dCQUlrQjtBQUNoQixhQUFPLEtBQUtrQyxZQUFaO0FBQ0Q7QUFFRDs7Ozs7Ozs7c0JBS2ExQixRLEVBQVU7QUFDckIsVUFBTTBDLE9BQU8sR0FBRzNDLGdCQUFnQixDQUFDQyxRQUFELENBQWhDO0FBQ0EsV0FBSzJCLFNBQUwsR0FBaUJlLE9BQWpCO0FBQ0EsYUFBTyxJQUFQO0FBQ0Q7QUFFRDs7Ozs7d0JBSWU7QUFDYixhQUFPNUMsWUFBWSxDQUFDLEtBQUs2QixTQUFOLENBQW5CO0FBQ0Q7QUFFRDs7Ozs7Ozs7c0JBS1lqQixPLEVBQVM7QUFDbkIsVUFBTWdDLE9BQU8sR0FBR2pDLGVBQWUsQ0FBQ0MsT0FBRCxDQUEvQjtBQUNBLFdBQUtrQixRQUFMLEdBQWdCYyxPQUFoQjtBQUNBLGFBQU8sSUFBUDtBQUNEO0FBRUQ7Ozs7O3dCQUljO0FBQ1osYUFBT2xDLFdBQVcsQ0FBQyxLQUFLbUIsU0FBTixDQUFsQjtBQUNEO0FBRUQ7Ozs7Ozs7OztzQkFNZ0JmLFcsRUFBYTtBQUMzQkQseUJBQW1CLENBQUNDLFdBQUQsQ0FBbkI7QUFDQSxXQUFLaUIsWUFBTCxHQUFvQmpCLFdBQVcsQ0FBQytCLEtBQVosRUFBcEI7QUFDQSxhQUFPLElBQVA7QUFDRDtBQUVEOzs7Ozt3QkFJa0I7QUFDaEIsYUFBTyxLQUFLZCxZQUFMLENBQWtCYyxLQUFsQixFQUFQO0FBQ0Q7QUFFRDs7Ozs7Ozs7c0JBS2UxQixVLEVBQVk7QUFDekJELHdCQUFrQixDQUFDQyxVQUFELENBQWxCO0FBQ0EsV0FBS2EsV0FBTCxHQUFtQmIsVUFBbkI7QUFDQSxhQUFPLElBQVA7QUFDRDtBQUVEOzs7Ozt3QkFJaUI7QUFDZixhQUFPLEtBQUthLFdBQVo7QUFDRDs7O29DQXFDc0JjLFEsRUFBVUMsUSxFQUFVO0FBQ3pDLFVBQUksT0FBT0QsUUFBUSxDQUFDSixpQkFBaEIsS0FBc0MsV0FBMUMsRUFBdUQ7QUFDckQsWUFBSSxPQUFPSSxRQUFRLENBQUN2QixXQUFoQixLQUFnQyxXQUFwQyxFQUFpRDtBQUMvQ3dCLGtCQUFRLENBQUN4QixXQUFULEdBQXVCdUIsUUFBUSxDQUFDdkIsV0FBaEM7QUFDRDs7QUFDRCxZQUFJLE9BQU91QixRQUFRLENBQUN0QixhQUFoQixLQUFrQyxXQUF0QyxFQUFtRDtBQUNqRHVCLGtCQUFRLENBQUN2QixhQUFULEdBQXlCc0IsUUFBUSxDQUFDdEIsYUFBbEM7QUFDRDtBQUNGLE9BUEQsTUFPTztBQUNMdUIsZ0JBQVEsQ0FBQ0wsaUJBQVQsR0FBNkJJLFFBQVEsQ0FBQ0osaUJBQXRDO0FBQ0Q7O0FBQ0QsVUFBSSxPQUFPSSxRQUFRLENBQUNwRCxXQUFoQixLQUFnQyxXQUFwQyxFQUFpRDtBQUMvQ3FELGdCQUFRLENBQUNyRCxXQUFULEdBQXVCb0QsUUFBUSxDQUFDcEQsV0FBaEM7QUFDRDs7QUFDRCxVQUFJLE9BQU9vRCxRQUFRLENBQUM1QyxRQUFoQixLQUE2QixXQUFqQyxFQUE4QztBQUM1QzZDLGdCQUFRLENBQUM3QyxRQUFULEdBQW9CNEMsUUFBUSxDQUFDNUMsUUFBN0I7QUFDRDs7QUFDRCxVQUFJLE9BQU80QyxRQUFRLENBQUNsQyxPQUFoQixLQUE0QixXQUFoQyxFQUE2QztBQUMzQ21DLGdCQUFRLENBQUNuQyxPQUFULEdBQW1Ca0MsUUFBUSxDQUFDbEMsT0FBNUI7QUFDRDs7QUFDRCxVQUFJLE9BQU9rQyxRQUFRLENBQUNoQyxXQUFoQixLQUFnQyxXQUFwQyxFQUFpRDtBQUMvQ2lDLGdCQUFRLENBQUNqQyxXQUFULEdBQXVCZ0MsUUFBUSxDQUFDaEMsV0FBaEM7QUFDRDs7QUFDRCxVQUFJLE9BQU9nQyxRQUFRLENBQUMzQixVQUFoQixLQUErQixXQUFuQyxFQUFnRDtBQUM5QzRCLGdCQUFRLENBQUM1QixVQUFULEdBQXNCMkIsUUFBUSxDQUFDM0IsVUFBL0I7QUFDRDtBQUNGO0FBRUQ7Ozs7Ozs7Ozs7dUNBTzBCNkIsWSxFQUFjQyxZLEVBQWM7QUFDcEQsVUFBSUMsSUFBSSxHQUFHRixZQUFZLENBQUNHLGVBQWIsRUFBWDtBQUNBLFVBQUlDLElBQUksR0FBR0gsWUFBWSxDQUFDRSxlQUFiLEVBQVg7O0FBQ0EsVUFBSUQsSUFBSSxLQUFLRSxJQUFiLEVBQW1CO0FBQ2pCLGVBQU9GLElBQUksR0FBR0UsSUFBZDtBQUNEOztBQUNERixVQUFJLEdBQUdGLFlBQVksQ0FBQ04saUJBQXBCO0FBQ0FVLFVBQUksR0FBR0gsWUFBWSxDQUFDUCxpQkFBcEI7O0FBQ0EsVUFBSVEsSUFBSSxLQUFLRSxJQUFiLEVBQW1CO0FBQ2pCLGVBQU9GLElBQUksR0FBR0UsSUFBZDtBQUNEOztBQUNERixVQUFJLEdBQUdGLFlBQVksQ0FBQ3RELFdBQXBCO0FBQ0EwRCxVQUFJLEdBQUdILFlBQVksQ0FBQ3ZELFdBQXBCOztBQUNBLFVBQUl3RCxJQUFJLEtBQUtFLElBQWIsRUFBbUI7QUFDakIsZUFBT0YsSUFBSSxHQUFHRSxJQUFkO0FBQ0Q7O0FBQ0RGLFVBQUksR0FBR0YsWUFBWSxDQUFDbkIsU0FBcEI7QUFDQXVCLFVBQUksR0FBR0gsWUFBWSxDQUFDcEIsU0FBcEI7O0FBQ0EsVUFBSXFCLElBQUksS0FBS0UsSUFBYixFQUFtQjtBQUNqQixlQUFPRixJQUFJLEdBQUdFLElBQWQ7QUFDRDs7QUFDREYsVUFBSSxHQUFHRixZQUFZLENBQUNsQixRQUFwQjtBQUNBc0IsVUFBSSxHQUFHSCxZQUFZLENBQUNuQixRQUFwQjs7QUFDQSxVQUFJb0IsSUFBSSxLQUFLRSxJQUFiLEVBQW1CO0FBQ2pCLGVBQU9GLElBQUksR0FBR0UsSUFBZDtBQUNEOztBQUNERixVQUFJLEdBQUdGLFlBQVksQ0FBQ2pCLFlBQXBCO0FBQ0FxQixVQUFJLEdBQUdILFlBQVksQ0FBQ2xCLFlBQXBCOztBQUNBLFVBQUltQixJQUFJLENBQUNqQyxNQUFMLEtBQWdCbUMsSUFBSSxDQUFDbkMsTUFBckIsSUFBK0JpQyxJQUFJLENBQUNqQyxNQUFMLEdBQWMsQ0FBakQsRUFBb0Q7QUFDbEQsYUFBSyxJQUFJb0MsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0gsSUFBSSxDQUFDakMsTUFBekIsRUFBaUNvQyxDQUFDLElBQUksQ0FBdEMsRUFBeUM7QUFDdkMsY0FBSUgsSUFBSSxDQUFDRyxDQUFELENBQUosS0FBWUQsSUFBSSxDQUFDQyxDQUFELENBQXBCLEVBQXlCO0FBQ3ZCLG1CQUFPSCxJQUFJLENBQUNHLENBQUQsQ0FBSixHQUFVRCxJQUFJLENBQUNDLENBQUQsQ0FBckI7QUFDRDtBQUNGOztBQUNELGVBQU9MLFlBQVksQ0FBQzdCLFVBQWIsR0FBMEI4QixZQUFZLENBQUM5QixVQUE5QztBQUNEOztBQUNELGFBQU8rQixJQUFJLENBQUNqQyxNQUFMLEdBQWNtQyxJQUFJLENBQUNuQyxNQUExQjtBQUNEO0FBRUQ7Ozs7Ozs7Ozs7Ozs7OzJCQVdjcUMsYyxFQUFnQjtBQUM1QixhQUFPO0FBQ0wvQixtQkFBVyxFQUFFK0IsY0FBYyxDQUFDL0IsV0FEdkI7QUFFTDdCLG1CQUFXLEVBQUU0RCxjQUFjLENBQUM1RCxXQUZ2QjtBQUdMUSxnQkFBUSxFQUFFb0QsY0FBYyxDQUFDcEQsUUFIcEI7QUFJTFUsZUFBTyxFQUFFMEMsY0FBYyxDQUFDMUMsT0FKbkI7QUFLTEUsbUJBQVcsRUFBRXdDLGNBQWMsQ0FBQ3hDLFdBTHZCO0FBTUxLLGtCQUFVLEVBQUVtQyxjQUFjLENBQUNuQztBQU50QixPQUFQO0FBUUQ7Ozs7O0FBR0g7Ozs7Ozs7OztBQU1PLFNBQVNvQyw2QkFBVCxDQUF1Q0MsU0FBdkMsRUFBa0Q7QUFDdkQ7Ozs7QUFJQSxNQUFNQyxnQkFBZ0IsR0FBR0Msd0ZBQTJCLENBQUNGLFNBQUQsRUFBWSxhQUFaLENBQXBEO0FBRUE7Ozs7Ozs7OztBQVNBOzs7OztBQUlBLFNBQU9HLDBFQUFXLENBQ2hCLElBRGdCLEVBRWhCdkMsV0FGZ0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBSWQ7Ozs7O0FBSmMsa0NBU0ZDLElBVEUsRUFTSTtBQUNoQixhQUFLSyxZQUFMLEdBQW9CLElBQUkrQixnQkFBSixDQUFxQixPQUFyQixFQUE4QixJQUE5QixDQUFwQjtBQUNBLGFBQUs3QixZQUFMLEdBQW9CLENBQXBCO0FBQ0EsYUFBS0MsU0FBTCxHQUFpQmpDLFFBQVEsQ0FBQ0MsS0FBMUI7QUFDQSxhQUFLaUMsUUFBTCxHQUFnQnZCLE9BQU8sQ0FBQ0MsSUFBeEI7QUFDQSxhQUFLdUIsWUFBTCxHQUFvQixFQUFwQjtBQUNBLGFBQUtDLFdBQUwsR0FBbUIsQ0FBbkI7O0FBQ0EsYUFBS0MsMkJBQUwsQ0FBaUNaLElBQWpDO0FBQ0Q7QUFFRDs7Ozs7OztBQW5CYztBQUFBO0FBQUEsd0JBeUJFM0IsV0F6QkYsRUF5QmU7QUFDM0JELDJCQUFtQixDQUFDQyxXQUFELENBQW5COztBQUNBLFlBQUlBLFdBQVcsS0FBSyxLQUFLa0MsWUFBekIsRUFBdUM7QUFDckMsY0FBTWdDLElBQUksR0FBRyxLQUFLaEMsWUFBbEI7QUFDQSxlQUFLQSxZQUFMLEdBQW9CbEMsV0FBcEI7QUFDQSxlQUFLbUUsSUFBTCxDQUFVTCxTQUFWLEVBQXFCO0FBQ25CTSxnQkFBSSxFQUFFLGFBRGE7QUFFbkJDLG1CQUFPLEVBQUVILElBRlU7QUFHbkJJLGtCQUFNLEVBQUUsS0FBS3BDO0FBSE0sV0FBckI7QUFLRDs7QUFFRCxlQUFPLElBQVA7QUFDRDtBQUVEOzs7O0FBeENjO0FBQUEsMEJBNENJO0FBQ2hCLGVBQU8sS0FBS0EsWUFBWjtBQUNEO0FBRUQ7Ozs7Ozs7QUFoRGM7QUFBQTtBQUFBLHdCQXNERDFCLFFBdERDLEVBc0RTO0FBQ3JCLFlBQU0wQyxPQUFPLEdBQUczQyxnQkFBZ0IsQ0FBQ0MsUUFBRCxDQUFoQzs7QUFFQSxZQUFJMEMsT0FBTyxLQUFLLEtBQUtmLFNBQXJCLEVBQWdDO0FBQzlCLGNBQU0rQixJQUFJLEdBQUcsS0FBSy9CLFNBQWxCO0FBQ0EsZUFBS0EsU0FBTCxHQUFpQmUsT0FBakI7QUFDQSxlQUFLaUIsSUFBTCxDQUFVTCxTQUFWLEVBQXFCO0FBQ25CTSxnQkFBSSxFQUFFLFVBRGE7QUFFbkJDLG1CQUFPLEVBQUVILElBRlU7QUFHbkJJLGtCQUFNLEVBQUUsS0FBS25DO0FBSE0sV0FBckI7QUFLRDs7QUFFRCxlQUFPLElBQVA7QUFDRDtBQUVEOzs7O0FBdEVjO0FBQUEsMEJBMEVDO0FBQ2IsZUFBTzdCLFlBQVksQ0FBQyxLQUFLNkIsU0FBTixDQUFuQjtBQUNEO0FBRUQ7Ozs7Ozs7QUE5RWM7QUFBQTtBQUFBLHdCQW9GRmpCLE9BcEZFLEVBb0ZPO0FBQ25CLFlBQU1nQyxPQUFPLEdBQUdqQyxlQUFlLENBQUNDLE9BQUQsQ0FBL0I7O0FBQ0EsWUFBSWdDLE9BQU8sS0FBSyxLQUFLZCxRQUFyQixFQUErQjtBQUM3QixjQUFNOEIsSUFBSSxHQUFHLEtBQUs5QixRQUFsQjtBQUNBLGVBQUtBLFFBQUwsR0FBZ0JjLE9BQWhCO0FBQ0EsZUFBS2lCLElBQUwsQ0FBVUwsU0FBVixFQUFxQjtBQUNuQk0sZ0JBQUksRUFBRSxTQURhO0FBRW5CQyxtQkFBTyxFQUFFSCxJQUZVO0FBR25CSSxrQkFBTSxFQUFFLEtBQUtsQztBQUhNLFdBQXJCO0FBS0Q7O0FBQ0QsZUFBTyxJQUFQO0FBQ0Q7QUFFRDs7OztBQWxHYztBQUFBLDBCQXNHQTtBQUNaLGVBQU9wQixXQUFXLENBQUMsS0FBS29CLFFBQU4sQ0FBbEI7QUFDRDtBQUVEOzs7Ozs7O0FBMUdjO0FBQUE7QUFBQSx3QkFnSEVoQixXQWhIRixFQWdIZTtBQUMzQkQsMkJBQW1CLENBQUNDLFdBQUQsQ0FBbkI7QUFDQSxZQUFJbUQsSUFBSSxHQUFHLEtBQVg7O0FBQ0EsWUFBSW5ELFdBQVcsQ0FBQ0csTUFBWixLQUF1QixLQUFLYyxZQUFMLENBQWtCZCxNQUE3QyxFQUFxRDtBQUNuRCxlQUFLLElBQUlvQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHdkMsV0FBVyxDQUFDRyxNQUFoQyxFQUF3Q29DLENBQUMsSUFBSSxDQUE3QyxFQUFnRDtBQUM5QyxnQkFBSXZDLFdBQVcsQ0FBQ3VDLENBQUQsQ0FBWCxLQUFtQixLQUFLdEIsWUFBTCxDQUFrQnNCLENBQWxCLENBQXZCLEVBQTZDO0FBQzNDWSxrQkFBSSxHQUFHLElBQVA7QUFDQTtBQUNEO0FBQ0Y7QUFDRixTQVBELE1BT087QUFDTEEsY0FBSSxHQUFHLElBQVA7QUFDRDs7QUFFRCxZQUFJQSxJQUFKLEVBQVU7QUFDUixjQUFNTCxJQUFJLEdBQUcsS0FBSzdCLFlBQWxCO0FBQ0EsZUFBS0EsWUFBTCxHQUFvQmpCLFdBQVcsQ0FBQytCLEtBQVosRUFBcEI7QUFDQSxlQUFLZ0IsSUFBTCxDQUFVTCxTQUFWLEVBQXFCO0FBQ25CTSxnQkFBSSxFQUFFLGFBRGE7QUFFbkJDLG1CQUFPLEVBQUVILElBRlU7QUFHbkJJLGtCQUFNLEVBQUUsS0FBS2pDLFlBQUwsQ0FBa0JjLEtBQWxCO0FBSFcsV0FBckI7QUFLRDs7QUFDRCxlQUFPLElBQVA7QUFDRDtBQUVEOzs7O0FBMUljO0FBQUEsMEJBOElJO0FBQ2hCLGVBQU8sS0FBS2QsWUFBTCxDQUFrQmMsS0FBbEIsRUFBUDtBQUNEO0FBRUQ7Ozs7Ozs7QUFsSmM7QUFBQTtBQUFBLHdCQXdKQzFCLFVBeEpELEVBd0phO0FBQ3pCRCwwQkFBa0IsQ0FBQ0MsVUFBRCxDQUFsQjs7QUFFQSxZQUFJQSxVQUFVLEtBQUssS0FBS2EsV0FBeEIsRUFBcUM7QUFDbkMsY0FBTTRCLElBQUksR0FBRyxLQUFLNUIsV0FBbEI7QUFDQSxlQUFLQSxXQUFMLEdBQW1CYixVQUFuQjs7QUFFQSxjQUFJLEtBQUtZLFlBQUwsQ0FBa0JkLE1BQXRCLEVBQThCO0FBQzVCO0FBQ0EsaUJBQUs0QyxJQUFMLENBQVVMLFNBQVYsRUFBcUI7QUFDbkJNLGtCQUFJLEVBQUUsWUFEYTtBQUVuQkMscUJBQU8sRUFBRUgsSUFGVTtBQUduQkksb0JBQU0sRUFBRSxLQUFLaEM7QUFITSxhQUFyQjtBQUtEO0FBQ0Y7O0FBQ0QsZUFBTyxJQUFQO0FBQ0Q7QUFFRDs7OztBQTNLYztBQUFBLDBCQStLRztBQUNmLGVBQU8sS0FBS0EsV0FBWjtBQUNEO0FBakxhOztBQUFBO0FBQUEsTUFBbEI7QUFvTEQiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuXG5pbXBvcnQgQ29sb3JSR0JBLCB7IGNyZWF0ZUV2ZW50ZWRDb2xvclJHQkFDbGFzcyB9IGZyb20gXCIuL2NvbG9yLXJnYmFcIlxuaW1wb3J0IGFnZ3JlZ2F0aW9uIGZyb20gXCIuLi91dGlsL2FnZ3JlZ2F0aW9uXCJcblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBTdHJva2VTdHlsZU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc3Ryb2tlQ29sb3IgPSBcImJsYWNrXCJdXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3N0cm9rZVdpZHRoID0gMF1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbGluZUpvaW4gPSBcIm1pdGVyXCJdXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2xpbmVDYXAgPSBcImJ1dHRcIl1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyW119IFtkYXNoUGF0dGVybiA9IFtdXVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtkYXNoT2Zmc2V0ID0gMF1cbiAqL1xuXG4vKipcbiAqIHZhbGlkYXRlcyBhIHBvc3NpYmxlIHN0cm9rZSB3aWR0aCB2YWx1ZVxuICogQHBhcmFtICB7bnVtYmVyfSBzdHJva2VXaWR0aFxuICogQHRocm93cyBJZiB2YWxpZGF0aW9uIGZhaWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVN0cm9rZVdpZHRoKHN0cm9rZVdpZHRoKSB7XG4gIGlmICh0eXBlb2Ygc3Ryb2tlV2lkdGggIT09IFwibnVtYmVyXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJva2Ugd2lkdGggbXVzdCBiZSBhIG51bWJlclwiKVxuICB9XG59XG5cbi8qKlxuICogRW51bSBmb3IgbGluZSBqb2luIHZhbHVlc1xuICogQGVudW0ge251bWJlcn1cbiAqL1xuY29uc3QgSm9pbkVudW0gPSB7XG4gIE1JVEVSOiAwLFxuICBCRVZFTDogMSxcbiAgUk9VTkQ6IDJcbn1cblxuLyoqXG4gKiBsaW5lIGpvaW4gdmFsdWVzIGFzIHN0cmluZ3MsIHRoZSBlbnVtIHZhbHVlcyBtYXRjaCB0aGUgaW5kZXggaW4gdGhpcyBzdHJpbmdcbiAqIEB0eXBlIHtzdHJpbmdbXX1cbiAqL1xuY29uc3QgbGluZUpvaW5PcHRzID0gW1wibWl0ZXJcIiwgXCJiZXZlbFwiLCBcInJvdW5kXCJdXG5cbi8qKlxuICogdmFsaWRhdGVzIGEgbGluZSBqb2luIHZhbHVlXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGxpbmVKb2luIFNob3VsZCBiZSBvbmUgb2YgW1wibWl0ZXJcIiwgXCJiZXZlbFwiLCBcInJvdW5kXCJdXG4gKiBAdGhyb3dzIElmIHZhbGlkYXRpb24gZmFpbHNcbiAqIEByZXR1cm4ge0pvaW5FbnVtfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVMaW5lSm9pbihsaW5lSm9pbikge1xuICBsZXQgaWR4ID0gLTFcbiAgaWYgKFxuICAgIHR5cGVvZiBsaW5lSm9pbiAhPT0gXCJzdHJpbmdcIiB8fFxuICAgIChpZHggPSBsaW5lSm9pbk9wdHMuaW5kZXhPZihsaW5lSm9pbi50b0xvd2VyQ2FzZSgpKSkgPCAwXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBMaW5lIGpvaW4gbXVzdCBiZSBhIHN0cmluZyBhbmQgbXVzdCBiZSBvbmUgb2YgWyR7bGluZUpvaW5PcHRzLmpvaW4oXG4gICAgICAgIFwiLCBcIlxuICAgICAgKX1dYFxuICAgIClcbiAgfVxuICByZXR1cm4gaWR4XG59XG5cbi8qKlxuICogRW51bSBmb3IgbGluZSBjYXAgdmFsdWVzXG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5jb25zdCBDYXBFbnVtID0ge1xuICBCVVRUOiAwLFxuICBTUVVBUkU6IDEsXG4gIFJPVU5EOiAyXG59XG5cbi8qKlxuICogbGluZSBjYXAgdmFsdWVzIGFzIHN0cmluZ3MsIHRoZSBDYXBFbnVtIHZhbHVlcyBtYXRjaCB0aGUgaW5kZXggaW4gdGhpcyBzdHJpbmdcbiAqIEB0eXBlIHtzdHJpbmdbXX1cbiAqL1xuY29uc3QgbGluZUNhcE9wdHMgPSBbXCJidXR0XCIsIFwic3F1YXJlXCIsIFwicm91bmRcIl1cblxuLyoqXG4gKiB2YWxpZGF0ZXMgYSBsaW5lIGNhcCB2YWx1ZVxuICogQHBhcmFtICB7c3RyaW5nfSBsaW5lQ2FwIFNob3VsZCBiZSBvbmUgb2YgXCJidXR0XCIsIFwic3F1YXJlXCIsIFwicm91bmRcIlxuICogQHRocm93cyBJZiB2YWxpZGF0aW9uIGZhaWxzXG4gKiBAcmV0dXJuIHtDYXBFbnVtfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVMaW5lQ2FwKGxpbmVDYXApIHtcbiAgbGV0IGlkeCA9IC0xXG4gIGlmIChcbiAgICB0eXBlb2YgbGluZUNhcCAhPT0gXCJzdHJpbmdcIiB8fFxuICAgIChpZHggPSBsaW5lQ2FwT3B0cy5pbmRleE9mKGxpbmVDYXAudG9Mb3dlckNhc2UoKSkpIDwgMFxuICApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgTGluZSBjYXAgbXVzdCBiZSBhIHN0cmluZyBhbmQgbXVzdCBiZSBvbmUgb2YgWyR7bGluZUNhcE9wdHMuam9pbihcIiwgXCIpfV1gXG4gICAgKVxuICB9XG4gIHJldHVybiBpZHhcbn1cblxuLyoqXG4gKiB2YWxpZGF0ZXMgYSBkYXNoIHBhdHRlcm4gdmFsdWVcbiAqIEBwYXJhbSAge251bWJlcltdfSBkYXNoUGF0dGVyblxuICogQHRocm93cyBJZiB2YWxpZGF0aW9uIGZhaWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZURhc2hQYXR0ZXJuKGRhc2hQYXR0ZXJuKSB7XG4gIGlmIChcbiAgICAhZGFzaFBhdHRlcm4gfHxcbiAgICAhQXJyYXkuaXNBcnJheShkYXNoUGF0dGVybikgfHxcbiAgICBkYXNoUGF0dGVybi5sZW5ndGggJSAyICE9PSAwXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiVGhlIGRhc2ggcGF0dGVybiBtdXN0IGJlIGFuIGFycmF5IHdpdGggYW4gZXZlbiBudW1iZXIgb2YgbnVtYmVycyAob3IgYW4gZW1wdHkgYXJyYXkpXCJcbiAgICApXG4gIH1cbn1cblxuLyoqXG4gKiB2YWxpZGF0ZXMgYSBkYXNoIG9mZnNldCB2YWx1ZVxuICogQHBhcmFtICB7bnVtYmVyfSBkYXNoT2Zmc2V0XG4gKiBAdGhyb3dzIElmIHZhbGlkYXRpb24gZmFpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlRGFzaE9mZnNldChkYXNoT2Zmc2V0KSB7XG4gIGlmICh0eXBlb2YgZGFzaE9mZnNldCAhPT0gXCJudW1iZXJcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBkYXNoIG9mZnNldCBtdXN0IGJlIGEgbnVtYmVyXCIpXG4gIH1cbn1cblxuLyoqXG4gKiBNYW5hZ2VzIHRoZSBzdHJva2Ugc3R5bGUgb2YgYSAyZCByZW5kZXJpbmcgY29udGV4dC4gQ2FuIGJlIHVzZWQgYXMgYSBtaXhpbiBvciBiYXNlIGNsYXNzXG4gKiBAY2xhc3NcbiAqIEBtaXhpblxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdHJva2VTdHlsZSB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICB0aGlzLmluaXRpYWxpemVyKG9wdHMpXG4gIH1cblxuICAvKipcbiAgICogaW5pdGlhbGl6ZXMgdGhlIHN0cm9rZSBzdHlsZSBvYmplY3QgZnJvbSBhbiBvcHRpb25zIG9iamVjdFxuICAgKiBAcGFyYW0gIHtTdHJva2VTdHlsZU9wdGlvbnN9IFtvcHRzXVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXRTdHJva2VTdHlsZUZyb21PcHRpb25zKG9wdHMpIHtcbiAgICBpZiAob3B0cykge1xuICAgICAgaWYgKHR5cGVvZiBvcHRzLnN0cm9rZUNvbG9yICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRoaXMuc3Ryb2tlQ29sb3IgPSBvcHRzLnN0cm9rZUNvbG9yXG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG9wdHMuc3Ryb2tlT3BhY2l0eSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB0aGlzLnN0cm9rZU9wYWNpdHkgPSBvcHRzLnN0cm9rZU9wYWNpdHlcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygb3B0cy5zdHJva2VXaWR0aCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB0aGlzLnN0cm9rZVdpZHRoID0gb3B0cy5zdHJva2VXaWR0aFxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBvcHRzLmxpbmVNaXRlciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB0aGlzLmxpbmVKb2luID0gb3B0cy5saW5lTWl0ZXJcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygb3B0cy5saW5lQ2FwICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRoaXMubGluZUNhcCA9IG9wdHMubGluZUNhcFxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBvcHRzLmRhc2hQYXR0ZXJuICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRoaXMuZGFzaFBhdHRlcm4gPSBvcHRzLmRhc2hQYXR0ZXJuXG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG9wdHMuZGFzaE9mZnNldCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB0aGlzLmRhc2hPZmZzZXQgPSBvcHRzLmRhc2hPZmZzZXRcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXIgbWV0aG9kIHRvIGluaXRpYWxpemUgYSBzdHJva2Ugc3R5bGUuIFVzZWQgZm9yIGJvdGggaW5pdGlhbGl6aW5nXG4gICAqIHZpYSBiYXNlLWNsYXNzIGFuZCBtaXhpbiBoaWVyYXJjaHkuXG4gICAqIEBwYXJhbSAge1N0cm9rZVN0eWxlT3B0aW9uc30gW29wdHNdXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGluaXRpYWxpemVyKG9wdHMpIHtcbiAgICB0aGlzLl9zdHJva2VDb2xvciA9IG5ldyBDb2xvclJHQkEoXCJibGFja1wiKVxuICAgIHRoaXMuX3N0cm9rZVdpZHRoID0gMFxuICAgIHRoaXMuX2xpbmVKb2luID0gSm9pbkVudW0uTUlURVJcbiAgICB0aGlzLl9saW5lQ2FwID0gQ2FwRW51bS5CVVRUXG4gICAgdGhpcy5fZGFzaFBhdHRlcm4gPSBbXVxuICAgIHRoaXMuX2Rhc2hPZmZzZXQgPSAwXG4gICAgdGhpcy5faW5pdFN0cm9rZVN0eWxlRnJvbU9wdGlvbnMob3B0cylcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzdHJva2UgY29sb3JcbiAgICogQHBhcmFtICB7c3RyaW5nfSBzdHJva2VDb2xvciBDb2xvciBhcyBhIHN0cmluZywgXCJyZ2IoKVwiLCBcInJnYmEoKVwiLCBcIiMuLi4uLi5cIiwgb3IgYSBjb2xvciBrZXl3b3JkIChpLmUuIFwiYmxhY2tcIilcbiAgICogQHJldHVybiB7U3Ryb2tlU3R5bGV9XG4gICAqL1xuICBzZXQgc3Ryb2tlQ29sb3Ioc3Ryb2tlQ29sb3IpIHtcbiAgICB0aGlzLl9zdHJva2VDb2xvci52YWx1ZSA9IHN0cm9rZUNvbG9yXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzdHJva2UgY29sb3Igb2YgdGhlIHN0eWxlXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldCBzdHJva2VDb2xvcigpIHtcbiAgICByZXR1cm4gdGhpcy5fc3Ryb2tlQ29sb3IudmFsdWVcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBvcGFjaXR5IG9mIHRoZSBzdHJva2Ugc3R5bGVcbiAgICogQHBhcmFtICB7bnVtYmVyfSBvcGFjaXR5IFswLDFdXG4gICAqIEByZXR1cm4ge1N0cm9rZVN0eWxlfVxuICAgKi9cbiAgc2V0IHN0cm9rZU9wYWNpdHkob3BhY2l0eSkge1xuICAgIHRoaXMuX3N0cm9rZUNvbG9yLm9wYWNpdHkgPSBvcGFjaXR5XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgY3VycmVudCBvcGFjaXR5IG9mIHRoZSBzdHJva2Ugc3R5bGUgWzAsMV1cbiAgICogQHJldHVybiB7bnVtYmVyfSBPcGFjaXR5IGluIHRoZSByYW5nZSBbMCwxXVxuICAgKi9cbiAgZ2V0IHN0cm9rZU9wYWNpdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cm9rZUNvbG9yLm9wYWNpdHlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzdHJva2UgY29sb3Igb2YgdGhlIHN0eWxlIGRlZmluZWQgYXMgYSAzMi1iaXQgaW50XG4gICAqIEBwYXJhbSAge251bWJlcn0gcGFja2VkU3Ryb2tlQ29sb3IgQ29sb3IgdmFsdWUgYXMgYSAzMi1iaXQgaW50IChpLmUuIDB4RkZGRkZGRkYpXG4gICAqIEByZXR1cm4ge1N0cm9rZVN0eWxlfVxuICAgKi9cbiAgc2V0IHBhY2tlZFN0cm9rZUNvbG9yKHBhY2tlZFN0cm9rZUNvbG9yKSB7XG4gICAgdGhpcy5fc3Ryb2tlQ29sb3IucGFja2VkVmFsdWUgPSBwYWNrZWRTdHJva2VDb2xvclxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGNvbG9yIG9mIHRoZSBzdHJva2Ugc3R5bGUgYXMgYSAzMi1iaXQgaW50XG4gICAqIEByZXR1cm4ge251bWJlcn0gaS5lLiAweEZGRkZGRkZGXG4gICAqL1xuICBnZXQgcGFja2VkU3Ryb2tlQ29sb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cm9rZUNvbG9yLnBhY2tlZFZhbHVlXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgc3Ryb2tlIHdpZHRoXG4gICAqIEBwYXJhbSAge251bWJlcn0gc3Ryb2tlV2lkdGhcbiAgICogQHJldHVybiB7U3Ryb2tlU3R5bGV9XG4gICAqL1xuICBzZXQgc3Ryb2tlV2lkdGgoc3Ryb2tlV2lkdGgpIHtcbiAgICB2YWxpZGF0ZVN0cm9rZVdpZHRoKHN0cm9rZVdpZHRoKVxuICAgIHRoaXMuX3N0cm9rZVdpZHRoID0gc3Ryb2tlV2lkdGhcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGN1cnJlbnQgc3Ryb2tlIHdpZHRoXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldCBzdHJva2VXaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3Ryb2tlV2lkdGhcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGhvdyBsaW5lcyBzaG91bGQgYmUgam9pbmVkXG4gICAqIEBwYXJhbSAge3N0cmluZ30gbGluZUpvaW4gT25lIG9mIFwibWl0ZXJcIiwgXCJyb3VuZFwiLCBvciBcImJldmVsXCJcbiAgICogQHJldHVybiB7U3Ryb2tlU3R5bGV9XG4gICAqL1xuICBzZXQgbGluZUpvaW4obGluZUpvaW4pIHtcbiAgICBjb25zdCBlbnVtVmFsID0gdmFsaWRhdGVMaW5lSm9pbihsaW5lSm9pbilcbiAgICB0aGlzLl9saW5lSm9pbiA9IGVudW1WYWxcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGN1cnJlbnQgbGluZSBqb2luXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldCBsaW5lSm9pbigpIHtcbiAgICByZXR1cm4gbGluZUpvaW5PcHRzW3RoaXMuX2xpbmVKb2luXVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgaG93IGxpbmVzIHNob3VsZCBiZSBjYXBwZWRcbiAgICogQHBhcmFtICB7c3RyaW5nfSBsaW5lQ2FwIE9uZSBvZiBcImJ1dHRcIiwgXCJzcXVhcmVcIiwgb3IgXCJyb3VuZFwiXG4gICAqIEByZXR1cm4ge1N0cm9rZVN0eWxlfVxuICAgKi9cbiAgc2V0IGxpbmVDYXAobGluZUNhcCkge1xuICAgIGNvbnN0IGVudW1WYWwgPSB2YWxpZGF0ZUxpbmVDYXAobGluZUNhcClcbiAgICB0aGlzLl9saW5lQ2FwID0gZW51bVZhbFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgY3VycmVudCBsaW5lIGNhcCBvZiB0aGUgc3R5bGVcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IGxpbmVDYXAoKSB7XG4gICAgcmV0dXJuIGxpbmVDYXBPcHRzW3RoaXMuX2xpbmVKb2luXVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGRhc2ggcGF0dGVybiBvZiB0aGUgc3R5bGVcbiAgICogQHBhcmFtICB7bnVtYmVyW119IGRhc2hQYXR0ZXJuIEEgbGlzdCBvZiBudW1iZXJzIHRoYXQgc3BlY2lmaWVzIGRpc3RhbmNlcyB0byBhbHRlcm5hdGVseVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhdyBhIGxpbmUgYW5kIGEgZ2FwIChpbiBzY3JlZW4gdW5pdHMpXG4gICAqIEByZXR1cm4ge1N0cm9rZVN0eWxlfVxuICAgKi9cbiAgc2V0IGRhc2hQYXR0ZXJuKGRhc2hQYXR0ZXJuKSB7XG4gICAgdmFsaWRhdGVEYXNoUGF0dGVybihkYXNoUGF0dGVybilcbiAgICB0aGlzLl9kYXNoUGF0dGVybiA9IGRhc2hQYXR0ZXJuLnNsaWNlKClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGN1cnJlbnQgZGFzaCBwYXR0ZXJuIG9mIHRoZSBzdHlsZVxuICAgKiBAcmV0dXJuIHtudW1iZXJbXX1cbiAgICovXG4gIGdldCBkYXNoUGF0dGVybigpIHtcbiAgICByZXR1cm4gdGhpcy5fZGFzaFBhdHRlcm4uc2xpY2UoKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGRhc2ggb2Zmc2V0IG9mIHRoZSBzdHlsZVxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IGRhc2hPZmZzZXRcbiAgICogQHJldHVybiB7U3Ryb2tlU3R5bGV9XG4gICAqL1xuICBzZXQgZGFzaE9mZnNldChkYXNoT2Zmc2V0KSB7XG4gICAgdmFsaWRhdGVEYXNoT2Zmc2V0KGRhc2hPZmZzZXQpXG4gICAgdGhpcy5fZGFzaE9mZnNldCA9IGRhc2hPZmZzZXRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGN1cnJlbnQgZGFzaCBvZmZzZXRcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGRhc2hPZmZzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Rhc2hPZmZzZXRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHN0cm9rZSBzdHlsZSBpcyB2aXNpYmxlLCBpLmUuIGl0IGlzIG5vdCBmdWxseSB0cmFuc3BhcmVudFxuICAgKiBhbmQgaGFzIGEgd2lkdGggPiAwXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBpc1N0cm9rZVZpc2libGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cm9rZUNvbG9yLm9wYWNpdHkgPiAwICYmIHRoaXMuX3N0cm9rZVdpZHRoID4gMFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBzdHJva2UgaXMgcGFydGlhbGx5IHRyYW5zcGFyZW50LCBpLmUuIG9wYWNpdHkgPCAxXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGlzVHJhbnNwYXJlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cm9rZUNvbG9yLmlzVHJhbnNwYXJlbnQoKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHN0cm9rZSBzdHlsZSBzdGF0ZSBvZiBhIDJkIHJlbmRlcmluZyBjb250ZXh0XG4gICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHhcbiAgICovXG4gIHNldFN0cm9rZUN0eChjdHgpIHtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnN0cm9rZUNvbG9yXG4gICAgY3R4LmxpbmVXaWR0aCA9IHRoaXMuX3N0cm9rZVdpZHRoXG4gICAgY3R4LmxpbmVKb2luID0gdGhpcy5fbGluZUpvaW5cbiAgICBjdHgubGluZUNhcCA9IHRoaXMuX2xpbmVDYXBcbiAgICBjdHguc2V0TGluZURhc2godGhpcy5fZGFzaFBhdHRlcm4pXG4gICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gdGhpcy5fZGFzaE9mZnNldFxuICB9XG5cbiAgLyoqXG4gICAqIENvcGllcyB0aGUgcHJvcGVydGllcyBvZiBvbmUgc3Ryb2tlIHN0eWxlIHRvIGFub3RoZXJcbiAgICogQHBhcmFtICB7U3Ryb2tlU3R5bGV9IHNyY1N0eWxlIFN0cm9rZVN0eWxlIG9iamVjdCB0byBjb3B5IGZyb21cbiAgICogQHBhcmFtICB7U3Ryb2tlU3R5bGV9IGRzdFN0eWxlIFN0cm9rZVN0eWxlIG9iamVjdCB0byBjb3B5IHRvXG4gICAqL1xuICBzdGF0aWMgY29weVN0cm9rZVN0eWxlKHNyY1N0eWxlLCBkc3RTdHlsZSkge1xuICAgIGlmICh0eXBlb2Ygc3JjU3R5bGUucGFja2VkU3Ryb2tlQ29sb3IgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmICh0eXBlb2Ygc3JjU3R5bGUuc3Ryb2tlQ29sb3IgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgZHN0U3R5bGUuc3Ryb2tlQ29sb3IgPSBzcmNTdHlsZS5zdHJva2VDb2xvclxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBzcmNTdHlsZS5zdHJva2VPcGFjaXR5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGRzdFN0eWxlLnN0cm9rZU9wYWNpdHkgPSBzcmNTdHlsZS5zdHJva2VPcGFjaXR5XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRzdFN0eWxlLnBhY2tlZFN0cm9rZUNvbG9yID0gc3JjU3R5bGUucGFja2VkU3Ryb2tlQ29sb3JcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzcmNTdHlsZS5zdHJva2VXaWR0aCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgZHN0U3R5bGUuc3Ryb2tlV2lkdGggPSBzcmNTdHlsZS5zdHJva2VXaWR0aFxuICAgIH1cbiAgICBpZiAodHlwZW9mIHNyY1N0eWxlLmxpbmVKb2luICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBkc3RTdHlsZS5saW5lSm9pbiA9IHNyY1N0eWxlLmxpbmVKb2luXG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc3JjU3R5bGUubGluZUNhcCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgZHN0U3R5bGUubGluZUNhcCA9IHNyY1N0eWxlLmxpbmVDYXBcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzcmNTdHlsZS5kYXNoUGF0dGVybiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgZHN0U3R5bGUuZGFzaFBhdHRlcm4gPSBzcmNTdHlsZS5kYXNoUGF0dGVyblxuICAgIH1cbiAgICBpZiAodHlwZW9mIHNyY1N0eWxlLmRhc2hPZmZzZXQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGRzdFN0eWxlLmRhc2hPZmZzZXQgPSBzcmNTdHlsZS5kYXNoT2Zmc2V0XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbXBhcmlzb24gb3BlcmF0b3IgYmV0d2VlbiB0d28gU3Ryb2tlU3R5bGUgb2JqZWN0cy4gVGhpcyBpcyBwcmltYXJpbHlcbiAgICogdXNlZCBmb3Igc29ydGluZyB0byBtaW5pbWl6ZSBjb250ZXh0IHN3aXRjaGluZyBvZiBhIDJkIHJlbmRlcmVyXG4gICAqIEBwYXJhbSAge1N0cm9rZVN0eWxlfSBzdHJva2VTdHlsZUFcbiAgICogQHBhcmFtICB7U3Ryb2tlU3R5bGV9IHN0cm9rZVN0eWxlQlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9ICAgICAgICAgICAgUmV0dXJucyA8IDAgaWYgc3Ryb2tlU3R5bGVBIDwgc3Ryb2tlU3R5bGVCLCA+IDAgaWYgc3Ryb2tlU3R5bGVBID4gc3Ryb2tlU3R5bGVCLCBvciAwIGlmIHRoZXkgYXJlIGVxdWFsLlxuICAgKi9cbiAgc3RhdGljIGNvbXBhcmVTdHJva2VTdHlsZShzdHJva2VTdHlsZUEsIHN0cm9rZVN0eWxlQikge1xuICAgIGxldCB2YWxBID0gc3Ryb2tlU3R5bGVBLmlzU3Ryb2tlVmlzaWJsZSgpXG4gICAgbGV0IHZhbEIgPSBzdHJva2VTdHlsZUIuaXNTdHJva2VWaXNpYmxlKClcbiAgICBpZiAodmFsQSAhPT0gdmFsQikge1xuICAgICAgcmV0dXJuIHZhbEEgLSB2YWxCXG4gICAgfVxuICAgIHZhbEEgPSBzdHJva2VTdHlsZUEucGFja2VkU3Ryb2tlQ29sb3JcbiAgICB2YWxCID0gc3Ryb2tlU3R5bGVCLnBhY2tlZFN0cm9rZUNvbG9yXG4gICAgaWYgKHZhbEEgIT09IHZhbEIpIHtcbiAgICAgIHJldHVybiB2YWxBIC0gdmFsQlxuICAgIH1cbiAgICB2YWxBID0gc3Ryb2tlU3R5bGVBLnN0cm9rZVdpZHRoXG4gICAgdmFsQiA9IHN0cm9rZVN0eWxlQi5zdHJva2VXaWR0aFxuICAgIGlmICh2YWxBICE9PSB2YWxCKSB7XG4gICAgICByZXR1cm4gdmFsQSAtIHZhbEJcbiAgICB9XG4gICAgdmFsQSA9IHN0cm9rZVN0eWxlQS5fbGluZUpvaW5cbiAgICB2YWxCID0gc3Ryb2tlU3R5bGVCLl9saW5lSm9pblxuICAgIGlmICh2YWxBICE9PSB2YWxCKSB7XG4gICAgICByZXR1cm4gdmFsQSAtIHZhbEJcbiAgICB9XG4gICAgdmFsQSA9IHN0cm9rZVN0eWxlQS5fbGluZUNhcFxuICAgIHZhbEIgPSBzdHJva2VTdHlsZUIuX2xpbmVDYXBcbiAgICBpZiAodmFsQSAhPT0gdmFsQikge1xuICAgICAgcmV0dXJuIHZhbEEgLSB2YWxCXG4gICAgfVxuICAgIHZhbEEgPSBzdHJva2VTdHlsZUEuX2Rhc2hQYXR0ZXJuXG4gICAgdmFsQiA9IHN0cm9rZVN0eWxlQi5fZGFzaFBhdHRlcm5cbiAgICBpZiAodmFsQS5sZW5ndGggPT09IHZhbEIubGVuZ3RoICYmIHZhbEEubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWxBLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmICh2YWxBW2ldICE9PSB2YWxCW2ldKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbEFbaV0gLSB2YWxCW2ldXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJva2VTdHlsZUEuZGFzaE9mZnNldCAtIHN0cm9rZVN0eWxlQi5kYXNoT2Zmc2V0XG4gICAgfVxuICAgIHJldHVybiB2YWxBLmxlbmd0aCAtIHZhbEIubGVuZ3RoXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGpzb24gb2JqZWN0IG9mIGEgU3Ryb2tlU3R5bGUgb2JqZWN0XG4gICAqIEBwYXJhbSAge1N0cm9rZVN0eWxlfSBzdHJva2VTdHlsZU9ialxuICAgKiBAcmV0dXJuIHt7c3Ryb2tlQ29sb3I6IHN0cmluZyxcbiAgICogICAgICAgICAgIHN0cm9rZVdpZHRoOiBudW1iZXIsXG4gICAqICAgICAgICAgICBsaW5lSm9pbjogc3RyaW5nLFxuICAgKiAgICAgICAgICAgbGluZUNhcDogc3RyaW5nLFxuICAgKiAgICAgICAgICAgZGFzaFBhdHRlcm46IG51bWJlcltdLFxuICAgKiAgICAgICAgICAgZGFzaE9mZnNldDogbnVtYmVyXG4gICAqICAgICAgICAgIH19XG4gICAqL1xuICBzdGF0aWMgdG9KU09OKHN0cm9rZVN0eWxlT2JqKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0cm9rZUNvbG9yOiBzdHJva2VTdHlsZU9iai5zdHJva2VDb2xvcixcbiAgICAgIHN0cm9rZVdpZHRoOiBzdHJva2VTdHlsZU9iai5zdHJva2VXaWR0aCxcbiAgICAgIGxpbmVKb2luOiBzdHJva2VTdHlsZU9iai5saW5lSm9pbixcbiAgICAgIGxpbmVDYXA6IHN0cm9rZVN0eWxlT2JqLmxpbmVDYXAsXG4gICAgICBkYXNoUGF0dGVybjogc3Ryb2tlU3R5bGVPYmouZGFzaFBhdHRlcm4sXG4gICAgICBkYXNoT2Zmc2V0OiBzdHJva2VTdHlsZU9iai5kYXNoT2Zmc2V0XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBzdHJva2Ugc3R5bGUgY2xhc3MgdGhhdCBmaXJlcyBldmVudHMgd2hlbmV2ZXIgdGhlIHN0eWxlXG4gKiBpcyBtb2RpZmllZC5cbiAqIEBwYXJhbSAge3N0cmluZ30gZXZlbnROYW1lIEV2ZW50IHR5cGUgdG8gZmlyZSB3aGVuIHN0cm9rZSBzdHlsZSBpcyBtb2RpZmllZFxuICogQHJldHVybiB7ZnVuY3Rpb259ICAgICAgICAgTmV3IGNsYXNzIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFdmVudGVkU3Ryb2tlU3R5bGVNaXhpbihldmVudE5hbWUpIHtcbiAgLyoqXG4gICAqIEV2ZW50ZWQgc3Ryb2tlIGNvbG9yIGNsYXNzIHRvIGhhbmRsZSBjb2xvciBtb2RpZmljYXRpb24gZXZlbnRzXG4gICAqIEB0eXBlIHtDb2xvclJHQkF9XG4gICAqL1xuICBjb25zdCBTdHJva2VDb2xvckNsYXNzID0gY3JlYXRlRXZlbnRlZENvbG9yUkdCQUNsYXNzKGV2ZW50TmFtZSwgXCJzdHJva2VDb2xvclwiKVxuXG4gIC8qKlxuICAgKiBTdHJva2Ugc3R5bGUgbW9kaWZpY2F0aW9uIGV2ZW50XG4gICAqIEBldmVudCBFdmVudGVkU3Ryb2tlU3R5bGUjY2hhbmdlZFxuICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gYXR0ciBOYW1lIG9mIHRoZSBhdHRyaWJ1dGUgbW9kaWZpZWRcbiAgICogQHByb3BlcnR5IHt9IHByZXZWYWwgUHJldmlvdXMgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBwcmlvciB0byBtb2RpZmljYXRpb25cbiAgICogQHByb3BlcnR5IHt9IGN1cnJWYWwgVmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBwb3N0IG1vZGlmaWNhdGlvblxuICAgKi9cblxuICAvKipcbiAgICogQG1peGluIE5ldyBldmVudGVkIHN0cm9rZSBzdHlsZSBtaXhpbi4gV2lsbCBmaXJlIGV2ZW50cyB3aGVuZXZlclxuICAgKiAgICAgICAgdGhlIHN0cm9rZSBpcyBtb2RpZmllZFxuICAgKi9cbiAgcmV0dXJuIGFnZ3JlZ2F0aW9uKFxuICAgIG51bGwsXG4gICAgU3Ryb2tlU3R5bGUsXG4gICAgY2xhc3MgRXZlbnRlZFN0cm9rZVN0eWxlIHtcbiAgICAgIC8qKlxuICAgICAgICogSW5pdGlhbGl6ZXIgbWV0aG9kIHRvIGluaXRpYWxpemUgYW4gZXZlbnRlZCBzdHJva2Ugc3R5bGUuXG4gICAgICAgKiBAcGFyYW0gIHtTdHJva2VTdHlsZU9wdGlvbnN9IFtvcHRzXVxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICBpbml0aWFsaXplcihvcHRzKSB7XG4gICAgICAgIHRoaXMuX3N0cm9rZUNvbG9yID0gbmV3IFN0cm9rZUNvbG9yQ2xhc3MoXCJibGFja1wiLCB0aGlzKVxuICAgICAgICB0aGlzLl9zdHJva2VXaWR0aCA9IDBcbiAgICAgICAgdGhpcy5fbGluZUpvaW4gPSBKb2luRW51bS5NSVRFUlxuICAgICAgICB0aGlzLl9saW5lQ2FwID0gQ2FwRW51bS5CVVRUXG4gICAgICAgIHRoaXMuX2Rhc2hQYXR0ZXJuID0gW11cbiAgICAgICAgdGhpcy5fZGFzaE9mZnNldCA9IDBcbiAgICAgICAgdGhpcy5faW5pdFN0cm9rZVN0eWxlRnJvbU9wdGlvbnMob3B0cylcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBTZXRzIHRoZSBzdHJva2Ugd2lkdGhcbiAgICAgICAqIEBwYXJhbSAge251bWJlcn1cbiAgICAgICAqIEBmaXJlcyAgRXZlbnRlZFN0cm9rZVN0eWxlI2NoYW5nZWRcbiAgICAgICAqIEByZXR1cm4ge0V2ZW50ZWRTdHJva2VTdHlsZX1cbiAgICAgICAqL1xuICAgICAgc2V0IHN0cm9rZVdpZHRoKHN0cm9rZVdpZHRoKSB7XG4gICAgICAgIHZhbGlkYXRlU3Ryb2tlV2lkdGgoc3Ryb2tlV2lkdGgpXG4gICAgICAgIGlmIChzdHJva2VXaWR0aCAhPT0gdGhpcy5fc3Ryb2tlV2lkdGgpIHtcbiAgICAgICAgICBjb25zdCBwcmV2ID0gdGhpcy5fc3Ryb2tlV2lkdGhcbiAgICAgICAgICB0aGlzLl9zdHJva2VXaWR0aCA9IHN0cm9rZVdpZHRoXG4gICAgICAgICAgdGhpcy5maXJlKGV2ZW50TmFtZSwge1xuICAgICAgICAgICAgYXR0cjogXCJzdHJva2VXaWR0aFwiLFxuICAgICAgICAgICAgcHJldlZhbDogcHJldixcbiAgICAgICAgICAgIGN1cnJhbDogdGhpcy5fc3Ryb2tlV2lkdGhcbiAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBHZXRzIHRoZSBjdXJyZW50IHN0cm9rZSB3aWR0aFxuICAgICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAgICovXG4gICAgICBnZXQgc3Ryb2tlV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdHJva2VXaWR0aFxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHMgdGhlIGxpbmUgam9pblxuICAgICAgICogQHBhcmFtICB7c3RyaW5nfSBsaW5lSm9pblxuICAgICAgICogQGZpcmVzIHtFdmVudGVkU3Ryb2tlU3R5bGUjY2hhbmdlZH1cbiAgICAgICAqIEByZXR1cm4ge0V2ZW50ZWRTdHJva2VTdHlsZX1cbiAgICAgICAqL1xuICAgICAgc2V0IGxpbmVKb2luKGxpbmVKb2luKSB7XG4gICAgICAgIGNvbnN0IGVudW1WYWwgPSB2YWxpZGF0ZUxpbmVKb2luKGxpbmVKb2luKVxuXG4gICAgICAgIGlmIChlbnVtVmFsICE9PSB0aGlzLl9saW5lSm9pbikge1xuICAgICAgICAgIGNvbnN0IHByZXYgPSB0aGlzLl9saW5lSm9pblxuICAgICAgICAgIHRoaXMuX2xpbmVKb2luID0gZW51bVZhbFxuICAgICAgICAgIHRoaXMuZmlyZShldmVudE5hbWUsIHtcbiAgICAgICAgICAgIGF0dHI6IFwibGluZUpvaW5cIixcbiAgICAgICAgICAgIHByZXZWYWw6IHByZXYsXG4gICAgICAgICAgICBjdXJyYWw6IHRoaXMuX2xpbmVKb2luXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0cyB0aGUgY3VycmVudCBsaW5lIGpvaW5cbiAgICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgZ2V0IGxpbmVKb2luKCkge1xuICAgICAgICByZXR1cm4gbGluZUpvaW5PcHRzW3RoaXMuX2xpbmVKb2luXVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHMgdGhlIGxpbmUgY2FwXG4gICAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGxpbmVDYXBcbiAgICAgICAqIEBmaXJlcyB7RXZlbnRlZFN0cm9rZVN0eWxlI2NoYW5nZWR9XG4gICAgICAgKiBAcmV0dXJuIHtFdmVudGVkU3Ryb2tlU3R5bGV9XG4gICAgICAgKi9cbiAgICAgIHNldCBsaW5lQ2FwKGxpbmVDYXApIHtcbiAgICAgICAgY29uc3QgZW51bVZhbCA9IHZhbGlkYXRlTGluZUNhcChsaW5lQ2FwKVxuICAgICAgICBpZiAoZW51bVZhbCAhPT0gdGhpcy5fbGluZUNhcCkge1xuICAgICAgICAgIGNvbnN0IHByZXYgPSB0aGlzLl9saW5lQ2FwXG4gICAgICAgICAgdGhpcy5fbGluZUNhcCA9IGVudW1WYWxcbiAgICAgICAgICB0aGlzLmZpcmUoZXZlbnROYW1lLCB7XG4gICAgICAgICAgICBhdHRyOiBcImxpbmVDYXBcIixcbiAgICAgICAgICAgIHByZXZWYWw6IHByZXYsXG4gICAgICAgICAgICBjdXJyYWw6IHRoaXMuX2xpbmVDYXBcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0cyB0aGUgbGluZSBjYXBcbiAgICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgZ2V0IGxpbmVDYXAoKSB7XG4gICAgICAgIHJldHVybiBsaW5lQ2FwT3B0c1t0aGlzLl9saW5lQ2FwXVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFNldHMgdGhlIGRhc2ggcGF0dGVyblxuICAgICAgICogQHBhcmFtICB7bnVtYmVyW119IGRhc2hQYXR0ZXJuXG4gICAgICAgKiBAZmlyZXMge0V2ZW50ZWRTdHJva2VTdHlsZSNjaGFuZ2VkfVxuICAgICAgICogQHJldHVybiB7RXZlbnRlZFN0cm9rZVN0eWxlfVxuICAgICAgICovXG4gICAgICBzZXQgZGFzaFBhdHRlcm4oZGFzaFBhdHRlcm4pIHtcbiAgICAgICAgdmFsaWRhdGVEYXNoUGF0dGVybihkYXNoUGF0dGVybilcbiAgICAgICAgbGV0IGRpZmYgPSBmYWxzZVxuICAgICAgICBpZiAoZGFzaFBhdHRlcm4ubGVuZ3RoID09PSB0aGlzLl9kYXNoUGF0dGVybi5sZW5ndGgpIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhc2hQYXR0ZXJuLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoZGFzaFBhdHRlcm5baV0gIT09IHRoaXMuX2Rhc2hQYXR0ZXJuW2ldKSB7XG4gICAgICAgICAgICAgIGRpZmYgPSB0cnVlXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRpZmYgPSB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlmZikge1xuICAgICAgICAgIGNvbnN0IHByZXYgPSB0aGlzLl9kYXNoUGF0dGVyblxuICAgICAgICAgIHRoaXMuX2Rhc2hQYXR0ZXJuID0gZGFzaFBhdHRlcm4uc2xpY2UoKVxuICAgICAgICAgIHRoaXMuZmlyZShldmVudE5hbWUsIHtcbiAgICAgICAgICAgIGF0dHI6IFwiZGFzaFBhdHRlcm5cIixcbiAgICAgICAgICAgIHByZXZWYWw6IHByZXYsXG4gICAgICAgICAgICBjdXJyYWw6IHRoaXMuX2Rhc2hQYXR0ZXJuLnNsaWNlKClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0cyB0aGUgY3VycmVudCBkYXNoIHBhdHRlcm5cbiAgICAgICAqIEByZXR1cm4ge251bWJlcltdfVxuICAgICAgICovXG4gICAgICBnZXQgZGFzaFBhdHRlcm4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXNoUGF0dGVybi5zbGljZSgpXG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0cyB0aGUgY3VycmVudCBkYXNoIG9mZnNldFxuICAgICAgICogQHBhcmFtICB7bnVtYmVyfSBkYXNoT2Zmc2V0XG4gICAgICAgKiBAZmlyZXMge0V2ZW50ZWRTdHJva2VTdHlsZSNjaGFuZ2VkfVxuICAgICAgICogQHJldHVybiB7RXZlbnRlZFN0cm9rZVN0eWxlfVxuICAgICAgICovXG4gICAgICBzZXQgZGFzaE9mZnNldChkYXNoT2Zmc2V0KSB7XG4gICAgICAgIHZhbGlkYXRlRGFzaE9mZnNldChkYXNoT2Zmc2V0KVxuXG4gICAgICAgIGlmIChkYXNoT2Zmc2V0ICE9PSB0aGlzLl9kYXNoT2Zmc2V0KSB7XG4gICAgICAgICAgY29uc3QgcHJldiA9IHRoaXMuX2Rhc2hPZmZzZXRcbiAgICAgICAgICB0aGlzLl9kYXNoT2Zmc2V0ID0gZGFzaE9mZnNldFxuXG4gICAgICAgICAgaWYgKHRoaXMuX2Rhc2hQYXR0ZXJuLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gb25seSBmaXJlIGlmIGRhc2hpbmcgaXMgYWN0aXZhdGVkXG4gICAgICAgICAgICB0aGlzLmZpcmUoZXZlbnROYW1lLCB7XG4gICAgICAgICAgICAgIGF0dHI6IFwiZGFzaE9mZnNldFwiLFxuICAgICAgICAgICAgICBwcmV2VmFsOiBwcmV2LFxuICAgICAgICAgICAgICBjdXJyYWw6IHRoaXMuX2Rhc2hPZmZzZXRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2V0cyB0aGUgY3VycmVudCBkYXNoIG9mZnNldFxuICAgICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAgICovXG4gICAgICBnZXQgZGFzaE9mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rhc2hPZmZzZXRcbiAgICAgIH1cbiAgICB9XG4gIClcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3N0eWxlL3N0cm9rZS1zdHlsZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export EventConstants */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DrawEngine; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_canvas_utils__ = __webpack_require__(32);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_point2d__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shapes_base_shape__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__style_basic_style__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_utils__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__view_camera2d__ = __webpack_require__(34);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__util_event_handler__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_css_element_queries_src_ResizeSensor__ = __webpack_require__(35);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_css_element_queries_src_ResizeSensor___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_css_element_queries_src_ResizeSensor__);\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\n\nvar mouseevents = [\"mousedown\", \"mouseup\", \"mousemove\", \"click\", \"dblclick\", \"mouseover\", \"mouseout\"];\nvar marginProps = [\"top\", \"bottom\", \"left\", \"right\"];\nvar EventConstants = {\n  MOUSEDOWN: \"mousedown\",\n  MOUSEUP: \"mouseup\",\n  MOUSEMOVE: \"mousemove\",\n  CLICK: \"click\",\n  DBLCLICK: \"dblclick\",\n  MOUSEOVER: \"mouseover\",\n  MOUSEOUT: \"mouseout\",\n  SHAPE_ADD: \"shape:add\",\n  SHAPE_DELETE: \"shape:delete\"\n};\n\nvar DrawStyleState =\n/*#__PURE__*/\nfunction (_BasicStyle) {\n  _inherits(DrawStyleState, _BasicStyle);\n\n  function DrawStyleState() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DrawStyleState);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DrawStyleState)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this._defaults = {\n      packedFillColor: _this.packedFillColor,\n      packedStrokeColor: _this.packedStrokeColor,\n      strokeWidth: _this.strokeWidth,\n      lineJoin: _this.lineJoin,\n      lineCap: _this.lineCap,\n      dashPattern: _this.dashPattern,\n      dashOffset: _this.dashOffset\n    };\n    return _this;\n  }\n\n  _createClass(DrawStyleState, [{\n    key: \"setFillStyle\",\n    value: function setFillStyle(ctx, fillStyle) {\n      if (fillStyle.packedFillColor !== this.packedFillColor) {\n        this.packedFillColor = fillStyle.packedFillColor;\n        ctx.fillStyle = this.fillColor;\n      }\n    }\n  }, {\n    key: \"setStrokeStyle\",\n    value: function setStrokeStyle(ctx, strokeStyle) {\n      if (strokeStyle.packedStrokeColor !== this.packedStrokeColor) {\n        this.packedStrokeColor = strokeStyle.packedStrokeColor;\n        ctx.strokeStyle = this.strokeColor;\n      }\n\n      if (strokeStyle.strokeWidth !== this._strokeWidth) {\n        this.strokeWidth = strokeStyle.strokeWidth;\n        ctx.lineWidth = this._strokeWidth;\n      }\n\n      if (strokeStyle.lineJoin !== this._lineJoin) {\n        this.lineJoin = strokeStyle.lineJoin;\n        ctx.lineJoin = this._lineJoin;\n      }\n\n      if (strokeStyle.lineCap !== this._lineCap) {\n        this.lineCap = strokeStyle.lineCap;\n        ctx.lineCap = this._lineCap;\n      }\n\n      var dashPattern = strokeStyle._dashPattern;\n      var diff = false;\n\n      if (dashPattern.length === this._dashPattern.length) {\n        for (var i = 0; i < dashPattern.length; i += 1) {\n          if (dashPattern[i] !== this._dashPattern[i]) {\n            diff = true;\n            break;\n          }\n        }\n      } else {\n        diff = true;\n      }\n\n      if (diff) {\n        this.dashPattern = dashPattern;\n        ctx.setLineDash(this._dashPattern);\n      }\n\n      if (strokeStyle.dashOffset !== this._dashOffset) {\n        this.dashOffset = strokeStyle.dashOffset;\n        ctx.lineDashOffset = this._dashOffset;\n      }\n    }\n  }, {\n    key: \"applyDefaults\",\n    value: function applyDefaults(ctx) {\n      var _this2 = this;\n\n      Object.getOwnPropertyNames(this._defaults).forEach(function (prop) {\n        _this2[prop] = _this2._defaults[prop];\n      });\n      this.setFillCtx(ctx);\n      this.setStrokeCtx(ctx);\n    }\n  }]);\n\n  return DrawStyleState;\n}(__WEBPACK_IMPORTED_MODULE_3__style_basic_style__[\"a\" /* default */]);\n\nfunction addClass(element, className) {\n  if (element && \" \".concat(element.className, \" \").indexOf(\" \".concat(className, \" \")) < 0) {\n    element.className += (element.className ? \" \" : \"\") + className;\n  }\n}\n\nfunction createCanvas(parent) {\n  var canvasContainer = document.createElement(\"div\");\n  addClass(canvasContainer, \"mapd-draw-canvas-container\");\n  var canvas = document.createElement(\"canvas\");\n  var canvasContext = canvas.getContext(\"2d\");\n  var ratio = __WEBPACK_IMPORTED_MODULE_0__util_canvas_utils__[\"a\" /* makeCanvasAutoHighDPI */](canvasContext); // const ratio = 1\n  // add class?\n\n  addClass(canvas, \"mapd-draw-canvas\");\n  canvas.style.position = \"absolute\";\n  canvas.style.pointerEvents = \"none\";\n  canvasContainer.appendChild(canvas); // canvas.setAttribute(\"width\", ratio * parent.offsetX)\n  // canvas.setAttribute(\"height\", ratio * parent.offsetY)\n  // parent.insertBefore(canvas, parent.firstChild)\n\n  parent.appendChild(canvasContainer);\n  return {\n    canvasContainer: canvasContainer,\n    canvas: canvas,\n    canvasContext: canvasContext,\n    ratio: ratio\n  };\n}\n\nfunction addShapesToMap(newShapes, existingObjectsMap, currIds, reorderCb, redrawCb) {\n  newShapes.forEach(function (shape) {\n    existingObjectsMap.set(shape, {\n      shapeObj: shape,\n      shapeId: currIds.shapeId,\n      shapeIdx: -1\n    });\n    shape.on([\"changed:order\", \"changed:visibility\", \"changed:style\"], reorderCb);\n    shape.on([\"changed:geom\", \"changed:visibility\", \"changed:xform\"], redrawCb);\n    currIds.shapeId += 1;\n  });\n}\n\nfunction deleteShapesFromMap(shapes, existingObjectsMap, reorderCb, redrawCb) {\n  var idxs = [];\n  shapes.forEach(function (shape) {\n    var shapeInfo = existingObjectsMap.get(shape);\n\n    if (shapeInfo) {\n      idxs.push(shapeInfo.shapeIdx);\n    }\n\n    existingObjectsMap[\"delete\"](shape);\n    shape.off([\"changed\"], [reorderCb, redrawCb]);\n  });\n  return idxs;\n}\n\nvar DrawEngine =\n/*#__PURE__*/\nfunction (_EventHander) {\n  _inherits(DrawEngine, _EventHander);\n\n  function DrawEngine(parent, opts) {\n    var _this3;\n\n    _classCallCheck(this, DrawEngine);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(DrawEngine).call(this));\n\n    _this3._init(parent, opts);\n\n    return _this3;\n  }\n\n  _createClass(DrawEngine, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _this4 = this;\n\n      this._destroyCanvas();\n\n      if (this._objects) {\n        this._objects.forEach(function (shapeInfo, shape) {\n          shape.off(\"changed\", [_this4._reorderCb, _this4._redrawCb]);\n        });\n\n        this._objects.clear();\n\n        this._sortedObjs = [];\n\n        this._reorderedObjIdxs.clear();\n      }\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(opts) {\n      var width = 0;\n\n      if (this._parent.offsetWidth) {\n        width = Math.max(width, this._parent.offsetWidth - this._margins.left - this._margins.right);\n      }\n\n      var height = 0;\n\n      if (this._parent.offsetHeight) {\n        height = Math.max(height, this._parent.offsetHeight - this._margins.top - this._margins.bottom);\n      }\n\n      this._drawCanvas.width = width * this._pixelRatio;\n      this._drawCanvas.height = height * this._pixelRatio;\n      this._drawCanvas.style.left = \"\".concat(this._margins.left, \"px\");\n      this._drawCanvas.style.top = \"\".concat(this._margins.top, \"px\");\n      this._drawCanvas.style.width = \"\".concat(width, \"px\");\n      this._drawCanvas.style.height = \"\".concat(height, \"px\");\n\n      if (this._camera) {// const currViewport = this._camera.viewport\n        // const currSpace = this._camera.projectionBounds\n        // const viewportExtents = [0, 0]\n        // AABox2d.getExtents(viewportExtents, currViewport)\n        // const spaceCenter = [0, 0]\n        // const spaceExtents = [0, 0]\n        // AABox2d.getCenter(spaceCenter, currSpace)\n        // AABox2d.getExtents(spaceExtents, currSpace)\n        // const ratio = spaceExtents\n        // Vec2d.div(ratio, spaceExtents, viewportExtents)\n        // AABox2d.set(currViewport, 0, 0, width, height)\n        // AABox2d.getExtents(viewportExtents, currViewport)\n        // Vec2d.multiply(spaceExtents, ratio, viewportExtents)\n        // AABox2d.initCenterExtents(currSpace, spaceCenter, spaceExtents)\n        // this._camera.viewport = currViewport\n        // this._camera.projectionBounds = currSpace\n        //   // this._camera.viewport = [0, 0, width, height]\n        //   // this._camera.projectionBounds = [0, 0, width, height]\n      } else {\n        var projDims = opts && opts.projectionDimensions ? opts.projectionDimensions : [width, height];\n        this._camera = new __WEBPACK_IMPORTED_MODULE_5__view_camera2d__[\"a\" /* default */]([0, 0, width, height], projDims, opts.flipY ? Boolean(opts.flipY) : false);\n\n        this._camera.setPosition(opts && opts.cameraPosition ? opts.cameraPosition : [width / 2.0, height / 2.0]);\n\n        this._camera.on(\"changed\", this._rerenderCb);\n      } // this._camera = new Camera2d([0, 0, this.width, this.height], [0, 0, this.width, this.height])\n      // this._camera.on(\"changed\", this._rerenderCb)\n\n\n      this._rerenderCb();\n    }\n  }, {\n    key: \"_mousedownCB\",\n    value: function _mousedownCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n\n      this.fire(\"mousedown\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_mouseupCB\",\n    value: function _mouseupCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n\n      this.fire(\"mouseup\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_mousemoveCB\",\n    value: function _mousemoveCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n\n      this.fire(\"mousemove\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_clickCB\",\n    value: function _clickCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n\n      this.fire(\"click\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_dblclickCB\",\n    value: function _dblclickCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n\n      this.fire(\"dblclick\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_mouseoverCB\",\n    value: function _mouseoverCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n\n      this.fire(\"mouseover\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_mouseoutCB\",\n    value: function _mouseoutCB(event) {\n      if (event.target !== this._parent) {\n        return;\n      }\n\n      this.fire(\"mouseout\", {\n        originalEvent: event\n      });\n    }\n  }, {\n    key: \"_enableEvents\",\n    value: function _enableEvents() {\n      this.registerEvents(mouseevents);\n      var callbacks = mouseevents.map(function (event) {\n        return \"_\".concat(event, \"CB\");\n      }); // bindAll(callbacks, this)\n\n      for (var i = 0; i < mouseevents.length; i += 1) {\n        document.addEventListener(mouseevents[i], this[callbacks[i]], true);\n      }\n    }\n  }, {\n    key: \"_disableEvents\",\n    value: function _disableEvents() {\n      var callbacks = mouseevents.map(function (event) {\n        return \"_\".concat(event, \"CB\");\n      });\n\n      for (var i = 0; i < mouseevents.length; i += 1) {\n        document.removeEventListener(mouseevents[i], this[callbacks[i]], true);\n      }\n    }\n  }, {\n    key: \"_initCanvas\",\n    value: function _initCanvas(parent, opts) {\n      var _this5 = this;\n\n      var forceEvents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      this._margins = opts && opts.margins ? Object.assign({}, opts.margins) : {};\n      marginProps.forEach(function (prop) {\n        if (typeof _this5._margins[prop] !== \"number\") {\n          _this5._margins[prop] = 0;\n        }\n      });\n\n      var _createCanvas = createCanvas(parent),\n          canvasContainer = _createCanvas.canvasContainer,\n          canvas = _createCanvas.canvas,\n          canvasContext = _createCanvas.canvasContext,\n          ratio = _createCanvas.ratio;\n\n      this._container = canvasContainer;\n      this._drawCanvas = canvas;\n      this._drawCtx = canvasContext;\n      this._pixelRatio = ratio;\n      this._parent = parent;\n      Object(__WEBPACK_IMPORTED_MODULE_4__util_utils__[\"a\" /* bindAll */])([\"_resize\"], this);\n\n      this._resize(opts);\n\n      this._resizeSensor = new __WEBPACK_IMPORTED_MODULE_7_css_element_queries_src_ResizeSensor___default.a(parent, this._resize);\n\n      if (forceEvents || forceEvents === null && opts && opts.enableEvents) {\n        this._enableEvents();\n      }\n    }\n  }, {\n    key: \"_destroyCanvas\",\n    value: function _destroyCanvas() {\n      if (this._drawCanvas) {\n        this._disableEvents();\n      }\n\n      if (this._parent) {\n        this._parent.removeChild(this._drawCanvas);\n\n        if (this._resizeSensor) {\n          this._resizeSensor.detach(this._parent, this._resize);\n        }\n      }\n\n      this._drawCanvas = null;\n      this._drawCtx = null;\n      this._parent = null;\n    }\n  }, {\n    key: \"_init\",\n    value: function _init(parent, opts) {\n      var forceEvents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      this.registerEvents([EventConstants.SHAPE_ADD, EventConstants.SHAPE_DELETE]);\n      Object(__WEBPACK_IMPORTED_MODULE_4__util_utils__[\"a\" /* bindAll */])([\"_reorderCb\", \"_rerenderCb\"], this);\n      Object(__WEBPACK_IMPORTED_MODULE_4__util_utils__[\"a\" /* bindAll */])([\"_mousedownCB\", \"_mouseupCB\", \"_mousemoveCB\", \"_clickCB\", \"_dblclickCB\", \"_mouseoverCB\", \"_mouseoutCB\"], this);\n      this._renderFrameCb = this.renderAll.bind(this);\n      this._renderRequestTime = 0;\n      this._ids = {\n        shapeId: 1\n      };\n      this._objects = new Map();\n      this._sortedObjs = [];\n      this._reorderedObjIdxs = new Set();\n\n      this._initCanvas(parent, opts, forceEvents);\n\n      this._styleState = new DrawStyleState({\n        fillColor: \"red\"\n      });\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer() {\n      return this._parent;\n    }\n  }, {\n    key: \"getCanvasContainer\",\n    value: function getCanvasContainer() {\n      return this._container;\n    }\n  }, {\n    key: \"getCanvas\",\n    value: function getCanvas() {\n      return this._drawCanvas;\n    }\n  }, {\n    key: \"project\",\n    value: function project(out, screenPt) {\n      var screenToWorldMatrix = this._camera.screenToWorldMatrix;\n      return __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"transformMat2d\"](out, screenPt, screenToWorldMatrix);\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(out, worldPt) {\n      var worldToScreenMatrix = this._camera.worldToScreenMatrix;\n      return __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"transformMat2d\"](out, worldPt, worldToScreenMatrix);\n    }\n  }, {\n    key: \"hasShape\",\n    value: function hasShape(shape) {\n      return this._objects.has(shape);\n    }\n  }, {\n    key: \"addShape\",\n    value: function addShape(shape) {\n      var shapes = shape;\n\n      if (!Array.isArray(shapes)) {\n        shapes = [shape];\n      }\n\n      addShapesToMap(shapes, this._objects, this._ids, this._reorderCb, this._rerenderCb); // fire add event\n\n      this.fire(\"shape:add\", {\n        shape: shapes\n      });\n      var proxyEvent = {\n        target: shapes\n      };\n\n      this._reorderCb(proxyEvent);\n\n      return this;\n    }\n  }, {\n    key: \"deleteShape\",\n    value: function deleteShape(shape) {\n      var shapes = shape;\n\n      if (!Array.isArray(shapes)) {\n        shapes = [shape];\n      }\n\n      var idxs = deleteShapesFromMap(shapes, this._objects, this._reorderCb, this._rerenderCb);\n      var index = -1;\n\n      for (var i = 0; i < shapes.length; i += 1) {\n        if ((index = this._sortedObjs.indexOf(shapes[i])) >= 0) {\n          this._sortedObjs.splice(index, 1);\n        }\n\n        this._reorderedObjIdxs.add(idxs[i]);\n      }\n\n      this._rerenderCb();\n\n      this.fire(\"shape:delete\", {\n        shape: shapes\n      });\n      return this;\n    }\n  }, {\n    key: \"deleteAllShapes\",\n    value: function deleteAllShapes() {\n      this.deleteShape(this.sortedShapes.slice());\n      return this;\n    }\n  }, {\n    key: \"moveShapeToTop\",\n    value: function moveShapeToTop(shape) {\n      if (this._objects.has(shape)) {\n        var shapes = this.sortedShapes;\n        var zindex = shapes[shapes.length - 1].zIndex;\n        shape.zIndex = zindex + 1;\n      }\n    }\n  }, {\n    key: \"moveShapeToBack\",\n    value: function moveShapeToBack(shape) {\n      if (this._objects.has(shape)) {\n        var shapes = this.sortedShapes;\n        var zindex = shapes[0].zIndex;\n        shape.zIndex = zindex;\n      }\n    }\n  }, {\n    key: \"getShapesAsJSON\",\n    value: function getShapesAsJSON() {\n      var shapes = this.sortedShapes;\n      return shapes.map(function (shape) {\n        return shape.toJSON();\n      });\n    }\n  }, {\n    key: \"_rerenderCb\",\n    value: function _rerenderCb() {\n      window.requestAnimationFrame(this._renderFrameCb);\n    }\n  }, {\n    key: \"_reorderCb\",\n    value: function _reorderCb(event) {\n      var _this6 = this;\n\n      var changedShapes = event.target;\n\n      if (!Array.isArray(changedShapes)) {\n        changedShapes = [event.target];\n      }\n\n      changedShapes.forEach(function (changedShape) {\n        console.assert(changedShape, \"A changed event doesn't have an object\");\n\n        var shapeInfo = _this6._objects.get(changedShape);\n\n        console.assert(shapeInfo, \"A changed event target isn't in the list of shapes \".concat(changedShape));\n\n        if (shapeInfo.shapeIdx < 0) {\n          shapeInfo.shapeIdx = _this6._sortedObjs.push(changedShape) - 1;\n        }\n\n        _this6._reorderedObjIdxs.add(shapeInfo.shapeIdx);\n      });\n\n      this._rerenderCb();\n    }\n  }, {\n    key: \"_renderShapes\",\n    value: function _renderShapes(ctx, drawShapes, camera) {\n      var _this7 = this;\n\n      var worldToScreenMat = camera.worldToScreenMatrix;\n      drawShapes.forEach(function (shape) {\n        if (shape.visible) {\n          shape.render(ctx, worldToScreenMat, _this7._styleState);\n        }\n      });\n    }\n  }, {\n    key: \"renderAll\",\n    value: function renderAll(timestamp) {\n      if (timestamp) {\n        if (timestamp <= this._renderRequestTime) {\n          return;\n        }\n\n        this._renderRequestTime = timestamp;\n      } else {\n        this._renderRequestTime = performance.now();\n      }\n\n      var ctx = this._drawCtx;\n      ctx.clearRect(0, 0, this._drawCanvas.offsetWidth, this._drawCanvas.offsetHeight);\n\n      if (!this._objects.size) {\n        return;\n      }\n\n      ctx.save();\n      var drawShapes = this.sortedShapes;\n\n      this._styleState.applyDefaults(ctx);\n\n      this._renderShapes(ctx, drawShapes, this._camera);\n\n      ctx.restore();\n    }\n  }, {\n    key: \"sortedShapes\",\n    get: function get() {\n      if (this._reorderedObjIdxs.size) {\n        console.assert(this._sortedObjs.length === this._objects.size, \"Size mismatch when rendering objets. Something got out of sync - sorted objs length: \".concat(this._sortedObjs.length, \", objects length: \").concat(this._objects.size)); // if (this._reorderedObjIdxs.length / this._sortedObjs.length > 0.7) {\n        //   // might as well just resort the whole thing over\n        //   this._sortedObjs.sort(shapeInfoCompare)\n        // } else {\n        // }\n\n        this._sortedObjs.sort(__WEBPACK_IMPORTED_MODULE_2__shapes_base_shape__[\"a\" /* default */].shapeCompare);\n\n        this._reorderedObjIdxs.clear();\n      }\n\n      return this._sortedObjs;\n    }\n  }, {\n    key: \"margins\",\n    get: function get() {\n      var _this8 = this;\n\n      var rtn = {};\n      marginProps.forEach(function (prop) {\n        rtn[prop] = _this8._margins[prop];\n      });\n      return rtn;\n    },\n    set: function set(margins) {\n      var _this9 = this;\n\n      marginProps.forEach(function (prop) {\n        if (typeof margins[prop] === \"number\" && margins[prop] !== _this9._margins[prop]) {\n          _this9._margins[prop] = margins.prop;\n        }\n      });\n\n      this._resize();\n    }\n  }, {\n    key: \"viewport\",\n    get: function get() {\n      return this._camera.viewport;\n    },\n    set: function set(viewport) {\n      this._camera.viewport = viewport;\n    }\n  }, {\n    key: \"projectionDimensions\",\n    get: function get() {\n      return this._camera.projectionDimensions;\n    },\n    set: function set(projectionDimensions) {\n      this._camera.projectionDimensions = projectionDimensions;\n      return this;\n    }\n  }, {\n    key: \"cameraPosition\",\n    get: function get() {\n      return this._camera.getPosition();\n    },\n    set: function set(pos) {\n      this._camera.setPosition(pos);\n\n      return this;\n    }\n  }]);\n\n  return DrawEngine;\n}(__WEBPACK_IMPORTED_MODULE_6__util_event_handler__[\"a\" /* default */]);\n\n\nDrawEngine.EventConstants = EventConstants;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = simpleHull_2D;\n/* eslint-disable */\n// Copyright 2001 softSurfer, 2012 Dan Sunday\n// This code may be freely used and modified for any purpose\n// providing that this copyright notice is included with it.\n// SoftSurfer makes no warranty for this code, and cannot be held\n// liable for any real or imagined damage resulting from its use.\n// Users of this code must verify correctness for their application.\n// from http://geomalgorithms.com/a12-_hull-3.html\n\n\nvar X = 0;\nvar Y = 1;\n/**\n * Test if a point is Left|On|Right of an infinite line.\n * @param  {Point2d}  P0 [description]\n * @param  {Point2d}  P1 [description]\n * @param  {Point2d}  P2 [description]\n * @return {Boolean}  Returns > 0 if P2 is left of the line thru P0 & P1,\n *                    Returns < 0 if P2 is to the right\n *                    Returns 0 if P2 is on the line\n */\n\nfunction isLeft(P0, P1, P2) {\n  return (P1[X] - P0[X]) * (P2[Y] - P0[Y]) - (P2[X] - P0[X]) * (P1[Y] - P0[Y]);\n}\n/**\n * Melkman's 2D simple polyline O(n) convex hull algorithm\n * @param  {Point2d[]} verts [description]\n * @return {number[]}       [description]\n */\n\n\nfunction simpleHull_2D(verts) {\n  // initialize a deque D[] from bottom to top so that the\n  // 1st three vertices of P[] are a ccw triangle\n  var H = [];\n  var n = verts.length;\n\n  if (n < 3) {\n    for (var i = 0; i < n; i += 1) {\n      H[i] = i;\n    }\n\n    return H;\n  }\n\n  var D = new Array(2 * n + 1);\n  D.fill(-1);\n  var bot = n - 2;\n  var top = bot + 3; // initial bottom and top deque indices\n\n  D[bot] = D[top] = 2; // 3rd vertex is at both bot and top\n\n  if (isLeft(verts[0], verts[1], verts[2]) > 0) {\n    D[bot + 1] = 0;\n    D[bot + 2] = 1; // ccw vertices are: 2,0,1,2\n  } else {\n    D[bot + 1] = 1;\n    D[bot + 2] = 0; // ccw vertices are: 2,1,0,2\n  } // compute the hull on the deque D[]\n\n\n  for (var _i = 3; _i < n; _i += 1) {\n    // process the rest of vertices\n    // test if next vertex is outside the deque hull\n    if (isLeft(verts[D[bot]], verts[D[bot + 1]], verts[_i]) <= 0 || isLeft(verts[D[top - 1]], verts[D[top]], verts[_i]) <= 0) {\n      // incrementally add an exterior vertex to the deque hull\n      // get the rightmost tangent at the deque bot\n      while (D[bot] >= 0 && D[bot + 1] >= 0 && isLeft(verts[D[bot]], verts[D[bot + 1]], verts[_i]) <= 0) {\n        bot += 1; // remove bot of deque\n      }\n\n      bot -= 1;\n      D[bot] = _i; // insert verts[i] at bot of deque\n      // get the leftmost tangent at the deque top\n\n      while (D[top] >= 0 && D[top + 1] >= 0 && isLeft(verts[D[top - 1]], verts[D[top]], verts[_i]) <= 0) {\n        top -= 1; // pop top of deque\n      }\n\n      top += 1;\n      D[top] = _i; // push verts[i] onto top of deque\n    }\n  } // transcribe deque D[] to the output hull array H[]\n\n\n  var h = 0;\n\n  for (h = 0; h <= top - bot - 1; h += 1) {\n    H[h] = D[bot + h];\n  }\n\n  if (D[bot + h] !== H[0]) {\n    H[h] = D[bot + h];\n  }\n\n  return H;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Rect; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__base_shape_js__ = __webpack_require__(7);\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n/**\n * @typedef {object} RectOptions\n * @property {number} [width=0] Width of the rect in world space coords\n * @property {number} [height=0] Height of the rect in world space coords\n */\n\n/**\n * @class Class for defining a rectangle shape\n * @extends {BaseShape}\n */\n\nvar Rect =\n/*#__PURE__*/\nfunction (_BaseShape) {\n  _inherits(Rect, _BaseShape);\n\n  /**\n   * Creates a new rectangle shape\n   * @param  {RectOptions} [opts]\n   * @return {Rect}\n   */\n  function Rect(opts) {\n    var _this;\n\n    _classCallCheck(this, Rect);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Rect).call(this, opts));\n    _this._width = 0;\n    _this._height = 0;\n\n    if (typeof opts.width !== \"undefined\") {\n      _this.width = opts.width;\n    }\n\n    if (typeof opts.height !== \"undefined\") {\n      _this.height = opts.height;\n    }\n\n    return _this;\n  }\n  /**\n   * Gets the untransformed width/height of the rect\n   * @return {Vec2d} Width/height of the rect\n   */\n\n\n  _createClass(Rect, [{\n    key: \"getDimensions\",\n    value: function getDimensions() {\n      return [this._width, this._height];\n    }\n    /**\n     * Sets the width of the rectangle\n     * @param  {number} width Width of the rect in world-space coordinates\n     * @return {Rect}       this\n     * @fires {Shape#geomChanged}\n     * @throws {Error} If width is not a valid number\n     */\n\n  }, {\n    key: \"_updateAABox\",\n\n    /**\n     * Called when the bounding box requires updating\n     * @private\n     * @override\n     */\n    value: function _updateAABox() {\n      if (this._geomDirty || this._boundsOutOfDate) {\n        __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"initCenterExtents\"](this._aabox, [0, 0], [this._width / 2, this._height / 2]);\n        __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"transformMat2d\"](this._aabox, this._aabox, this.globalXform);\n        this._geomDirty = this._boundsOutOfDate = false;\n      }\n    }\n    /**\n     * Draws the rect using a 2d rendering context. Called by the BaseShape\n     * class\n     * @param  {CanvasRenderingContext2d} ctx 2d rendering context\n     * @override\n     */\n\n  }, {\n    key: \"_draw\",\n    value: function _draw(ctx) {\n      ctx.rect(0 - this.width / 2, 0 - this.height / 2, this.width, this.height);\n    }\n    /**\n     * Called to convert the shape to a serializable JSON object\n     * @return {object}\n     * @override\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Object.assign({\n        type: \"Rect\",\n        width: this.width,\n        height: this.height\n      }, _get(_getPrototypeOf(Rect.prototype), \"toJSON\", this).call(this));\n    }\n  }, {\n    key: \"width\",\n    set: function set(width) {\n      if (typeof width !== \"number\") {\n        throw new Error(\"Width must be a number\");\n      }\n\n      if (width !== this._width) {\n        var prev = this._width;\n        this._width = width;\n        this._geomDirty = true; // dirty needs to be set before firing event\n\n        this.fire(\"changed:geom\", {\n          attr: \"width\",\n          prevVal: prev,\n          currVal: this._width\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Gets the current untransformed width of the rect\n     * @return {number} Width in world-space units\n     */\n    ,\n    get: function get() {\n      return this._width;\n    }\n    /**\n     * Sets the height of the rectangle\n     * @param  {number} height Height of the rect in world-space units\n     * @return {Rect}       this\n     * @fires {Shape#geomChanged}\n     * @throws {Error} If height is not a valid number\n     */\n\n  }, {\n    key: \"height\",\n    set: function set(height) {\n      if (typeof height !== \"number\") {\n        throw new Error(\"Height must be a number\");\n      }\n\n      if (height !== this._height) {\n        var prev = this._height;\n        this._height = height;\n        this._geomDirty = true; // dirty needs to be set before firing event\n\n        this.fire(\"changed:geom\", {\n          attr: \"height\",\n          prevVal: prev,\n          currVal: this._height\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Gets the current untransformed height of the rect\n     * @return {number} Height in world-space units\n     */\n    ,\n    get: function get() {\n      return this._height;\n    }\n  }]);\n\n  return Rect;\n}(__WEBPACK_IMPORTED_MODULE_1__base_shape_js__[\"a\" /* default */]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__package_json__ = __webpack_require__(25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__package_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__package_json__);\n/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_0__package_json__, \"version\")) __webpack_require__.d(__webpack_exports__, \"version\", function() { return __WEBPACK_IMPORTED_MODULE_0__package_json__[\"version\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__engine_shape_builder__ = __webpack_require__(26);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"ShapeBuilder\", function() { return __WEBPACK_IMPORTED_MODULE_1__engine_shape_builder__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__engine_draw_engine__ = __webpack_require__(21);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawEngine\", function() { return __WEBPACK_IMPORTED_MODULE_2__engine_draw_engine__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_aabox2d__ = __webpack_require__(2);\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"AABox2d\", function() { return __WEBPACK_IMPORTED_MODULE_3__core_aabox2d__; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_mat2d__ = __webpack_require__(4);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"Mat2d\", function() { return __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_point2d__ = __webpack_require__(3);\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"Point2d\", function() { return __WEBPACK_IMPORTED_MODULE_5__core_point2d__; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_matrix__ = __webpack_require__(0);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"Mat2\", function() { return __WEBPACK_IMPORTED_MODULE_6_gl_matrix__[\"b\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__style_basic_style__ = __webpack_require__(8);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"BasicStyle\", function() { return __WEBPACK_IMPORTED_MODULE_7__style_basic_style__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__core_vec2d__ = __webpack_require__(9);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"Vec2d\", function() { return __WEBPACK_IMPORTED_MODULE_8__core_vec2d__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__shapes_circle__ = __webpack_require__(38);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"Circle\", function() { return __WEBPACK_IMPORTED_MODULE_9__shapes_circle__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__shapes_rect__ = __webpack_require__(23);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"Rect\", function() { return __WEBPACK_IMPORTED_MODULE_10__shapes_rect__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__shapes_poly__ = __webpack_require__(39);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"Poly\", function() { return __WEBPACK_IMPORTED_MODULE_11__shapes_poly__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__shapes_poly_line__ = __webpack_require__(12);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"PolyLine\", function() { return __WEBPACK_IMPORTED_MODULE_12__shapes_poly_line__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__shapes_point__ = __webpack_require__(40);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"Point\", function() { return __WEBPACK_IMPORTED_MODULE_13__shapes_point__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__math_math__ = __webpack_require__(6);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"Math\", function() { return __WEBPACK_IMPORTED_MODULE_14__math_math__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__math_convex_hull__ = __webpack_require__(22);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"simpleHull_2D\", function() { return __WEBPACK_IMPORTED_MODULE_15__math_convex_hull__[\"a\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9tYXBkLWRyYXcuanM/NGY3OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiXG5cbmV4cG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi4vcGFja2FnZS5qc29uXCJcblxuaW1wb3J0IFNoYXBlQnVpbGRlciBmcm9tIFwiLi9lbmdpbmUvc2hhcGUtYnVpbGRlclwiXG5leHBvcnQgeyBTaGFwZUJ1aWxkZXIgfVxuaW1wb3J0IERyYXdFbmdpbmUgZnJvbSBcIi4vZW5naW5lL2RyYXctZW5naW5lXCJcbmV4cG9ydCB7IERyYXdFbmdpbmUgfVxuaW1wb3J0ICogYXMgQUFCb3gyZCBmcm9tIFwiLi9jb3JlL2FhYm94MmRcIlxuZXhwb3J0IHsgQUFCb3gyZCB9XG5pbXBvcnQgTWF0MmQgZnJvbSBcIi4vY29yZS9tYXQyZFwiXG5leHBvcnQgeyBNYXQyZCB9XG5pbXBvcnQgKiBhcyBQb2ludDJkIGZyb20gXCIuL2NvcmUvcG9pbnQyZFwiXG5leHBvcnQgeyBQb2ludDJkIH1cbmltcG9ydCB7IG1hdDIgYXMgTWF0MiB9IGZyb20gXCJnbC1tYXRyaXhcIlxuZXhwb3J0IHsgTWF0MiB9XG5pbXBvcnQgQmFzaWNTdHlsZSBmcm9tIFwiLi9zdHlsZS9iYXNpYy1zdHlsZVwiXG5leHBvcnQgeyBCYXNpY1N0eWxlIH1cbmltcG9ydCBWZWMyZCBmcm9tIFwiLi9jb3JlL3ZlYzJkXCJcbmV4cG9ydCB7IFZlYzJkIH1cbmltcG9ydCBDaXJjbGUgZnJvbSBcIi4vc2hhcGVzL2NpcmNsZVwiXG5leHBvcnQgeyBDaXJjbGUgfVxuaW1wb3J0IFJlY3QgZnJvbSBcIi4vc2hhcGVzL3JlY3RcIlxuZXhwb3J0IHsgUmVjdCB9XG5pbXBvcnQgUG9seSBmcm9tIFwiLi9zaGFwZXMvcG9seVwiXG5leHBvcnQgeyBQb2x5IH1cbmltcG9ydCBQb2x5TGluZSBmcm9tIFwiLi9zaGFwZXMvcG9seS1saW5lXCJcbmV4cG9ydCB7IFBvbHlMaW5lIH1cbmltcG9ydCBQb2ludCBmcm9tIFwiLi9zaGFwZXMvcG9pbnRcIlxuZXhwb3J0IHsgUG9pbnQgfVxuaW1wb3J0IE1hdGggZnJvbSBcIi4vbWF0aC9tYXRoXCJcbmV4cG9ydCB7IE1hdGggfVxuaW1wb3J0IHsgc2ltcGxlSHVsbF8yRCB9IGZyb20gXCIuL21hdGgvY29udmV4LWh1bGxcIlxuZXhwb3J0IHsgc2ltcGxlSHVsbF8yRCB9XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9tYXBkLWRyYXcuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports) {

eval("module.exports = {\n\t\"name\": \"@mapd/mapd-draw\",\n\t\"description\": \"A Utility Library for drawing and interacting with shapes using canvas\",\n\t\"version\": \"1.1.0\",\n\t\"homepage\": \"https://omnisci.com\",\n\t\"bugs\": \"https://github.com/omnisci/mapd-draw/issues\",\n\t\"main\": \"dist/mapd-draw.js\",\n\t\"author\": \"MapD Technologies\",\n\t\"license\": \"MIT\",\n\t\"engines\": {\n\t\t\"node\": \">=4.0.0\"\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git+https://github.com/omnisci/mapd-draw.git\"\n\t},\n\t\"dependencies\": {\n\t\t\"css-element-queries\": \"^0.4.0\",\n\t\t\"gl-matrix\": \"^2.3.2\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@babel/core\": \"^7.0.0\",\n\t\t\"@babel/plugin-proposal-class-properties\": \"^7.0.0\",\n\t\t\"@babel/plugin-proposal-decorators\": \"^7.0.0\",\n\t\t\"@babel/plugin-proposal-do-expressions\": \"^7.0.0\",\n\t\t\"@babel/plugin-proposal-export-default-from\": \"^7.0.0\",\n\t\t\"@babel/plugin-proposal-export-namespace-from\": \"^7.0.0\",\n\t\t\"@babel/plugin-proposal-function-bind\": \"^7.0.0\",\n\t\t\"@babel/plugin-proposal-function-sent\": \"^7.0.0\",\n\t\t\"@babel/plugin-proposal-json-strings\": \"^7.0.0\",\n\t\t\"@babel/plugin-proposal-logical-assignment-operators\": \"^7.0.0\",\n\t\t\"@babel/plugin-proposal-nullish-coalescing-operator\": \"^7.0.0\",\n\t\t\"@babel/plugin-proposal-numeric-separator\": \"^7.0.0\",\n\t\t\"@babel/plugin-proposal-optional-chaining\": \"^7.0.0\",\n\t\t\"@babel/plugin-proposal-pipeline-operator\": \"^7.0.0\",\n\t\t\"@babel/plugin-proposal-throw-expressions\": \"^7.0.0\",\n\t\t\"@babel/plugin-syntax-dynamic-import\": \"^7.0.0\",\n\t\t\"@babel/plugin-syntax-import-meta\": \"^7.0.0\",\n\t\t\"@babel/preset-env\": \"^7.0.0\",\n\t\t\"@babel/register\": \"^7.0.0\",\n\t\t\"babel-eslint\": \"^10.0.1\",\n\t\t\"babel-loader\": \"^8.0.0\",\n\t\t\"chai\": \"^3.5.0\",\n\t\t\"eslint\": \"^6.0.0\",\n\t\t\"eslint-config-prettier\": \"^6.5.0\",\n\t\t\"eslint-plugin-prettier\": \"^3.1.1\",\n\t\t\"http-server\": \"^0.11.1\",\n\t\t\"json-loader\": \"0.5.4\",\n\t\t\"mocha\": \"^6.2.1\",\n\t\t\"pre-commit\": \"^1.2.2\",\n\t\t\"prettier\": \"1.18.2\",\n\t\t\"webpack\": \"^3.12.0\"\n\t},\n\t\"scripts\": {\n\t\t\"build\": \"npm run build:prod; npm run build:dev\",\n\t\t\"build:prod\": \"npm run webpack\",\n\t\t\"build:dev\": \"npm run webpack:dev\",\n\t\t\"clean\": \"bash scripts/clean.sh\",\n\t\t\"lint:fix\": \"eslint --rule 'prettier/prettier: 0' --fix $(find src -name \\\"*.js\\\" ! -name '*.spec.js'); prettier --write $(find src -name \\\"*.js\\\" ! -name '*.spec.js')\",\n\t\t\"lint\": \"eslint $(find src -name \\\"*.js\\\" ! -name '*.spec.js')\",\n\t\t\"start\": \"npm run build; http-server -p 8080 -o;\",\n\t\t\"watch:dev\": \"node node_modules/webpack/bin/webpack.js --progress --colors --watch --config webpack.dev.config.js\",\n\t\t\"webpack\": \"node node_modules/webpack/bin/webpack.js\",\n\t\t\"webpack:dev\": \"node node_modules/webpack/bin/webpack.js --config webpack.dev.config.js\",\n\t\t\"test\": \"mocha --recursive --require @babel/register\"\n\t},\n\t\"pre-commit\": [\n\t\t\"lint\",\n\t\t\"test\"\n\t]\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vcGFja2FnZS5qc29uPzBjNDUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0EseUdBQXlHO0FBQ3pHO0FBQ0EsMEJBQTBCLHdCQUF3QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG5cdFwibmFtZVwiOiBcIkBtYXBkL21hcGQtZHJhd1wiLFxuXHRcImRlc2NyaXB0aW9uXCI6IFwiQSBVdGlsaXR5IExpYnJhcnkgZm9yIGRyYXdpbmcgYW5kIGludGVyYWN0aW5nIHdpdGggc2hhcGVzIHVzaW5nIGNhbnZhc1wiLFxuXHRcInZlcnNpb25cIjogXCIxLjEuMFwiLFxuXHRcImhvbWVwYWdlXCI6IFwiaHR0cHM6Ly9vbW5pc2NpLmNvbVwiLFxuXHRcImJ1Z3NcIjogXCJodHRwczovL2dpdGh1Yi5jb20vb21uaXNjaS9tYXBkLWRyYXcvaXNzdWVzXCIsXG5cdFwibWFpblwiOiBcImRpc3QvbWFwZC1kcmF3LmpzXCIsXG5cdFwiYXV0aG9yXCI6IFwiTWFwRCBUZWNobm9sb2dpZXNcIixcblx0XCJsaWNlbnNlXCI6IFwiTUlUXCIsXG5cdFwiZW5naW5lc1wiOiB7XG5cdFx0XCJub2RlXCI6IFwiPj00LjAuMFwiXG5cdH0sXG5cdFwicmVwb3NpdG9yeVwiOiB7XG5cdFx0XCJ0eXBlXCI6IFwiZ2l0XCIsXG5cdFx0XCJ1cmxcIjogXCJnaXQraHR0cHM6Ly9naXRodWIuY29tL29tbmlzY2kvbWFwZC1kcmF3LmdpdFwiXG5cdH0sXG5cdFwiZGVwZW5kZW5jaWVzXCI6IHtcblx0XHRcImNzcy1lbGVtZW50LXF1ZXJpZXNcIjogXCJeMC40LjBcIixcblx0XHRcImdsLW1hdHJpeFwiOiBcIl4yLjMuMlwiXG5cdH0sXG5cdFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcblx0XHRcIkBiYWJlbC9jb3JlXCI6IFwiXjcuMC4wXCIsXG5cdFx0XCJAYmFiZWwvcGx1Z2luLXByb3Bvc2FsLWNsYXNzLXByb3BlcnRpZXNcIjogXCJeNy4wLjBcIixcblx0XHRcIkBiYWJlbC9wbHVnaW4tcHJvcG9zYWwtZGVjb3JhdG9yc1wiOiBcIl43LjAuMFwiLFxuXHRcdFwiQGJhYmVsL3BsdWdpbi1wcm9wb3NhbC1kby1leHByZXNzaW9uc1wiOiBcIl43LjAuMFwiLFxuXHRcdFwiQGJhYmVsL3BsdWdpbi1wcm9wb3NhbC1leHBvcnQtZGVmYXVsdC1mcm9tXCI6IFwiXjcuMC4wXCIsXG5cdFx0XCJAYmFiZWwvcGx1Z2luLXByb3Bvc2FsLWV4cG9ydC1uYW1lc3BhY2UtZnJvbVwiOiBcIl43LjAuMFwiLFxuXHRcdFwiQGJhYmVsL3BsdWdpbi1wcm9wb3NhbC1mdW5jdGlvbi1iaW5kXCI6IFwiXjcuMC4wXCIsXG5cdFx0XCJAYmFiZWwvcGx1Z2luLXByb3Bvc2FsLWZ1bmN0aW9uLXNlbnRcIjogXCJeNy4wLjBcIixcblx0XHRcIkBiYWJlbC9wbHVnaW4tcHJvcG9zYWwtanNvbi1zdHJpbmdzXCI6IFwiXjcuMC4wXCIsXG5cdFx0XCJAYmFiZWwvcGx1Z2luLXByb3Bvc2FsLWxvZ2ljYWwtYXNzaWdubWVudC1vcGVyYXRvcnNcIjogXCJeNy4wLjBcIixcblx0XHRcIkBiYWJlbC9wbHVnaW4tcHJvcG9zYWwtbnVsbGlzaC1jb2FsZXNjaW5nLW9wZXJhdG9yXCI6IFwiXjcuMC4wXCIsXG5cdFx0XCJAYmFiZWwvcGx1Z2luLXByb3Bvc2FsLW51bWVyaWMtc2VwYXJhdG9yXCI6IFwiXjcuMC4wXCIsXG5cdFx0XCJAYmFiZWwvcGx1Z2luLXByb3Bvc2FsLW9wdGlvbmFsLWNoYWluaW5nXCI6IFwiXjcuMC4wXCIsXG5cdFx0XCJAYmFiZWwvcGx1Z2luLXByb3Bvc2FsLXBpcGVsaW5lLW9wZXJhdG9yXCI6IFwiXjcuMC4wXCIsXG5cdFx0XCJAYmFiZWwvcGx1Z2luLXByb3Bvc2FsLXRocm93LWV4cHJlc3Npb25zXCI6IFwiXjcuMC4wXCIsXG5cdFx0XCJAYmFiZWwvcGx1Z2luLXN5bnRheC1keW5hbWljLWltcG9ydFwiOiBcIl43LjAuMFwiLFxuXHRcdFwiQGJhYmVsL3BsdWdpbi1zeW50YXgtaW1wb3J0LW1ldGFcIjogXCJeNy4wLjBcIixcblx0XHRcIkBiYWJlbC9wcmVzZXQtZW52XCI6IFwiXjcuMC4wXCIsXG5cdFx0XCJAYmFiZWwvcmVnaXN0ZXJcIjogXCJeNy4wLjBcIixcblx0XHRcImJhYmVsLWVzbGludFwiOiBcIl4xMC4wLjFcIixcblx0XHRcImJhYmVsLWxvYWRlclwiOiBcIl44LjAuMFwiLFxuXHRcdFwiY2hhaVwiOiBcIl4zLjUuMFwiLFxuXHRcdFwiZXNsaW50XCI6IFwiXjYuMC4wXCIsXG5cdFx0XCJlc2xpbnQtY29uZmlnLXByZXR0aWVyXCI6IFwiXjYuNS4wXCIsXG5cdFx0XCJlc2xpbnQtcGx1Z2luLXByZXR0aWVyXCI6IFwiXjMuMS4xXCIsXG5cdFx0XCJodHRwLXNlcnZlclwiOiBcIl4wLjExLjFcIixcblx0XHRcImpzb24tbG9hZGVyXCI6IFwiMC41LjRcIixcblx0XHRcIm1vY2hhXCI6IFwiXjYuMi4xXCIsXG5cdFx0XCJwcmUtY29tbWl0XCI6IFwiXjEuMi4yXCIsXG5cdFx0XCJwcmV0dGllclwiOiBcIjEuMTguMlwiLFxuXHRcdFwid2VicGFja1wiOiBcIl4zLjEyLjBcIlxuXHR9LFxuXHRcInNjcmlwdHNcIjoge1xuXHRcdFwiYnVpbGRcIjogXCJucG0gcnVuIGJ1aWxkOnByb2Q7IG5wbSBydW4gYnVpbGQ6ZGV2XCIsXG5cdFx0XCJidWlsZDpwcm9kXCI6IFwibnBtIHJ1biB3ZWJwYWNrXCIsXG5cdFx0XCJidWlsZDpkZXZcIjogXCJucG0gcnVuIHdlYnBhY2s6ZGV2XCIsXG5cdFx0XCJjbGVhblwiOiBcImJhc2ggc2NyaXB0cy9jbGVhbi5zaFwiLFxuXHRcdFwibGludDpmaXhcIjogXCJlc2xpbnQgLS1ydWxlICdwcmV0dGllci9wcmV0dGllcjogMCcgLS1maXggJChmaW5kIHNyYyAtbmFtZSBcXFwiKi5qc1xcXCIgISAtbmFtZSAnKi5zcGVjLmpzJyk7IHByZXR0aWVyIC0td3JpdGUgJChmaW5kIHNyYyAtbmFtZSBcXFwiKi5qc1xcXCIgISAtbmFtZSAnKi5zcGVjLmpzJylcIixcblx0XHRcImxpbnRcIjogXCJlc2xpbnQgJChmaW5kIHNyYyAtbmFtZSBcXFwiKi5qc1xcXCIgISAtbmFtZSAnKi5zcGVjLmpzJylcIixcblx0XHRcInN0YXJ0XCI6IFwibnBtIHJ1biBidWlsZDsgaHR0cC1zZXJ2ZXIgLXAgODA4MCAtbztcIixcblx0XHRcIndhdGNoOmRldlwiOiBcIm5vZGUgbm9kZV9tb2R1bGVzL3dlYnBhY2svYmluL3dlYnBhY2suanMgLS1wcm9ncmVzcyAtLWNvbG9ycyAtLXdhdGNoIC0tY29uZmlnIHdlYnBhY2suZGV2LmNvbmZpZy5qc1wiLFxuXHRcdFwid2VicGFja1wiOiBcIm5vZGUgbm9kZV9tb2R1bGVzL3dlYnBhY2svYmluL3dlYnBhY2suanNcIixcblx0XHRcIndlYnBhY2s6ZGV2XCI6IFwibm9kZSBub2RlX21vZHVsZXMvd2VicGFjay9iaW4vd2VicGFjay5qcyAtLWNvbmZpZyB3ZWJwYWNrLmRldi5jb25maWcuanNcIixcblx0XHRcInRlc3RcIjogXCJtb2NoYSAtLXJlY3Vyc2l2ZSAtLXJlcXVpcmUgQGJhYmVsL3JlZ2lzdGVyXCJcblx0fSxcblx0XCJwcmUtY29tbWl0XCI6IFtcblx0XHRcImxpbnRcIixcblx0XHRcInRlc3RcIlxuXHRdXG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL3BhY2thZ2UuanNvblxuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ShapeBuilder; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interactions_interact_utils__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_point2d__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__style_basic_style__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__draw_engine__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_mat2d__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shapes_poly_line__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__interactions_vert_editable_shape__ = __webpack_require__(36);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__interactions_xform_shape__ = __webpack_require__(37);\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\n\nvar scaleSvg = \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cg transform='rotate(<degrees>,24,24)'%3E%3Cpolygon style='fill:%23ffffff;' points='16,20 16,12 4,24 16,36 16,28 32,28 32,36 44,24 32,12 32,20 '/%3E%3Cpolygon points='14,22 14,17 7,24 14,31 14,26 34,26 34,31 41,24 34,17 34,22 '/%3E%3C/g%3E%3C/svg%3E\\\") no-repeat\";\nvar rotateSvg = \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cg transform='rotate(<degrees>,24,24)'%3E%3Cpath style='fill:%23ffffff;' d='M25.9,4C16.6,4,8.8,11.2,7.4,20.8H6.7H3.3l1.6,2.9l3.8,7.1l1.8,3.3l1.8-3.3l3.8-7.1l1.6-2.9h-3.3h-0.1 c1.3-5.7,6.1-9.9,11.7-9.9c8,0,12.1,4.4,12.1,13.1c0,7.2-5.4,13.1-12.1,13.1h-2v2V42v2h2c10.4,0,18.8-9,18.8-20 C44.7,11.7,37.5,4,25.9,4L25.9,4z'/%3E%3Cpath d='M25.9,6c10.5,0,16.8,6.7,16.8,18c0,9.9-7.5,18-16.8,18v-2.9c7.8,0,14.1-6.8,14.1-15.1c0-5.6-1.8-15.1-14.1-15.1 c-7.4,0-13.4,6.1-14,13.9h2.4l-3.8,7.1l-3.8-7.1h2.5C9.7,13.4,17,6,25.9,6'/%3E%3C/g%3E%3C/svg%3E\\\") no-repeat\";\nvar addSvg = \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpolygon style='fill:%23ffffff;' points='31.2,28 24.8,28 24.8,32.8 20,32.8 20,39.2 24.8,39.2 24.8,44 31.2,44 31.2,39.2 36,39.2 36,32.8 31.2,32.8 '/%3E %3Cpolygon style='fill:%23ffffff' points='12,32 12,4 32.3,24.3 20,24.3 19.7,24.6 '/%3E%3Cpolygon points='13.8,8.2 13.8,27.8 19,22.8 19.2,22.5 28,22.5 '/%3E%3Cpolyline points='29.6,29.6 29.6,34.4 34.4,34.4 34.4,37.6 29.6,37.6 29.6,42.4 26.4,42.4 26.4,37.6 21.6,37.6 21.6,34.4 26.4,34.4 26.4,29.6 29.6,29.6  '/%3E%3C/svg%3E\\\") no-repeat\";\nvar removeSvg = \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Crect style='fill:%23ffffff;' x='20' y='32.8' width='16' height='6.4'/%3E%3Cpolygon  style='fill:%23ffffff;' points='12,32 12,4 32.3,24.3 20,24.3 19.7,24.6 '/%3E%3Cpolygon points='13.8,8.2 13.8,27.8 19,22.8 19.2,22.5 28,22.5 '/%3E%3Cpolyline points='34.4,34.4 34.4,37.6 21.6,37.6 21.6,34.4 '/%3E%3C/svg%3E\\\") no-repeat\";\nvar repositionSvg = \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath style='fill:%23ffffff;' d='M24,17.5c-3.6,0-6.5,2.9-6.5,6.5s2.9,6.5,6.5,6.5s6.5-2.9,6.5-6.5S27.6,17.5,24,17.5L24,17.5z'/%3E%3Cpath style='fill:%23ffffff;' d='M24,4L4,24l20,20l20-20L24,4z M31.5,31.5h-15v-15h15V31.5z'/%3E%3Cpolygon points='17,34 24,40.5 31,34  '/%3E%3Cpolygon points='31,14 24,7.5 17,14     '/%3E%3Cpolygon points='14,17 7.5,24 14,31   '/%3E%3Cpolygon points='34,31 40.5,24 34,17    '/%3E%3Cpath d='M24,20c2.2,0,4,1.8,4,4s-1.8,4-4,4s-4-1.8-4-4S21.8,20,24,20'/%3E%3C/svg%3E\\\") no-repeat\";\nvar EventConstants = {\n  SELECTION_CHANGED: \"draw:selectionChanged\",\n  DRAG_BEGIN: \"draw:drag:begin\",\n  DRAG_END: \"draw:drag:end\"\n};\nvar Constants = {\n  SVG_OFFSET: -14,\n  QUICK_CLICK_TIME: 500,\n  RIGHT_ANGLE: 90,\n  STRAIGHT_ANGLE: 180,\n  FORTY_FIVE_ANGLE: 45\n};\nvar tmpPt1 = __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"create\"](0, 0);\nvar tmpPt2 = __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"create\"](0, 0);\nvar defaultXformStyle = {\n  fillColor: \"white\",\n  strokeColor: \"black\",\n  strokeWidth: 2\n};\n\nfunction inCanvas(canvas, x, y) {\n  var domrect = canvas.getBoundingClientRect();\n  var localX = 0;\n  var localY = 0;\n  var isInCanvas = (localX = x - domrect.left - canvas.clientLeft) >= 0 && localX <= canvas.clientWidth && (localY = y - domrect.top - canvas.clientTop) >= 0 && localY <= canvas.clientHeight;\n  return isInCanvas;\n}\n\nfunction getLocalMousePos(out, elem, event) {\n  var domrect = elem.getBoundingClientRect();\n  out[0] = event.clientX - domrect.left - elem.clientLeft;\n  out[1] = event.clientY - domrect.top - elem.clientTop;\n}\n\nfunction transformSelectedShape(canvas, event, selectedInfo, camera) {\n  getLocalMousePos(tmpPt1, canvas, event);\n  __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"transformMat2d\"](tmpPt2, tmpPt1, camera.screenToWorldMatrix);\n  var shape = selectedInfo.shape;\n\n  if (shape instanceof __WEBPACK_IMPORTED_MODULE_7__interactions_xform_shape__[\"a\" /* default */]) {\n    __WEBPACK_IMPORTED_MODULE_0__interactions_interact_utils__[\"a\" /* transformXformShape */](shape, selectedInfo, tmpPt1, tmpPt2, camera);\n  } else if (shape instanceof __WEBPACK_IMPORTED_MODULE_6__interactions_vert_editable_shape__[\"a\" /* default */]) {\n    __WEBPACK_IMPORTED_MODULE_0__interactions_interact_utils__[\"c\" /* translateVert */](shape, selectedInfo, tmpPt1, tmpPt2, camera);\n  } else {\n    __WEBPACK_IMPORTED_MODULE_0__interactions_interact_utils__[\"b\" /* translateShape */](shape, selectedInfo, tmpPt1, tmpPt2, camera);\n  }\n}\n\nfunction addEventKeysToSelectedInfo(event, selectedInfo) {\n  selectedInfo.keys = {\n    altKey: event.altKey,\n    ctrlKey: event.ctrlKey,\n    shiftKey: event.shiftKey,\n    metaKey: event.metaKey\n  };\n}\n\nfunction getSelectedObjsFromMap(selectionMap) {\n  var selectedObjs = [];\n  selectionMap.forEach(function (subshape, shape) {\n    selectedObjs.push(shape);\n  });\n  return selectedObjs;\n}\n\nfunction _selectShape(selectedShape, sortedShapes, currSelectedShapes, selectStyle, xformStyle, selectOpts) {\n  var fireObject = {\n    unselectedShapes: getSelectedObjsFromMap(currSelectedShapes)\n  };\n  clearSelectedShapes(currSelectedShapes);\n  selectedShape.save();\n  var maxZ = sortedShapes[sortedShapes.length - 1].zIndex;\n  selectedShape.zIndex = maxZ + 1;\n  __WEBPACK_IMPORTED_MODULE_2__style_basic_style__[\"a\" /* default */].copyBasicStyle(selectStyle, selectedShape);\n  selectedShape.selected = true; // const dimensions = selectedShape.getDimensions()\n\n  var newSelectShape = null;\n\n  if (selectOpts.scalable || selectOpts.rotatable) {\n    newSelectShape = new __WEBPACK_IMPORTED_MODULE_7__interactions_xform_shape__[\"a\" /* default */](xformStyle || defaultXformStyle, selectOpts);\n    selectedShape.addChildXform(newSelectShape);\n  }\n\n  currSelectedShapes.set(selectedShape, newSelectShape);\n  fireObject.selectedShapes = [selectedShape];\n  return fireObject;\n}\n\nfunction clearSelectedShapes(selectedShapeMap) {\n  selectedShapeMap.forEach(function (selectedShape, shape) {\n    shape.restore();\n    shape.selected = false;\n    shape.removeChildXform(selectedShape);\n  });\n  selectedShapeMap.clear();\n}\n\nfunction clearSpecificShapes(selectedShapeMap, shapes) {\n  var clearedShapes = [];\n  shapes.forEach(function (shape) {\n    var selectedShape = selectedShapeMap.get(shape);\n    shape.restore();\n    shape.selected = false;\n    shape.removeChildXform(selectedShape);\n    selectedShapeMap[\"delete\"](shape);\n    clearedShapes.push(shape);\n  });\n  return clearedShapes;\n}\n\nvar hideCursor = function hideCursor() {\n  var cursor = document.getElementById(\"cursor\");\n\n  if (cursor !== null) {\n    cursor.style.display = \"none\";\n  }\n};\n\nvar showCursor = function showCursor() {\n  var cursor = document.getElementById(\"cursor\");\n\n  if (cursor !== null) {\n    cursor.style.display = \"block\";\n  }\n};\n\nvar hideCursorWithPointer = function hideCursorWithPointer(e) {\n  e.target.parentNode.style.cursor = \"default\";\n  hideCursor();\n};\n\nvar showCursorWithPointer = function showCursorWithPointer(e) {\n  e.target.parentNode.style.cursor = \"none\";\n  showCursor();\n}; // understands how to return mouse coordinates as an object in the format {x: <X-COORD>, y: <Y-COORD>}\n// accepts a mouse event and a DOM element as arguments\n\n\nfunction getMouseCoordinates(e, target) {\n  var canvas = document.querySelector(\"\".concat(\"#\".concat(target.id, \" canvas\")));\n  var coords = {\n    x: e.offsetX + canvas.offsetLeft,\n    y: e.offsetY + canvas.offsetTop\n  };\n  return coords;\n} // understands how to append custom cursors to the DOM\n// accepts a mouse event, a DOM element, a cursorStyle, and pixel offsets as arguments\n\n\nfunction appendCustomCursor(_event, target, cursorStyle) {\n  var offsetX = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Constants.SVG_OFFSET;\n  var offsetY = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Constants.SVG_OFFSET;\n  var cursor = document.getElementById(\"cursor\");\n  var mouse = getMouseCoordinates(_event, target);\n\n  if (cursor === null) {\n    var newCursor = document.createElement(\"span\");\n    newCursor.setAttribute(\"id\", \"cursor\");\n    newCursor.setAttribute(\"style\", \"position: absolute; top: \".concat(\"\".concat(mouse.y, \"px\"), \"; left: \", \"\".concat(mouse.x, \"px\"), \"; width: 28px; height: 28px; background: \", cursorStyle, \"; cursor: none; z-index: 10; pointer-events: none; transform: translate(\").concat(offsetX, \"px, \").concat(offsetY, \"px)\"));\n    target.appendChild(newCursor);\n  } else if (cursor.style.background === cursorStyle) {\n    updateCursorPosition(_event, target);\n  } else {\n    cursor.style.background = cursorStyle;\n    updateCursorPosition(_event, target);\n  }\n} // understands how to remove the custom cursor from the DOM\n\n\nfunction removeCustomCursor() {\n  var cursor = document.getElementById(\"cursor\");\n\n  if (cursor !== null) {\n    cursor.parentNode.removeChild(cursor);\n  }\n} // understands how to change the position of the custom cursor on the page\n// accepts a mouse event and a DOM element as arguments\n\n\nfunction updateCursorPosition(_event, target) {\n  var cursor = document.getElementById(\"cursor\");\n  var mouse = getMouseCoordinates(_event, target);\n\n  if (cursor !== null) {\n    cursor.style.top = \"\".concat(\"\".concat(mouse.y, \"px\"));\n    cursor.style.left = \"\".concat(\"\".concat(mouse.x, \"px\"));\n  }\n}\n\nvar ShapeBuilder =\n/*#__PURE__*/\nfunction (_DrawEngine) {\n  _inherits(ShapeBuilder, _DrawEngine);\n\n  function ShapeBuilder() {\n    _classCallCheck(this, ShapeBuilder);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ShapeBuilder).apply(this, arguments));\n  }\n\n  _createClass(ShapeBuilder, [{\n    key: \"_mousedownCB\",\n    value: function _mousedownCB(event) {\n      if (!inCanvas(this._drawCanvas, event.clientX, event.clientY)) {\n        return;\n      }\n\n      this.timer = performance.now();\n      __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"set\"](tmpPt1, event.offsetX, event.offsetY);\n      __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"transformMat2d\"](tmpPt2, tmpPt1, this._camera.screenToWorldMatrix);\n      var worldToScreenMatrix = this._camera.worldToScreenMatrix;\n      var shapes = this.sortedShapes;\n      var i = -1;\n      var selectedShape = null;\n      var selectedInfo = null;\n\n      for (i = shapes.length - 1; i >= 0; i -= 1) {\n        var shapeInfo = this._objects.get(shapes[i]);\n\n        if (shapes[i].selected) {\n          selectedShape = this._selectedShapes.get(shapes[i]);\n          selectedInfo = shapeInfo;\n          var hitInfo = null;\n\n          if (selectedShape && (hitInfo = selectedShape.containsPoint(tmpPt1, tmpPt2, worldToScreenMatrix, this._drawCtx)).hit) {\n            if (selectedShape instanceof __WEBPACK_IMPORTED_MODULE_6__interactions_vert_editable_shape__[\"a\" /* default */] && event.altKey && hitInfo.controlIndex < shapes[i].numVerts) {\n              shapes[i].removeVert(hitInfo.controlIndex);\n              selectedShape = null;\n            } else {\n              var localXform = selectedShape.parent.localXform;\n              var invLocalXform = __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].clone(localXform);\n              __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].invert(invLocalXform, invLocalXform);\n              var startObjPos = __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"clone\"](tmpPt2);\n              __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"transformMat2d\"](startObjPos, startObjPos, invLocalXform);\n              this._dragInfo = Object.assign({\n                rotate: Boolean(hitInfo.rotate),\n                controlIndex: hitInfo.controlIndex,\n                startObjectPos: startObjPos,\n                worldToObjectMatrix: invLocalXform,\n                startLocalPos: selectedShape.parent.getPosition(),\n                startLocalScale: selectedShape.parent.getScale(),\n                startLocalRot: selectedShape.parent.getRotation(),\n                shapeWidth: selectedShape.parent.width,\n                shapeHeight: selectedShape.parent.height\n              }, selectedInfo);\n            }\n\n            break;\n          } else if (shapes[i].containsPoint(tmpPt1, tmpPt2, worldToScreenMatrix, this._drawCtx)) {\n            selectedShape = shapes[i];\n            break;\n          }\n        } // else if (shapeInfo.selectable && shapes[i].containsPoint(tmpPt1, tmpPt2, worldToScreenMatrix, this._drawCtx)) {\n        //   selectedShape = shapes[i]\n        //   selectedInfo = shapeInfo\n        //   const selectEventObj = selectShape(selectedShape, shapes, this._selectedShapes, this._selectStyle, this._xformStyle, selectedInfo)\n        //   this.fire(EventConstants.SELECTION_CHANGED, selectEventObj)\n        //   break\n        // }\n\n      }\n\n      if (i < 0 && this._selectedShapes.size) {\n        if (this._selectedShapes.size) {\n          this.fire(EventConstants.SELECTION_CHANGED, {\n            unselectedShapes: getSelectedObjsFromMap(this._selectedShapes),\n            selectedShapes: []\n          });\n        }\n\n        this._dragInfo = null;\n        clearSelectedShapes(this._selectedShapes);\n      } else if (selectedShape && selectedInfo && (selectedInfo.movable || selectedInfo.rotatable || selectedInfo.scalable)) {\n        var canvas = document.querySelector(\"\".concat(\"#\".concat(this._parent.id, \" > canvas\")));\n\n        if (canvas === null) {\n          this._parent.addEventListener(\"mouseout\", hideCursor);\n\n          this._parent.addEventListener(\"mouseover\", showCursor);\n        } else {\n          canvas.addEventListener(\"mouseout\", hideCursorWithPointer);\n          canvas.addEventListener(\"mouseover\", showCursorWithPointer);\n        }\n\n        if (!this._dragInfo && selectedInfo.movable) {\n          this._dragInfo = {\n            startLocalPos: selectedShape.getPosition()\n          };\n        }\n\n        if (this._dragInfo) {\n          this._dragInfo.shape = selectedShape;\n          this._dragInfo.startPos = __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"clone\"](tmpPt1);\n          this._dragInfo.startWorldPos = __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"clone\"](tmpPt2);\n          this._dragInfo.objectToWorldMatrix = __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].clone(selectedShape.globalXform);\n          addEventKeysToSelectedInfo(event, this._dragInfo);\n          event.stopImmediatePropagation();\n          this.fire(EventConstants.DRAG_BEGIN, {\n            shapes: getSelectedObjsFromMap(this._selectedShapes)\n          });\n        }\n\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"_mouseupCB\",\n    value: function _mouseupCB(event) {\n      if (this._dragInfo && this._dragInfo.shape) {\n        event.stopImmediatePropagation();\n        event.preventDefault();\n        var canvas = document.querySelector(\"\".concat(\"#\".concat(this._parent.id, \" > canvas\")));\n\n        if (canvas === null) {\n          this._parent.removeEventListener(\"mouseout\", hideCursor);\n\n          this._parent.removeEventListener(\"mouseover\", showCursor);\n        } else {\n          canvas.removeEventListener(\"mouseout\", hideCursorWithPointer);\n          canvas.removeEventListener(\"mouseover\", showCursorWithPointer);\n        }\n\n        this._dragInfo = null;\n        this.fire(EventConstants.DRAG_END, {\n          shapes: getSelectedObjsFromMap(this._selectedShapes)\n        });\n      } else if (performance.now() - this.timer < Constants.QUICK_CLICK_TIME) {\n        // this is a relatively quick click\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"set\"](tmpPt1, event.offsetX, event.offsetY);\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"transformMat2d\"](tmpPt2, tmpPt1, this._camera.screenToWorldMatrix);\n        var worldToScreenMatrix = this._camera.worldToScreenMatrix;\n        var shapes = this.sortedShapes;\n        var selectedShape = null;\n        var selectedInfo = null;\n\n        for (var i = shapes.length - 1; i >= 0; i -= 1) {\n          selectedInfo = this._objects.get(shapes[i]);\n\n          if (selectedInfo.selectable && shapes[i].containsPoint(tmpPt1, tmpPt2, worldToScreenMatrix, this._drawCtx)) {\n            selectedShape = shapes[i];\n            break;\n          }\n        }\n\n        if (selectedShape && !selectedShape.selected) {\n          var selectEventObj = _selectShape(selectedShape, shapes, this._selectedShapes, this._selectStyle, this._xformStyle, selectedInfo);\n\n          this.fire(EventConstants.SELECTION_CHANGED, selectEventObj);\n        }\n      }\n    }\n  }, {\n    key: \"_mousemoveCB\",\n    value: function _mousemoveCB(event) {\n      if (!inCanvas(this._drawCanvas, event.clientX, event.clientY) && !this._dragInfo) {\n        return;\n      }\n\n      if (this._dragInfo && this._dragInfo.shape) {\n        updateCursorPosition(event, this._parent);\n        addEventKeysToSelectedInfo(event, this._dragInfo);\n        transformSelectedShape(this._drawCanvas, event, this._dragInfo, this._camera);\n        event.stopImmediatePropagation();\n        event.preventDefault();\n      } else if (!event.buttons && this._selectedShapes.size) {\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"set\"](tmpPt1, event.offsetX, event.offsetY);\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"transformMat2d\"](tmpPt2, tmpPt1, this._camera.screenToWorldMatrix);\n        var worldToScreenMatrix = this._camera.worldToScreenMatrix;\n        var shapes = this.sortedShapes;\n        var i = 0;\n\n        var flipy = this._camera.isYFlipped();\n\n        for (i = shapes.length - 1; i >= 0; i -= 1) {\n          if (shapes[i].selected) {\n            var selectInfo = this._objects.get(shapes[i]);\n\n            var selectedShape = this._selectedShapes.get(shapes[i]);\n\n            var hitInfo = null;\n            this._parent.style.cursor = \"none\"; // forEach not supported on nodelist in IE/Edge\n\n            for (var j = 0; j < this._parent.childNodes.length; j += 1) {\n              this._parent.childNodes[j].style.cursor = \"none\";\n\n              if (this._parent.childNodes[j].nodeName.toLowerCase() !== \"canvas\") {\n                this._parent.childNodes[j].style.pointerEvents = \"none\";\n              }\n            }\n\n            if (selectedShape && (hitInfo = selectedShape.containsPoint(tmpPt1, tmpPt2, worldToScreenMatrix, this._drawCtx)).hit) {\n              if (selectedShape instanceof __WEBPACK_IMPORTED_MODULE_7__interactions_xform_shape__[\"a\" /* default */]) {\n                if (hitInfo.rotate) {\n                  var degrees = shapes[i].getRotation();\n\n                  if (flipy) {\n                    degrees *= -1;\n\n                    if (hitInfo.controlIndex === 1) {\n                      degrees -= Constants.RIGHT_ANGLE;\n                    } else if (hitInfo.controlIndex === 0) {\n                      degrees += Constants.STRAIGHT_ANGLE;\n                    } else if (hitInfo.controlIndex === 2) {\n                      degrees += Constants.RIGHT_ANGLE;\n                    }\n                  } else if (hitInfo.controlIndex === 0) {\n                    degrees -= Constants.RIGHT_ANGLE;\n                  } else if (hitInfo.controlIndex === 1) {\n                    degrees += Constants.STRAIGHT_ANGLE;\n                  } else if (hitInfo.controlIndex === 3) {\n                    // eslint-disable-line no-magic-numbers\n                    degrees += Constants.RIGHT_ANGLE;\n                  }\n\n                  appendCustomCursor(event, this._parent, \"\".concat(rotateSvg.replace(/<degrees>/g, \"\".concat(degrees))));\n                } else if (hitInfo.controlIndex < 4) {\n                  // eslint-disable-line no-magic-numbers\n                  if (hitInfo.controlIndex === 0 || hitInfo.controlIndex === 3) {\n                    // eslint-disable-line no-magic-numbers\n                    appendCustomCursor(event, this._parent, \"\".concat(scaleSvg.replace(/<degrees>/g, \"\".concat(-shapes[i].getRotation() - Constants.FORTY_FIVE_ANGLE))));\n                  } else if (hitInfo.controlIndex === 1 || hitInfo.controlIndex === 2) {\n                    appendCustomCursor(event, this._parent, \"\".concat(scaleSvg.replace(/<degrees>/g, \"\".concat(-shapes[i].getRotation() + Constants.FORTY_FIVE_ANGLE))));\n                  }\n                } else if (hitInfo.controlIndex % 2 === 0) {\n                  appendCustomCursor(event, this._parent, \"\".concat(scaleSvg.replace(/<degrees>/g, \"\".concat(-shapes[i].getRotation()))));\n                } else {\n                  appendCustomCursor(event, this._parent, \"\".concat(scaleSvg.replace(/<degrees>/g, \"\".concat(-shapes[i].getRotation() + Constants.RIGHT_ANGLE))));\n                }\n              } else if (selectedShape instanceof __WEBPACK_IMPORTED_MODULE_6__interactions_vert_editable_shape__[\"a\" /* default */]) {\n                this._parent.style.cursor = \"none\"; // forEach not supported on nodelist in IE/Edge\n\n                for (var _j = 0; _j < this._parent.childNodes.length; _j += 1) {\n                  this._parent.childNodes[_j].style.cursor = \"none\";\n\n                  if (this._parent.childNodes[_j].nodeName.toLowerCase() !== \"canvas\") {\n                    this._parent.childNodes[_j].style.pointerEvents = \"none\";\n                  }\n                }\n\n                if (hitInfo.controlIndex >= shapes[i].numVerts) {\n                  appendCustomCursor(event, this._parent, addSvg, -8, -6); // eslint-disable-line no-magic-numbers\n                } else if (event.altKey) {\n                  appendCustomCursor(event, this._parent, removeSvg, -8, -6); // eslint-disable-line no-magic-numbers\n                } else {\n                  appendCustomCursor(event, this._parent, repositionSvg, Constants.SVG_OFFSET, Constants.SVG_OFFSET);\n                }\n              }\n\n              event.stopImmediatePropagation();\n              event.preventDefault();\n              break;\n            } else if (shapes[i].containsPoint(tmpPt1, tmpPt2, worldToScreenMatrix, this._drawCtx)) {\n              if (selectInfo && selectInfo.movable) {\n                var cursor = document.getElementById(\"cursor\");\n\n                if (cursor !== null) {\n                  cursor.parentNode.removeChild(cursor);\n                }\n\n                this._parent.style.cursor = \"move\";\n\n                for (var _j2 = 0; _j2 < this._parent.childNodes.length; _j2 += 1) {\n                  this._parent.childNodes[_j2].style.cursor = \"move\";\n                }\n\n                event.stopImmediatePropagation();\n                event.preventDefault();\n              }\n\n              break;\n            }\n          }\n        }\n\n        if (i < 0) {\n          removeCustomCursor();\n          this._parent.style.cursor = \"default\"; // forEach not supported on nodelist in IE/Edge\n\n          for (var _j3 = 0; _j3 < this._parent.childNodes.length; _j3 += 1) {\n            this._parent.childNodes[_j3].style.cursor = \"default\";\n\n            if (this._parent.childNodes[_j3].nodeName.toLowerCase() !== \"canvas\") {\n              this._parent.childNodes[_j3].style.pointerEvents = \"auto\";\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_clickCB\",\n    value: function _clickCB() {// noop\n    }\n  }, {\n    key: \"_dblclickCB\",\n    value: function _dblclickCB(event) {\n      if (!inCanvas(this._drawCanvas, event.clientX, event.clientY)) {\n        return;\n      }\n\n      __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"set\"](tmpPt1, event.offsetX, event.offsetY);\n      __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"transformMat2d\"](tmpPt2, tmpPt1, this._camera.screenToWorldMatrix);\n      var worldToScreenMatrix = this._camera.worldToScreenMatrix;\n      var shapes = this.sortedShapes;\n      var i = -1;\n\n      for (i = shapes.length - 1; i >= 0; i -= 1) {\n        var shapeInfo = this._objects.get(shapes[i]);\n\n        if (shapeInfo.selectable && shapes[i].containsPoint(tmpPt1, tmpPt2, worldToScreenMatrix, this._drawCtx)) {\n          if (shapeInfo.editable && shapes[i] instanceof __WEBPACK_IMPORTED_MODULE_5__shapes_poly_line__[\"a\" /* default */]) {\n            var selectedShape = shapes[i];\n            var doXform = false;\n\n            if (shapes[i].selected) {\n              var interactiveShape = this._selectedShapes.get(shapes[i]);\n\n              if (interactiveShape) {\n                selectedShape.restore();\n                selectedShape.removeChildXform(interactiveShape);\n                doXform = !(interactiveShape instanceof __WEBPACK_IMPORTED_MODULE_7__interactions_xform_shape__[\"a\" /* default */]);\n              }\n            }\n\n            selectedShape.selected = true;\n            selectedShape.save();\n            var maxZ = shapes[shapes.length - 1].zIndex;\n            selectedShape.zIndex = maxZ + 1;\n            __WEBPACK_IMPORTED_MODULE_2__style_basic_style__[\"a\" /* default */].copyBasicStyle(this._selectStyle, selectedShape);\n            var newSelectShape = null;\n\n            if (doXform) {\n              if (shapeInfo.rotatable || shapeInfo.scalable) {\n                newSelectShape = new __WEBPACK_IMPORTED_MODULE_7__interactions_xform_shape__[\"a\" /* default */](this._xformStyle || defaultXformStyle, shapeInfo);\n                selectedShape.addChildXform(newSelectShape);\n              }\n            } else {\n              newSelectShape = new __WEBPACK_IMPORTED_MODULE_6__interactions_vert_editable_shape__[\"a\" /* default */](selectedShape, this._xformStyle);\n              selectedShape.addChildXform(newSelectShape);\n            }\n\n            this._selectedShapes.set(selectedShape, newSelectShape);\n          } else if (!shapes[i].selected) {\n            var selectEventObj = _selectShape(shapes[i], shapes, this._selectedShapes, this._selectStyle, this._xformStyle, shapeInfo);\n\n            this.fire(EventConstants.SELECTION_CHANGED, selectEventObj);\n          }\n\n          break;\n        }\n      }\n\n      if (i < 0 && this._selectedShapes.size) {\n        if (this._selectedShapes.size) {\n          this.fire(EventConstants.SELECTION_CHANGED, {\n            unselectedShapes: getSelectedObjsFromMap(this._selectedShapes),\n            selectedShapes: []\n          });\n        }\n\n        this._dragInfo = null;\n        clearSelectedShapes(this._selectedShapes);\n      } else {\n        event.stopImmediatePropagation();\n      }\n\n      event.preventDefault();\n    }\n  }, {\n    key: \"_mouseoverCB\",\n    value: function _mouseoverCB() {// noop\n    }\n  }, {\n    key: \"_mouseoutCB\",\n    value: function _mouseoutCB() {// noop\n    }\n  }, {\n    key: \"_init\",\n    value: function _init(parent, opts) {\n      this._activated = opts && opts.enableInteractions;\n\n      _get(_getPrototypeOf(ShapeBuilder.prototype), \"_init\", this).call(this, parent, opts, this._activated);\n\n      var myevents = Object.getOwnPropertyNames(EventConstants).map(function (event) {\n        return EventConstants[event];\n      });\n      this.registerEvents(myevents);\n      this._dragInfo = null;\n      this._selectedShapes = new Map();\n      this._selectStyle = new __WEBPACK_IMPORTED_MODULE_2__style_basic_style__[\"a\" /* default */](opts && opts.selectStyle ? opts.selectStyle : {\n        fillColor: \"orange\"\n      });\n      this._xformStyle = new __WEBPACK_IMPORTED_MODULE_2__style_basic_style__[\"a\" /* default */](opts && opts.xformStyle ? opts.xformStyle : {\n        fillColor: \"white\",\n        strokeColor: \"black\",\n        strokeWidth: 2\n      });\n      this.timer = 0;\n    }\n  }, {\n    key: \"_renderShapes\",\n    value: function _renderShapes(ctx, drawShapes, camera) {\n      var _this = this;\n\n      var worldToScreenMat = camera.worldToScreenMatrix;\n      drawShapes.forEach(function (shape) {\n        if (shape.visible) {\n          shape.render(ctx, worldToScreenMat, _this._styleState); // shape.renderBounds(ctx, worldToScreenMat, boundsStrokeStyle)\n\n          if (shape.selected) {\n            var interacShape = _this._selectedShapes.get(shape);\n\n            if (interacShape) {\n              interacShape.render(ctx, worldToScreenMat, _this._styleState); // interacShape.renderBounds(ctx, worldToScreenMat, boundsStrokeStyle)\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"selectShape\",\n    value: function selectShape(shape) {\n      var shapeInfo = this._objects.get(shape);\n\n      if (shapeInfo && shapeInfo.selectable) {\n        var selectEventObj = _selectShape(shape, this.sortedShapes, this._selectedShapes, this._selectStyle, this._xformStyle, shapeInfo);\n\n        this.fire(EventConstants.SELECTION_CHANGED, selectEventObj);\n      }\n    }\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      if (this._selectedShapes.size) {\n        var selectedShapes = getSelectedObjsFromMap(this._selectedShapes);\n        clearSelectedShapes(this._selectedShapes);\n        this.fire(EventConstants.SELECTION_CHANGED, {\n          unselectedShapes: selectedShapes,\n          selectedShapes: []\n        });\n\n        this._rerenderCb();\n      }\n    }\n  }, {\n    key: \"addShape\",\n    value: function addShape(shape) {\n      var _this2 = this;\n\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var select = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var shapes = shape;\n\n      if (!Array.isArray(shapes)) {\n        shapes = [shape];\n      }\n\n      _get(_getPrototypeOf(ShapeBuilder.prototype), \"addShape\", this).call(this, shapes);\n\n      shapes.forEach(function (newShape) {\n        var shapeInfo = _this2._objects.get(newShape);\n\n        if (shapeInfo) {\n          shapeInfo.selectable = opts && typeof opts.selectable !== \"undefined\" ? Boolean(opts.selectable) : true;\n          shapeInfo.movable = opts && typeof opts.movable !== \"undefined\" ? Boolean(opts.movable) : true;\n          shapeInfo.rotatable = opts && typeof opts.rotatable !== \"undefined\" ? Boolean(opts.rotatable) : true;\n          shapeInfo.scalable = opts && typeof opts.scalable !== \"undefined\" ? Boolean(opts.scalable) : true;\n          shapeInfo.uniformScaleOnly = opts && typeof opts.uniformScaleOnly !== \"undefined\" ? Boolean(opts.uniformScaleOnly) : false;\n          shapeInfo.centerScaleOnly = opts && typeof opts.centerScaleOnly !== \"undefined\" ? Boolean(opts.centerScaleOnly) : false;\n          shapeInfo.editable = opts && typeof opts.editable !== \"undefined\" ? Boolean(opts.editable) : true;\n        }\n      });\n\n      if (select) {\n        var selectEventObj = {\n          unselectedShapes: getSelectedObjsFromMap(this._selectedShapes)\n        };\n        var selectedShapes = [];\n        shapes.forEach(function (newShape) {\n          var shapeInfo = _this2._objects.get(newShape);\n\n          if (shapeInfo.selectable) {\n            _selectShape(newShape, _this2.sortedShapes, _this2._selectedShapes, _this2._selectStyle, _this2._xformStyle, shapeInfo);\n\n            selectedShapes.push(newShape);\n          }\n        });\n\n        if (selectedShapes.length) {\n          selectEventObj.selectedShapes = selectedShapes;\n          this.fire(EventConstants.SELECTION_CHANGED, selectEventObj);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"deleteShape\",\n    value: function deleteShape(shape) {\n      var shapes = shape;\n\n      if (!Array.isArray(shapes)) {\n        shapes = [shape];\n      }\n\n      var selectClearedShapes = clearSpecificShapes(this._selectedShapes, shapes);\n      this.fire(EventConstants.SELECTION_CHANGED, {\n        unselectedShapes: selectClearedShapes,\n        selectedShapes: getSelectedObjsFromMap(this._selectedShapes)\n      });\n      removeCustomCursor();\n      this._parent.style.cursor = \"default\"; // forEach not supported on nodelist in IE/Edge\n\n      for (var j = 0; j < this._parent.childNodes.length; j += 1) {\n        this._parent.childNodes[j].style.cursor = \"default\";\n        this._parent.childNodes[j].style.pointerEvents = \"auto\";\n      }\n\n      return _get(_getPrototypeOf(ShapeBuilder.prototype), \"deleteShape\", this).call(this, shapes);\n    }\n  }, {\n    key: \"deleteSelectedShapes\",\n    value: function deleteSelectedShapes() {\n      var selectedShapes = getSelectedObjsFromMap(this._selectedShapes);\n      clearSelectedShapes(this._selectedShapes);\n      this.fire(EventConstants.SELECTION_CHANGED, {\n        unselectedShapes: selectedShapes,\n        selectedShapes: []\n      });\n      removeCustomCursor();\n      this._parent.style.cursor = \"default\"; // forEach not supported on nodelist in IE/Edge\n\n      for (var j = 0; j < this._parent.childNodes.length; j += 1) {\n        this._parent.childNodes[j].style.cursor = \"default\";\n        this._parent.childNodes[j].style.pointerEvents = \"auto\";\n      }\n\n      return _get(_getPrototypeOf(ShapeBuilder.prototype), \"deleteShape\", this).call(this, selectedShapes);\n    }\n  }, {\n    key: \"enableInteractions\",\n    value: function enableInteractions() {\n      this._enableEvents();\n\n      this._activated = true;\n      return this;\n    }\n  }, {\n    key: \"disableInteractions\",\n    value: function disableInteractions() {\n      var clearSelection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (clearSelection) {\n        this.clearSelection();\n      }\n\n      this._disableEvents();\n\n      this._activated = false;\n      return this;\n    }\n  }, {\n    key: \"selectStyle\",\n    set: function set(selectStyle) {\n      __WEBPACK_IMPORTED_MODULE_2__style_basic_style__[\"a\" /* default */].copyBasicStyle(selectStyle, this._selectStyle);\n    },\n    get: function get() {\n      return this._selectStyle;\n    }\n  }, {\n    key: \"selectedShapes\",\n    get: function get() {\n      return getSelectedObjsFromMap(this._selectedShapes);\n    }\n  }, {\n    key: \"interactionsEnabled\",\n    get: function get() {\n      return this._activated;\n    }\n  }]);\n\n  return ShapeBuilder;\n}(__WEBPACK_IMPORTED_MODULE_3__draw_engine__[\"a\" /* default */]);\n\n\nObject.assign(EventConstants, __WEBPACK_IMPORTED_MODULE_3__draw_engine__[\"a\" /* default */].EventConstants);\nShapeBuilder.EventConstants = EventConstants;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = transformXformShape;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = translateShape;\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = translateVert;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_point2d__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_mat2d__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_vec2d__ = __webpack_require__(9);\n/* eslint-disable no-magic-numbers */\n\n\n\n\n\n\nfunction rotateOBBox(shape, parentShape, selectedInfo, screenPos, worldPos) {\n  var pt = [0, 0];\n  var scale = [0, 0];\n  __WEBPACK_IMPORTED_MODULE_1__core_mat2d__[\"a\" /* default */].svd(pt, scale, null, selectedInfo.objectToWorldMatrix);\n  var startDir = [0, 0];\n  __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"sub\"](startDir, selectedInfo.startWorldPos, pt);\n  __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].normalize(startDir, startDir);\n  var dir = pt;\n  __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"sub\"](dir, worldPos, pt);\n  __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].normalize(dir, dir);\n  var angle = __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].angle(startDir, dir);\n\n  if (selectedInfo.keys.shiftKey) {\n    angle = Math.round(angle / Math.QUATER_PI) * Math.QUATER_PI;\n  } // if (!camera.isYFlipped()) {\n  //   angle *= -1\n  // }\n\n\n  parentShape.setRotation(selectedInfo.startLocalRot + Math.RAD_TO_DEG * angle);\n}\n\nfunction transformXformShape(shape, selectedInfo, screenPos, worldPos, camera) {\n  var parentShape = shape.parent;\n  var objPos = [0, 0];\n  var deltaPos = [0, 0];\n  var deltaDims = [0, 0];\n\n  if (selectedInfo.rotate) {\n    rotateOBBox(shape, parentShape, selectedInfo, screenPos, worldPos, camera);\n    return;\n  }\n\n  var uniformScale = selectedInfo.keys.shiftKey || selectedInfo.uniformScaleOnly;\n  var centerScale = selectedInfo.keys.altKey || selectedInfo.centerScaleOnly; // get the position of the shape at start of transform\n\n  var pt = [0, 0];\n  __WEBPACK_IMPORTED_MODULE_1__core_mat2d__[\"a\" /* default */].svd(pt, null, null, selectedInfo.objectToWorldMatrix); // get the mouse delta in world space\n\n  __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].sub(deltaPos, worldPos, selectedInfo.startWorldPos);\n\n  if (uniformScale && selectedInfo.controlIndex < 4) {\n    var xAxisDir = [selectedInfo.objectToWorldMatrix[0], selectedInfo.objectToWorldMatrix[1]];\n    var yAxisDir = [selectedInfo.objectToWorldMatrix[2], selectedInfo.objectToWorldMatrix[3]];\n    var diagDir = [0, 0];\n\n    if (selectedInfo.controlIndex < 2) {\n      __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].negate(xAxisDir, xAxisDir);\n    }\n\n    if (selectedInfo.controlIndex % 2 === 0) {\n      __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].negate(yAxisDir, yAxisDir);\n    }\n\n    __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].normalize(xAxisDir, xAxisDir);\n    __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].normalize(yAxisDir, yAxisDir);\n    __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].add(diagDir, xAxisDir, yAxisDir);\n    __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].normalize(diagDir, diagDir);\n    var cross = __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].cross2d(deltaPos, diagDir);\n    var axisToUse = null;\n\n    if (selectedInfo.controlIndex === 0 || selectedInfo.controlIndex === 3) {\n      axisToUse = yAxisDir;\n\n      if (cross < 0) {\n        axisToUse = xAxisDir;\n      }\n    } else {\n      axisToUse = xAxisDir;\n\n      if (cross < 0) {\n        axisToUse = yAxisDir;\n      }\n    }\n\n    var mindist = __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].dot(deltaPos, axisToUse);\n    mindist = Math.sign(mindist) * Math.sqrt(2 * mindist * mindist);\n    __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].scale(deltaPos, diagDir, mindist);\n    __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"addVec2\"](worldPos, selectedInfo.startWorldPos, deltaPos);\n  } // first convert world point to object space\n\n\n  __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"copy\"](objPos, worldPos);\n  __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"transformMat2d\"](objPos, objPos, selectedInfo.worldToObjectMatrix); // get the mouse delta in object space and multipy by the\n  // scale of the selected object at the start of the transform\n  // to get the scale delta in object space\n\n  __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].sub(deltaDims, objPos, selectedInfo.startObjectPos);\n  __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"copy\"](pt, selectedInfo.startLocalPos); // now determine the transform direction depending\n  // on which control vertex of the object-oriented bounds\n  // was selected\n\n  var xScale = 0;\n  var yScale = 0;\n\n  if (selectedInfo.controlIndex < 4) {\n    // dragging a corner vertex\n    xScale = selectedInfo.controlIndex < 2 ? -1 : 1;\n    yScale = selectedInfo.controlIndex % 2 === 0 ? -1 : 1; // can translate based on the mouse delta in world space\n    // This is done to offset the scale, which is done at\n    // the shape's center. This ultimately acts as a pivot\n    // for the transformation. Only do this if the alt key\n    // isn't pressed\n\n    if (!centerScale) {\n      __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"addVec2\"](pt, pt, __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].scale(deltaPos, deltaPos, 0.5));\n    }\n\n    parentShape.setPosition(pt);\n  } else {\n    // dragging a side vertex, which means we only scale in\n    // one dimension, rather than 2. So we need to figure\n    // out that direction based on the orientation of the\n    // shape\n    var idx = selectedInfo.controlIndex - 4;\n    var axisDir = [0, 0];\n\n    if (idx % 2 === 0) {\n      // scaling in the object's X direction\n      __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].set(axisDir, selectedInfo.objectToWorldMatrix[0], selectedInfo.objectToWorldMatrix[1]);\n      yScale = 0;\n      xScale = idx < 2 ? -1 : 1;\n\n      if (uniformScale) {\n        yScale = xScale;\n        deltaDims[1] = deltaDims[0];\n      }\n    } else {\n      // scaling in the object's Y direction\n      __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].set(axisDir, selectedInfo.objectToWorldMatrix[2], selectedInfo.objectToWorldMatrix[3]);\n      xScale = 0;\n      yScale = idx < 2 ? -1 : 1;\n\n      if (uniformScale) {\n        xScale = yScale;\n        deltaDims[0] = deltaDims[1];\n      }\n    } // now find the pivot offset for the axis-aligned scale\n\n\n    if (!centerScale) {\n      __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].normalize(axisDir, axisDir);\n      __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].scale(axisDir, axisDir, __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].dot(deltaPos, axisDir));\n      __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"addVec2\"](pt, pt, __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].scale(axisDir, axisDir, 0.5));\n    }\n\n    parentShape.setPosition(pt);\n  }\n\n  if (centerScale) {\n    xScale *= 2;\n    yScale *= 2;\n  } // perform the scale\n\n\n  parentShape.setScale([selectedInfo.startLocalScale[0] * (1 + xScale * deltaDims[0] / selectedInfo.shapeWidth), selectedInfo.startLocalScale[1] * (1 + yScale * deltaDims[1] / selectedInfo.shapeHeight)]);\n}\nfunction translateShape(shape, selectedInfo, screenPos, worldPos, camera) {\n  var diff = [0, 0];\n  var pt = [0, 0];\n  __WEBPACK_IMPORTED_MODULE_1__core_mat2d__[\"a\" /* default */].svd(pt, null, null, selectedInfo.objectToWorldMatrix);\n\n  if (selectedInfo.keys.shiftKey) {\n    __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"sub\"](diff, screenPos, selectedInfo.startPos);\n    var angle = Math.atan2(diff[1], diff[0]);\n    angle = Math.round(angle / Math.QUATER_PI) * Math.QUATER_PI;\n    var transformDir = [Math.cos(angle), Math.sin(angle)];\n    __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].scale(diff, transformDir, __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].dot(diff, transformDir));\n    __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].transformMat2(diff, diff, camera.screenToWorldMatrix);\n  } else {\n    __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].sub(diff, worldPos, selectedInfo.startWorldPos);\n  }\n\n  __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"addVec2\"](pt, selectedInfo.startLocalPos, diff);\n  shape.setPosition(pt);\n}\nfunction translateVert(shape, selectedInfo, screenPos, worldPos) {\n  var parentShape = shape.parent; // get the position of the shape at start of transform\n  // const pt = [0, 0]\n  // Mat2d.svd(pt, null, null, selectedInfo.objectToWorldMatrix)\n  // get the mouse delta in world space\n  // Vec2d.sub(deltaPos, worldPos, selectedInfo.startWorldPos)\n  // first convert world point to object space\n  // Point2d.copy(objPos, worldPos)\n  // Point2d.transformMat2d(objPos, objPos, selectedInfo.worldToObjectMatrix)\n  // get the diff\n  // const diff = objPos\n  // Point2d.sub(diff, objPos, selectedInfo.startObjectPos)\n\n  var numVerts = parentShape.numVerts;\n\n  if (selectedInfo.controlIndex >= numVerts) {\n    var idx1 = Math.min(selectedInfo.controlIndex - numVerts, numVerts - 1);\n    var idx2 = idx1 === numVerts - 1 ? 0 : idx1 + 1;\n    var pt = [0, 0];\n    var pt1 = [0, 0];\n    var pt2 = [0, 0];\n    var vec = [0, 0];\n    var verts = parentShape.vertsRef;\n    var xform = parentShape.globalXform;\n    __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"transformMat2d\"](pt1, verts[idx1], xform);\n    __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"transformMat2d\"](pt2, verts[idx2], xform);\n    __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"sub\"](vec, pt2, pt1);\n    __WEBPACK_IMPORTED_MODULE_2__core_vec2d__[\"a\" /* default */].scale(vec, vec, 0.5);\n    __WEBPACK_IMPORTED_MODULE_0__core_point2d__[\"addVec2\"](pt, pt1, vec);\n    selectedInfo.controlIndex = parentShape.insertVert(idx1 + 1, pt);\n  } else {\n    parentShape.setVertPosition(selectedInfo.controlIndex, worldPos);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"create\"] = create;\n/* harmony export (immutable) */ __webpack_exports__[\"clone\"] = clone;\n/* harmony export (immutable) */ __webpack_exports__[\"copy\"] = copy;\n/* harmony export (immutable) */ __webpack_exports__[\"identity\"] = identity;\n/* harmony export (immutable) */ __webpack_exports__[\"fromValues\"] = fromValues;\n/* harmony export (immutable) */ __webpack_exports__[\"set\"] = set;\n/* harmony export (immutable) */ __webpack_exports__[\"transpose\"] = transpose;\n/* harmony export (immutable) */ __webpack_exports__[\"invert\"] = invert;\n/* harmony export (immutable) */ __webpack_exports__[\"adjoint\"] = adjoint;\n/* harmony export (immutable) */ __webpack_exports__[\"determinant\"] = determinant;\n/* harmony export (immutable) */ __webpack_exports__[\"multiply\"] = multiply;\n/* harmony export (immutable) */ __webpack_exports__[\"rotate\"] = rotate;\n/* harmony export (immutable) */ __webpack_exports__[\"scale\"] = scale;\n/* harmony export (immutable) */ __webpack_exports__[\"fromRotation\"] = fromRotation;\n/* harmony export (immutable) */ __webpack_exports__[\"fromScaling\"] = fromScaling;\n/* harmony export (immutable) */ __webpack_exports__[\"str\"] = str;\n/* harmony export (immutable) */ __webpack_exports__[\"frob\"] = frob;\n/* harmony export (immutable) */ __webpack_exports__[\"LDU\"] = LDU;\n/* harmony export (immutable) */ __webpack_exports__[\"add\"] = add;\n/* harmony export (immutable) */ __webpack_exports__[\"subtract\"] = subtract;\n/* harmony export (immutable) */ __webpack_exports__[\"exactEquals\"] = exactEquals;\n/* harmony export (immutable) */ __webpack_exports__[\"equals\"] = equals;\n/* harmony export (immutable) */ __webpack_exports__[\"multiplyScalar\"] = multiplyScalar;\n/* harmony export (immutable) */ __webpack_exports__[\"multiplyScalarAndAdd\"] = multiplyScalarAndAdd;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(1);\n\r\n\r\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\nfunction create() {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](4);\r\n  if (__WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\nfunction clone(a) {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\r\nfunction identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\r\nfunction fromValues(m00, m01, m10, m11) {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](4);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\r\nfunction set(out, m00, m01, m10, m11) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nfunction transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache\r\n  // some values\r\n  if (out === a) {\r\n    var a1 = a[1];\r\n    out[1] = a[2];\r\n    out[2] = a1;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[2];\r\n    out[2] = a[1];\r\n    out[3] = a[3];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nfunction invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n\r\n  // Calculate the determinant\r\n  var det = a0 * a3 - a2 * a1;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = a3 * det;\r\n  out[1] = -a1 * det;\r\n  out[2] = -a2 * det;\r\n  out[3] = a0 * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nfunction adjoint(out, a) {\r\n  // Caching this value is nessecary if out == a\r\n  var a0 = a[0];\r\n  out[0] = a[3];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a0;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nfunction determinant(a) {\r\n  return a[0] * a[3] - a[2] * a[1];\r\n}\r\n\r\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\nfunction rotate(out, a, rad) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = a0 * c + a2 * s;\r\n  out[1] = a1 * c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\r\nfunction scale(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\nfunction fromRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\r\nfunction fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nfunction str(a) {\r\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nfunction frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));\r\n}\r\n\r\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\r\n\r\nfunction LDU(L, D, U, a) {\r\n  L[2] = a[2] / a[0];\r\n  U[0] = a[0];\r\n  U[1] = a[1];\r\n  U[3] = a[3] - L[2] * U[1];\r\n  return [L, D, U];\r\n}\r\n\r\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\r\nfunction multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\r\nfunction multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\r\nvar mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\r\nvar sub = subtract;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"create\"] = create;\n/* harmony export (immutable) */ __webpack_exports__[\"clone\"] = clone;\n/* harmony export (immutable) */ __webpack_exports__[\"copy\"] = copy;\n/* harmony export (immutable) */ __webpack_exports__[\"identity\"] = identity;\n/* harmony export (immutable) */ __webpack_exports__[\"fromValues\"] = fromValues;\n/* harmony export (immutable) */ __webpack_exports__[\"set\"] = set;\n/* harmony export (immutable) */ __webpack_exports__[\"invert\"] = invert;\n/* harmony export (immutable) */ __webpack_exports__[\"determinant\"] = determinant;\n/* harmony export (immutable) */ __webpack_exports__[\"multiply\"] = multiply;\n/* harmony export (immutable) */ __webpack_exports__[\"rotate\"] = rotate;\n/* harmony export (immutable) */ __webpack_exports__[\"scale\"] = scale;\n/* harmony export (immutable) */ __webpack_exports__[\"translate\"] = translate;\n/* harmony export (immutable) */ __webpack_exports__[\"fromRotation\"] = fromRotation;\n/* harmony export (immutable) */ __webpack_exports__[\"fromScaling\"] = fromScaling;\n/* harmony export (immutable) */ __webpack_exports__[\"fromTranslation\"] = fromTranslation;\n/* harmony export (immutable) */ __webpack_exports__[\"str\"] = str;\n/* harmony export (immutable) */ __webpack_exports__[\"frob\"] = frob;\n/* harmony export (immutable) */ __webpack_exports__[\"add\"] = add;\n/* harmony export (immutable) */ __webpack_exports__[\"subtract\"] = subtract;\n/* harmony export (immutable) */ __webpack_exports__[\"multiplyScalar\"] = multiplyScalar;\n/* harmony export (immutable) */ __webpack_exports__[\"multiplyScalarAndAdd\"] = multiplyScalarAndAdd;\n/* harmony export (immutable) */ __webpack_exports__[\"exactEquals\"] = exactEquals;\n/* harmony export (immutable) */ __webpack_exports__[\"equals\"] = equals;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(1);\n\r\n\r\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty,\r\n *  0, 0, 1]\r\n * </pre>\r\n * The last row is ignored so the array is shorter and operations are faster.\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\nfunction create() {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](6);\r\n  if (__WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[4] = 0;\r\n    out[5] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\nfunction clone(a) {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](6);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\r\nfunction identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\r\nfunction fromValues(a, b, c, d, tx, ty) {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](6);\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\r\nfunction set(out, a, b, c, d, tx, ty) {\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\nfunction invert(out, a) {\r\n  var aa = a[0],\r\n      ab = a[1],\r\n      ac = a[2],\r\n      ad = a[3];\r\n  var atx = a[4],\r\n      aty = a[5];\r\n\r\n  var det = aa * ad - ab * ac;\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = ad * det;\r\n  out[1] = -ab * det;\r\n  out[2] = -ac * det;\r\n  out[3] = aa * det;\r\n  out[4] = (ac * aty - ad * atx) * det;\r\n  out[5] = (ab * atx - aa * aty) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nfunction determinant(a) {\r\n  return a[0] * a[3] - a[1] * a[2];\r\n}\r\n\r\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  out[4] = a0 * b4 + a2 * b5 + a4;\r\n  out[5] = a1 * b4 + a3 * b5 + a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\nfunction rotate(out, a, rad) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = a0 * c + a2 * s;\r\n  out[1] = a1 * c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\r\nfunction scale(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\r\nfunction translate(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0;\r\n  out[1] = a1;\r\n  out[2] = a2;\r\n  out[3] = a3;\r\n  out[4] = a0 * v0 + a2 * v1 + a4;\r\n  out[5] = a1 * v0 + a3 * v1 + a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\nfunction fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\r\nfunction fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\r\nfunction fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = v[0];\r\n  out[5] = v[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nfunction str(a) {\r\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nfunction frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);\r\n}\r\n\r\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\r\nfunction multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\r\nfunction multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5];\r\n  return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a5), Math.abs(b5));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\r\nvar mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\r\nvar sub = subtract;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export create */\n/* unused harmony export clone */\n/* unused harmony export fromValues */\n/* unused harmony export fromRotationTranslationValues */\n/* unused harmony export fromRotationTranslation */\n/* unused harmony export fromTranslation */\n/* unused harmony export fromRotation */\n/* unused harmony export fromMat4 */\n/* unused harmony export copy */\n/* unused harmony export identity */\n/* unused harmony export set */\n/* unused harmony export getReal */\n/* unused harmony export getDual */\n/* unused harmony export setReal */\n/* unused harmony export setDual */\n/* unused harmony export getTranslation */\n/* unused harmony export translate */\n/* unused harmony export rotateX */\n/* unused harmony export rotateY */\n/* unused harmony export rotateZ */\n/* unused harmony export rotateByQuatAppend */\n/* unused harmony export rotateByQuatPrepend */\n/* unused harmony export rotateAroundAxis */\n/* unused harmony export add */\n/* unused harmony export multiply */\n/* unused harmony export mul */\n/* unused harmony export scale */\n/* unused harmony export dot */\n/* unused harmony export lerp */\n/* unused harmony export invert */\n/* unused harmony export conjugate */\n/* unused harmony export length */\n/* unused harmony export len */\n/* unused harmony export squaredLength */\n/* unused harmony export sqrLen */\n/* unused harmony export normalize */\n/* unused harmony export str */\n/* unused harmony export exactEquals */\n/* unused harmony export equals */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__quat_js__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mat4_js__ = __webpack_require__(14);\n\r\n\r\n\r\n\r\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\r\n\r\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\r\nfunction create() {\r\n  var dq = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](8);\r\n  if (__WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    dq[0] = 0;\r\n    dq[1] = 0;\r\n    dq[2] = 0;\r\n    dq[4] = 0;\r\n    dq[5] = 0;\r\n    dq[6] = 0;\r\n    dq[7] = 0;\r\n  }\r\n  dq[3] = 1;\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\nfunction clone(a) {\r\n  var dq = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](8);\r\n  dq[0] = a[0];\r\n  dq[1] = a[1];\r\n  dq[2] = a[2];\r\n  dq[3] = a[3];\r\n  dq[4] = a[4];\r\n  dq[5] = a[5];\r\n  dq[6] = a[6];\r\n  dq[7] = a[7];\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\nfunction fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\r\n  var dq = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](8);\r\n  dq[0] = x1;\r\n  dq[1] = y1;\r\n  dq[2] = z1;\r\n  dq[3] = w1;\r\n  dq[4] = x2;\r\n  dq[5] = y2;\r\n  dq[6] = z2;\r\n  dq[7] = w2;\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\nfunction fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\r\n  var dq = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](8);\r\n  dq[0] = x1;\r\n  dq[1] = y1;\r\n  dq[2] = z1;\r\n  dq[3] = w1;\r\n  var ax = x2 * 0.5,\r\n      ay = y2 * 0.5,\r\n      az = z2 * 0.5;\r\n  dq[4] = ax * w1 + ay * z1 - az * y1;\r\n  dq[5] = ay * w1 + az * x1 - ax * z1;\r\n  dq[6] = az * w1 + ax * y1 - ay * x1;\r\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q quaternion\r\n * @param {vec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\nfunction fromRotationTranslation(out, q, t) {\r\n  var ax = t[0] * 0.5,\r\n      ay = t[1] * 0.5,\r\n      az = t[2] * 0.5,\r\n      bx = q[0],\r\n      by = q[1],\r\n      bz = q[2],\r\n      bw = q[3];\r\n  out[0] = bx;\r\n  out[1] = by;\r\n  out[2] = bz;\r\n  out[3] = bw;\r\n  out[4] = ax * bw + ay * bz - az * by;\r\n  out[5] = ay * bw + az * bx - ax * bz;\r\n  out[6] = az * bw + ax * by - ay * bx;\r\n  out[7] = -ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {vec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\nfunction fromTranslation(out, t) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = t[0] * 0.5;\r\n  out[5] = t[1] * 0.5;\r\n  out[6] = t[2] * 0.5;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\nfunction fromRotation(out, q) {\r\n  out[0] = q[0];\r\n  out[1] = q[1];\r\n  out[2] = q[2];\r\n  out[3] = q[3];\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {mat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\r\nfunction fromMat4(out, a) {\r\n  //TODO Optimize this\r\n  var outer = __WEBPACK_IMPORTED_MODULE_1__quat_js__[\"b\" /* create */]();\r\n  __WEBPACK_IMPORTED_MODULE_2__mat4_js__[\"a\" /* getRotation */](outer, a);\r\n  var t = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](3);\r\n  __WEBPACK_IMPORTED_MODULE_2__mat4_js__[\"b\" /* getTranslation */](t, a);\r\n  fromRotationTranslation(out, outer, t);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\r\nfunction identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nfunction set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\r\n  out[0] = x1;\r\n  out[1] = y1;\r\n  out[2] = z1;\r\n  out[3] = w1;\r\n\r\n  out[4] = x2;\r\n  out[5] = y2;\r\n  out[6] = z2;\r\n  out[7] = w2;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\r\nvar getReal = __WEBPACK_IMPORTED_MODULE_1__quat_js__[\"a\" /* copy */];\r\n\r\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\r\nfunction getDual(out, a) {\r\n  out[0] = a[4];\r\n  out[1] = a[5];\r\n  out[2] = a[6];\r\n  out[3] = a[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nvar setReal = __WEBPACK_IMPORTED_MODULE_1__quat_js__[\"a\" /* copy */];\r\n\r\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nfunction setDual(out, q) {\r\n  out[4] = q[0];\r\n  out[5] = q[1];\r\n  out[6] = q[2];\r\n  out[7] = q[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {quat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\r\nfunction getTranslation(out, a) {\r\n  var ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3];\r\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\r\nfunction translate(out, a, v) {\r\n  var ax1 = a[0],\r\n      ay1 = a[1],\r\n      az1 = a[2],\r\n      aw1 = a[3],\r\n      bx1 = v[0] * 0.5,\r\n      by1 = v[1] * 0.5,\r\n      bz1 = v[2] * 0.5,\r\n      ax2 = a[4],\r\n      ay2 = a[5],\r\n      az2 = a[6],\r\n      aw2 = a[7];\r\n  out[0] = ax1;\r\n  out[1] = ay1;\r\n  out[2] = az1;\r\n  out[3] = aw1;\r\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\r\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\r\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\r\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\nfunction rotateX(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  __WEBPACK_IMPORTED_MODULE_1__quat_js__[\"e\" /* rotateX */](out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\nfunction rotateY(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  __WEBPACK_IMPORTED_MODULE_1__quat_js__[\"f\" /* rotateY */](out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\nfunction rotateZ(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  __WEBPACK_IMPORTED_MODULE_1__quat_js__[\"g\" /* rotateZ */](out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {quat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\r\nfunction rotateByQuatAppend(out, a, q) {\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3],\r\n      ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n\r\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\r\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\r\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\r\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\r\n  ax = a[4];\r\n  ay = a[5];\r\n  az = a[6];\r\n  aw = a[7];\r\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\r\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\r\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\r\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat} q quaternion to rotate by\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\r\nfunction rotateByQuatPrepend(out, q, a) {\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3],\r\n      bx = a[0],\r\n      by = a[1],\r\n      bz = a[2],\r\n      bw = a[3];\r\n\r\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\r\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\r\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\r\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\r\n  bx = a[4];\r\n  by = a[5];\r\n  bz = a[6];\r\n  bw = a[7];\r\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\r\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\r\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\r\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {vec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\r\nfunction rotateAroundAxis(out, a, axis, rad) {\r\n  //Special case for rad = 0\r\n  if (Math.abs(rad) < __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"]) {\r\n    return copy(out, a);\r\n  }\r\n  var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\r\n\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  var bx = s * axis[0] / axisLength;\r\n  var by = s * axis[1] / axisLength;\r\n  var bz = s * axis[2] / axisLength;\r\n  var bw = Math.cos(rad);\r\n\r\n  var ax1 = a[0],\r\n      ay1 = a[1],\r\n      az1 = a[2],\r\n      aw1 = a[3];\r\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n\r\n  var ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  var ax0 = a[0],\r\n      ay0 = a[1],\r\n      az0 = a[2],\r\n      aw0 = a[3],\r\n      bx1 = b[4],\r\n      by1 = b[5],\r\n      bz1 = b[6],\r\n      bw1 = b[7],\r\n      ax1 = a[4],\r\n      ay1 = a[5],\r\n      az1 = a[6],\r\n      aw1 = a[7],\r\n      bx0 = b[0],\r\n      by0 = b[1],\r\n      bz0 = b[2],\r\n      bw0 = b[3];\r\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\r\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\r\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\r\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\r\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\r\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\r\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\r\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\r\nvar mul = multiply;\r\n\r\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nfunction scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nvar dot = __WEBPACK_IMPORTED_MODULE_1__quat_js__[\"c\" /* dot */];\r\n\r\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\r\nfunction lerp(out, a, b, t) {\r\n  var mt = 1 - t;\r\n  if (dot(a, b) < 0) t = -t;\r\n\r\n  out[0] = a[0] * mt + b[0] * t;\r\n  out[1] = a[1] * mt + b[1] * t;\r\n  out[2] = a[2] * mt + b[2] * t;\r\n  out[3] = a[3] * mt + b[3] * t;\r\n  out[4] = a[4] * mt + b[4] * t;\r\n  out[5] = a[5] * mt + b[5] * t;\r\n  out[6] = a[6] * mt + b[6] * t;\r\n  out[7] = a[7] * mt + b[7] * t;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\r\nfunction invert(out, a) {\r\n  var sqlen = squaredLength(a);\r\n  out[0] = -a[0] / sqlen;\r\n  out[1] = -a[1] / sqlen;\r\n  out[2] = -a[2] / sqlen;\r\n  out[3] = a[3] / sqlen;\r\n  out[4] = -a[4] / sqlen;\r\n  out[5] = -a[5] / sqlen;\r\n  out[6] = -a[6] / sqlen;\r\n  out[7] = a[7] / sqlen;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\r\nfunction conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  out[4] = -a[4];\r\n  out[5] = -a[5];\r\n  out[6] = -a[6];\r\n  out[7] = a[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\r\nvar length = __WEBPACK_IMPORTED_MODULE_1__quat_js__[\"d\" /* length */];\r\n\r\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\r\nvar len = length;\r\n\r\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nvar squaredLength = __WEBPACK_IMPORTED_MODULE_1__quat_js__[\"h\" /* squaredLength */];\r\n\r\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\r\nvar sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nfunction normalize(out, a) {\r\n  var magnitude = squaredLength(a);\r\n  if (magnitude > 0) {\r\n    magnitude = Math.sqrt(magnitude);\r\n\r\n    var a0 = a[0] / magnitude;\r\n    var a1 = a[1] / magnitude;\r\n    var a2 = a[2] / magnitude;\r\n    var a3 = a[3] / magnitude;\r\n\r\n    var b0 = a[4];\r\n    var b1 = a[5];\r\n    var b2 = a[6];\r\n    var b3 = a[7];\r\n\r\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\r\n\r\n    out[0] = a0;\r\n    out[1] = a1;\r\n    out[2] = a2;\r\n    out[3] = a3;\r\n\r\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\r\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\r\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\r\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {quat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\r\nfunction str(a) {\r\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat2} a the first dual quaternion.\r\n * @param {quat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\r\n}\r\n\r\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat2} a the first dual quat.\r\n * @param {quat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a7), Math.abs(b7));\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9saWIvZ2wtbWF0cml4L3F1YXQyLmpzPzllODIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQXdDO0FBQ047QUFDQTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CO0FBQ087QUFDUCxlQUFlLHNEQUFtQjtBQUNsQyxNQUFNLHNEQUFtQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNPO0FBQ1AsZUFBZSxzREFBbUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNPO0FBQ1AsZUFBZSxzREFBbUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ087QUFDUCxlQUFlLHNEQUFtQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsS0FBSztBQUNoQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ087QUFDUDtBQUNBLGNBQWMsd0RBQVc7QUFDekIsRUFBRSw2REFBZ0I7QUFDbEIsY0FBYyxzREFBbUI7QUFDakMsRUFBRSxnRUFBbUI7QUFDckI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixhQUFhLE1BQU07QUFDbkI7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksS0FBSztBQUNqQixZQUFZLE1BQU07QUFDbEIsWUFBWSxLQUFLO0FBQ2pCO0FBQ08sY0FBYyxzREFBUzs7QUFFOUI7QUFDQTtBQUNBLFlBQVksS0FBSztBQUNqQixZQUFZLE1BQU07QUFDbEIsWUFBWSxLQUFLO0FBQ2pCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsS0FBSztBQUNoQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNPLGNBQWMsc0RBQVM7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLEtBQUs7QUFDaEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxLQUFLO0FBQ2pCLFlBQVksTUFBTTtBQUNsQixZQUFZLEtBQUs7QUFDakI7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsTUFBTTtBQUNuQjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsTUFBTTtBQUNuQjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSx5REFBWTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsTUFBTTtBQUNuQjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSx5REFBWTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsTUFBTTtBQUNuQjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSx5REFBWTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsV0FBVyxLQUFLO0FBQ2hCLGFBQWEsTUFBTTtBQUNuQjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLEtBQUs7QUFDaEIsV0FBVyxNQUFNO0FBQ2pCLGFBQWEsTUFBTTtBQUNuQjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixhQUFhLE1BQU07QUFDbkI7QUFDTztBQUNQO0FBQ0Esc0JBQXNCLG1EQUFnQjtBQUN0QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsV0FBVyxNQUFNO0FBQ2pCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixhQUFhLE1BQU07QUFDbkI7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNPOztBQUVQO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxNQUFNO0FBQ2pCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ08sVUFBVSxxREFBUTs7QUFFekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixXQUFXLE9BQU87QUFDbEIsYUFBYSxNQUFNO0FBQ25CO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxNQUFNO0FBQ2pCLGFBQWEsTUFBTTtBQUNuQjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsYUFBYSxNQUFNO0FBQ25CO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDTyxhQUFhLHdEQUFXOztBQUUvQjtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ087O0FBRVA7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ08sb0JBQW9CLCtEQUFrQjs7QUFFN0M7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNPOztBQUVQO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsYUFBYSxPQUFPO0FBQ3BCO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsYUFBYSxRQUFRO0FBQ3JCO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsYUFBYSxRQUFRO0FBQ3JCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixtREFBZ0IscUVBQXFFLG1EQUFnQixxRUFBcUUsbURBQWdCLHFFQUFxRSxtREFBZ0IscUVBQXFFLG1EQUFnQixxRUFBcUUsbURBQWdCLHFFQUFxRSxtREFBZ0IscUVBQXFFLG1EQUFnQjtBQUNqb0IiLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcclxuaW1wb3J0ICogYXMgcXVhdCBmcm9tIFwiLi9xdWF0LmpzXCI7XHJcbmltcG9ydCAqIGFzIG1hdDQgZnJvbSBcIi4vbWF0NC5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIER1YWwgUXVhdGVybmlvbjxicj5cclxuICogRm9ybWF0OiBbcmVhbCwgZHVhbF08YnI+XHJcbiAqIFF1YXRlcm5pb24gZm9ybWF0OiBYWVpXPGJyPlxyXG4gKiBNYWtlIHN1cmUgdG8gaGF2ZSBub3JtYWxpemVkIGR1YWwgcXVhdGVybmlvbnMsIG90aGVyd2lzZSB0aGUgZnVuY3Rpb25zIG1heSBub3Qgd29yayBhcyBpbnRlbmRlZC48YnI+XHJcbiAqIEBtb2R1bGUgcXVhdDJcclxuICovXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBkdWFsIHF1YXRcclxuICpcclxuICogQHJldHVybnMge3F1YXQyfSBhIG5ldyBkdWFsIHF1YXRlcm5pb24gW3JlYWwgLT4gcm90YXRpb24sIGR1YWwgLT4gdHJhbnNsYXRpb25dXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xyXG4gIHZhciBkcSA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDgpO1xyXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xyXG4gICAgZHFbMF0gPSAwO1xyXG4gICAgZHFbMV0gPSAwO1xyXG4gICAgZHFbMl0gPSAwO1xyXG4gICAgZHFbNF0gPSAwO1xyXG4gICAgZHFbNV0gPSAwO1xyXG4gICAgZHFbNl0gPSAwO1xyXG4gICAgZHFbN10gPSAwO1xyXG4gIH1cclxuICBkcVszXSA9IDE7XHJcbiAgcmV0dXJuIGRxO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBxdWF0IGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgcXVhdGVybmlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBhIGR1YWwgcXVhdGVybmlvbiB0byBjbG9uZVxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG5ldyBkdWFsIHF1YXRlcm5pb25cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xyXG4gIHZhciBkcSA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDgpO1xyXG4gIGRxWzBdID0gYVswXTtcclxuICBkcVsxXSA9IGFbMV07XHJcbiAgZHFbMl0gPSBhWzJdO1xyXG4gIGRxWzNdID0gYVszXTtcclxuICBkcVs0XSA9IGFbNF07XHJcbiAgZHFbNV0gPSBhWzVdO1xyXG4gIGRxWzZdID0gYVs2XTtcclxuICBkcVs3XSA9IGFbN107XHJcbiAgcmV0dXJuIGRxO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBkdWFsIHF1YXQgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4MSBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geTEgWSBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHoxIFogY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB3MSBXIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geDIgWCBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHkyIFkgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB6MiBaIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdzIgVyBjb21wb25lbnRcclxuICogQHJldHVybnMge3F1YXQyfSBuZXcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMoeDEsIHkxLCB6MSwgdzEsIHgyLCB5MiwgejIsIHcyKSB7XHJcbiAgdmFyIGRxID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoOCk7XHJcbiAgZHFbMF0gPSB4MTtcclxuICBkcVsxXSA9IHkxO1xyXG4gIGRxWzJdID0gejE7XHJcbiAgZHFbM10gPSB3MTtcclxuICBkcVs0XSA9IHgyO1xyXG4gIGRxWzVdID0geTI7XHJcbiAgZHFbNl0gPSB6MjtcclxuICBkcVs3XSA9IHcyO1xyXG4gIHJldHVybiBkcTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgZHVhbCBxdWF0IGZyb20gdGhlIGdpdmVuIHZhbHVlcyAocXVhdCBhbmQgdHJhbnNsYXRpb24pXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4MSBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geTEgWSBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHoxIFogY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB3MSBXIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geDIgWCBjb21wb25lbnQgKHRyYW5zbGF0aW9uKVxyXG4gKiBAcGFyYW0ge051bWJlcn0geTIgWSBjb21wb25lbnQgKHRyYW5zbGF0aW9uKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gejIgWiBjb21wb25lbnQgKHRyYW5zbGF0aW9uKVxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG5ldyBkdWFsIHF1YXRlcm5pb25cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25WYWx1ZXMoeDEsIHkxLCB6MSwgdzEsIHgyLCB5MiwgejIpIHtcclxuICB2YXIgZHEgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg4KTtcclxuICBkcVswXSA9IHgxO1xyXG4gIGRxWzFdID0geTE7XHJcbiAgZHFbMl0gPSB6MTtcclxuICBkcVszXSA9IHcxO1xyXG4gIHZhciBheCA9IHgyICogMC41LFxyXG4gICAgICBheSA9IHkyICogMC41LFxyXG4gICAgICBheiA9IHoyICogMC41O1xyXG4gIGRxWzRdID0gYXggKiB3MSArIGF5ICogejEgLSBheiAqIHkxO1xyXG4gIGRxWzVdID0gYXkgKiB3MSArIGF6ICogeDEgLSBheCAqIHoxO1xyXG4gIGRxWzZdID0gYXogKiB3MSArIGF4ICogeTEgLSBheSAqIHgxO1xyXG4gIGRxWzddID0gLWF4ICogeDEgLSBheSAqIHkxIC0gYXogKiB6MTtcclxuICByZXR1cm4gZHE7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgZHVhbCBxdWF0IGZyb20gYSBxdWF0ZXJuaW9uIGFuZCBhIHRyYW5zbGF0aW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGR1YWwgcXVhdGVybmlvbiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge3F1YXR9IHEgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3ZlYzN9IHQgdHJhbmxhdGlvbiB2ZWN0b3JcclxuICogQHJldHVybnMge3F1YXQyfSBkdWFsIHF1YXRlcm5pb24gcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24ob3V0LCBxLCB0KSB7XHJcbiAgdmFyIGF4ID0gdFswXSAqIDAuNSxcclxuICAgICAgYXkgPSB0WzFdICogMC41LFxyXG4gICAgICBheiA9IHRbMl0gKiAwLjUsXHJcbiAgICAgIGJ4ID0gcVswXSxcclxuICAgICAgYnkgPSBxWzFdLFxyXG4gICAgICBieiA9IHFbMl0sXHJcbiAgICAgIGJ3ID0gcVszXTtcclxuICBvdXRbMF0gPSBieDtcclxuICBvdXRbMV0gPSBieTtcclxuICBvdXRbMl0gPSBiejtcclxuICBvdXRbM10gPSBidztcclxuICBvdXRbNF0gPSBheCAqIGJ3ICsgYXkgKiBieiAtIGF6ICogYnk7XHJcbiAgb3V0WzVdID0gYXkgKiBidyArIGF6ICogYnggLSBheCAqIGJ6O1xyXG4gIG91dFs2XSA9IGF6ICogYncgKyBheCAqIGJ5IC0gYXkgKiBieDtcclxuICBvdXRbN10gPSAtYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgZHVhbCBxdWF0IGZyb20gYSB0cmFuc2xhdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBkdWFsIHF1YXRlcm5pb24gcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHt2ZWMzfSB0IHRyYW5zbGF0aW9uIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IGR1YWwgcXVhdGVybmlvbiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tVHJhbnNsYXRpb24ob3V0LCB0KSB7XHJcbiAgb3V0WzBdID0gMDtcclxuICBvdXRbMV0gPSAwO1xyXG4gIG91dFsyXSA9IDA7XHJcbiAgb3V0WzNdID0gMTtcclxuICBvdXRbNF0gPSB0WzBdICogMC41O1xyXG4gIG91dFs1XSA9IHRbMV0gKiAwLjU7XHJcbiAgb3V0WzZdID0gdFsyXSAqIDAuNTtcclxuICBvdXRbN10gPSAwO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgZHVhbCBxdWF0IGZyb20gYSBxdWF0ZXJuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGR1YWwgcXVhdGVybmlvbiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge3F1YXR9IHEgdGhlIHF1YXRlcm5pb25cclxuICogQHJldHVybnMge3F1YXQyfSBkdWFsIHF1YXRlcm5pb24gcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uKG91dCwgcSkge1xyXG4gIG91dFswXSA9IHFbMF07XHJcbiAgb3V0WzFdID0gcVsxXTtcclxuICBvdXRbMl0gPSBxWzJdO1xyXG4gIG91dFszXSA9IHFbM107XHJcbiAgb3V0WzRdID0gMDtcclxuICBvdXRbNV0gPSAwO1xyXG4gIG91dFs2XSA9IDA7XHJcbiAgb3V0WzddID0gMDtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBkdWFsIHF1YXQgZnJvbSBhIG1hdHJpeCAoNHg0KVxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIGR1YWwgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IGR1YWwgcXVhdCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tTWF0NChvdXQsIGEpIHtcclxuICAvL1RPRE8gT3B0aW1pemUgdGhpc1xyXG4gIHZhciBvdXRlciA9IHF1YXQuY3JlYXRlKCk7XHJcbiAgbWF0NC5nZXRSb3RhdGlvbihvdXRlciwgYSk7XHJcbiAgdmFyIHQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcclxuICBtYXQ0LmdldFRyYW5zbGF0aW9uKHQsIGEpO1xyXG4gIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKG91dCwgb3V0ZXIsIHQpO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgZHVhbCBxdWF0IHRvIGFub3RoZXJcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIHNvdXJjZSBkdWFsIHF1YXRlcm5pb25cclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcclxuICBvdXRbMF0gPSBhWzBdO1xyXG4gIG91dFsxXSA9IGFbMV07XHJcbiAgb3V0WzJdID0gYVsyXTtcclxuICBvdXRbM10gPSBhWzNdO1xyXG4gIG91dFs0XSA9IGFbNF07XHJcbiAgb3V0WzVdID0gYVs1XTtcclxuICBvdXRbNl0gPSBhWzZdO1xyXG4gIG91dFs3XSA9IGFbN107XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCBhIGR1YWwgcXVhdCB0byB0aGUgaWRlbnRpdHkgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHtcclxuICBvdXRbMF0gPSAwO1xyXG4gIG91dFsxXSA9IDA7XHJcbiAgb3V0WzJdID0gMDtcclxuICBvdXRbM10gPSAxO1xyXG4gIG91dFs0XSA9IDA7XHJcbiAgb3V0WzVdID0gMDtcclxuICBvdXRbNl0gPSAwO1xyXG4gIG91dFs3XSA9IDA7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIGR1YWwgcXVhdCB0byB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtOdW1iZXJ9IHgxIFggY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5MSBZIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0gejEgWiBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHcxIFcgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4MiBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geTIgWSBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHoyIFogY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB3MiBXIGNvbXBvbmVudFxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4MSwgeTEsIHoxLCB3MSwgeDIsIHkyLCB6MiwgdzIpIHtcclxuICBvdXRbMF0gPSB4MTtcclxuICBvdXRbMV0gPSB5MTtcclxuICBvdXRbMl0gPSB6MTtcclxuICBvdXRbM10gPSB3MTtcclxuXHJcbiAgb3V0WzRdID0geDI7XHJcbiAgb3V0WzVdID0geTI7XHJcbiAgb3V0WzZdID0gejI7XHJcbiAgb3V0WzddID0gdzI7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIHJlYWwgcGFydCBvZiBhIGR1YWwgcXVhdFxyXG4gKiBAcGFyYW0gIHtxdWF0fSBvdXQgcmVhbCBwYXJ0XHJcbiAqIEBwYXJhbSAge3F1YXQyfSBhIER1YWwgUXVhdGVybmlvblxyXG4gKiBAcmV0dXJuIHtxdWF0fSByZWFsIHBhcnRcclxuICovXHJcbmV4cG9ydCB2YXIgZ2V0UmVhbCA9IHF1YXQuY29weTtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBkdWFsIHBhcnQgb2YgYSBkdWFsIHF1YXRcclxuICogQHBhcmFtICB7cXVhdH0gb3V0IGR1YWwgcGFydFxyXG4gKiBAcGFyYW0gIHtxdWF0Mn0gYSBEdWFsIFF1YXRlcm5pb25cclxuICogQHJldHVybiB7cXVhdH0gZHVhbCBwYXJ0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RHVhbChvdXQsIGEpIHtcclxuICBvdXRbMF0gPSBhWzRdO1xyXG4gIG91dFsxXSA9IGFbNV07XHJcbiAgb3V0WzJdID0gYVs2XTtcclxuICBvdXRbM10gPSBhWzddO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIHJlYWwgY29tcG9uZW50IG9mIGEgZHVhbCBxdWF0IHRvIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtxdWF0fSBxIGEgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIHJlYWwgcGFydFxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgc2V0UmVhbCA9IHF1YXQuY29weTtcclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIGR1YWwgY29tcG9uZW50IG9mIGEgZHVhbCBxdWF0IHRvIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtxdWF0fSBxIGEgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIGR1YWwgcGFydFxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXREdWFsKG91dCwgcSkge1xyXG4gIG91dFs0XSA9IHFbMF07XHJcbiAgb3V0WzVdID0gcVsxXTtcclxuICBvdXRbNl0gPSBxWzJdO1xyXG4gIG91dFs3XSA9IHFbM107XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIHRyYW5zbGF0aW9uIG9mIGEgbm9ybWFsaXplZCBkdWFsIHF1YXRcclxuICogQHBhcmFtICB7dmVjM30gb3V0IHRyYW5zbGF0aW9uXHJcbiAqIEBwYXJhbSAge3F1YXQyfSBhIER1YWwgUXVhdGVybmlvbiB0byBiZSBkZWNvbXBvc2VkXHJcbiAqIEByZXR1cm4ge3ZlYzN9IHRyYW5zbGF0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNsYXRpb24ob3V0LCBhKSB7XHJcbiAgdmFyIGF4ID0gYVs0XSxcclxuICAgICAgYXkgPSBhWzVdLFxyXG4gICAgICBheiA9IGFbNl0sXHJcbiAgICAgIGF3ID0gYVs3XSxcclxuICAgICAgYnggPSAtYVswXSxcclxuICAgICAgYnkgPSAtYVsxXSxcclxuICAgICAgYnogPSAtYVsyXSxcclxuICAgICAgYncgPSBhWzNdO1xyXG4gIG91dFswXSA9IChheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5KSAqIDI7XHJcbiAgb3V0WzFdID0gKGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnopICogMjtcclxuICBvdXRbMl0gPSAoYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieCkgKiAyO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUcmFuc2xhdGVzIGEgZHVhbCBxdWF0IGJ5IHRoZSBnaXZlbiB2ZWN0b3JcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byB0cmFuc2xhdGVcclxuICogQHBhcmFtIHt2ZWMzfSB2IHZlY3RvciB0byB0cmFuc2xhdGUgYnlcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGUob3V0LCBhLCB2KSB7XHJcbiAgdmFyIGF4MSA9IGFbMF0sXHJcbiAgICAgIGF5MSA9IGFbMV0sXHJcbiAgICAgIGF6MSA9IGFbMl0sXHJcbiAgICAgIGF3MSA9IGFbM10sXHJcbiAgICAgIGJ4MSA9IHZbMF0gKiAwLjUsXHJcbiAgICAgIGJ5MSA9IHZbMV0gKiAwLjUsXHJcbiAgICAgIGJ6MSA9IHZbMl0gKiAwLjUsXHJcbiAgICAgIGF4MiA9IGFbNF0sXHJcbiAgICAgIGF5MiA9IGFbNV0sXHJcbiAgICAgIGF6MiA9IGFbNl0sXHJcbiAgICAgIGF3MiA9IGFbN107XHJcbiAgb3V0WzBdID0gYXgxO1xyXG4gIG91dFsxXSA9IGF5MTtcclxuICBvdXRbMl0gPSBhejE7XHJcbiAgb3V0WzNdID0gYXcxO1xyXG4gIG91dFs0XSA9IGF3MSAqIGJ4MSArIGF5MSAqIGJ6MSAtIGF6MSAqIGJ5MSArIGF4MjtcclxuICBvdXRbNV0gPSBhdzEgKiBieTEgKyBhejEgKiBieDEgLSBheDEgKiBiejEgKyBheTI7XHJcbiAgb3V0WzZdID0gYXcxICogYnoxICsgYXgxICogYnkxIC0gYXkxICogYngxICsgYXoyO1xyXG4gIG91dFs3XSA9IC1heDEgKiBieDEgLSBheTEgKiBieTEgLSBhejEgKiBiejEgKyBhdzI7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBkdWFsIHF1YXQgYXJvdW5kIHRoZSBYIGF4aXNcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcclxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBob3cgZmFyIHNob3VsZCB0aGUgcm90YXRpb24gYmVcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVYKG91dCwgYSwgcmFkKSB7XHJcbiAgdmFyIGJ4ID0gLWFbMF0sXHJcbiAgICAgIGJ5ID0gLWFbMV0sXHJcbiAgICAgIGJ6ID0gLWFbMl0sXHJcbiAgICAgIGJ3ID0gYVszXSxcclxuICAgICAgYXggPSBhWzRdLFxyXG4gICAgICBheSA9IGFbNV0sXHJcbiAgICAgIGF6ID0gYVs2XSxcclxuICAgICAgYXcgPSBhWzddLFxyXG4gICAgICBheDEgPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5LFxyXG4gICAgICBheTEgPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6LFxyXG4gICAgICBhejEgPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4LFxyXG4gICAgICBhdzEgPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xyXG4gIHF1YXQucm90YXRlWChvdXQsIGEsIHJhZCk7XHJcbiAgYnggPSBvdXRbMF07XHJcbiAgYnkgPSBvdXRbMV07XHJcbiAgYnogPSBvdXRbMl07XHJcbiAgYncgPSBvdXRbM107XHJcbiAgb3V0WzRdID0gYXgxICogYncgKyBhdzEgKiBieCArIGF5MSAqIGJ6IC0gYXoxICogYnk7XHJcbiAgb3V0WzVdID0gYXkxICogYncgKyBhdzEgKiBieSArIGF6MSAqIGJ4IC0gYXgxICogYno7XHJcbiAgb3V0WzZdID0gYXoxICogYncgKyBhdzEgKiBieiArIGF4MSAqIGJ5IC0gYXkxICogYng7XHJcbiAgb3V0WzddID0gYXcxICogYncgLSBheDEgKiBieCAtIGF5MSAqIGJ5IC0gYXoxICogYno7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBkdWFsIHF1YXQgYXJvdW5kIHRoZSBZIGF4aXNcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcclxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBob3cgZmFyIHNob3VsZCB0aGUgcm90YXRpb24gYmVcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgcmFkKSB7XHJcbiAgdmFyIGJ4ID0gLWFbMF0sXHJcbiAgICAgIGJ5ID0gLWFbMV0sXHJcbiAgICAgIGJ6ID0gLWFbMl0sXHJcbiAgICAgIGJ3ID0gYVszXSxcclxuICAgICAgYXggPSBhWzRdLFxyXG4gICAgICBheSA9IGFbNV0sXHJcbiAgICAgIGF6ID0gYVs2XSxcclxuICAgICAgYXcgPSBhWzddLFxyXG4gICAgICBheDEgPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5LFxyXG4gICAgICBheTEgPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6LFxyXG4gICAgICBhejEgPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4LFxyXG4gICAgICBhdzEgPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xyXG4gIHF1YXQucm90YXRlWShvdXQsIGEsIHJhZCk7XHJcbiAgYnggPSBvdXRbMF07XHJcbiAgYnkgPSBvdXRbMV07XHJcbiAgYnogPSBvdXRbMl07XHJcbiAgYncgPSBvdXRbM107XHJcbiAgb3V0WzRdID0gYXgxICogYncgKyBhdzEgKiBieCArIGF5MSAqIGJ6IC0gYXoxICogYnk7XHJcbiAgb3V0WzVdID0gYXkxICogYncgKyBhdzEgKiBieSArIGF6MSAqIGJ4IC0gYXgxICogYno7XHJcbiAgb3V0WzZdID0gYXoxICogYncgKyBhdzEgKiBieiArIGF4MSAqIGJ5IC0gYXkxICogYng7XHJcbiAgb3V0WzddID0gYXcxICogYncgLSBheDEgKiBieCAtIGF5MSAqIGJ5IC0gYXoxICogYno7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBkdWFsIHF1YXQgYXJvdW5kIHRoZSBaIGF4aXNcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcclxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBob3cgZmFyIHNob3VsZCB0aGUgcm90YXRpb24gYmVcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVaKG91dCwgYSwgcmFkKSB7XHJcbiAgdmFyIGJ4ID0gLWFbMF0sXHJcbiAgICAgIGJ5ID0gLWFbMV0sXHJcbiAgICAgIGJ6ID0gLWFbMl0sXHJcbiAgICAgIGJ3ID0gYVszXSxcclxuICAgICAgYXggPSBhWzRdLFxyXG4gICAgICBheSA9IGFbNV0sXHJcbiAgICAgIGF6ID0gYVs2XSxcclxuICAgICAgYXcgPSBhWzddLFxyXG4gICAgICBheDEgPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5LFxyXG4gICAgICBheTEgPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6LFxyXG4gICAgICBhejEgPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4LFxyXG4gICAgICBhdzEgPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xyXG4gIHF1YXQucm90YXRlWihvdXQsIGEsIHJhZCk7XHJcbiAgYnggPSBvdXRbMF07XHJcbiAgYnkgPSBvdXRbMV07XHJcbiAgYnogPSBvdXRbMl07XHJcbiAgYncgPSBvdXRbM107XHJcbiAgb3V0WzRdID0gYXgxICogYncgKyBhdzEgKiBieCArIGF5MSAqIGJ6IC0gYXoxICogYnk7XHJcbiAgb3V0WzVdID0gYXkxICogYncgKyBhdzEgKiBieSArIGF6MSAqIGJ4IC0gYXgxICogYno7XHJcbiAgb3V0WzZdID0gYXoxICogYncgKyBhdzEgKiBieiArIGF4MSAqIGJ5IC0gYXkxICogYng7XHJcbiAgb3V0WzddID0gYXcxICogYncgLSBheDEgKiBieCAtIGF5MSAqIGJ5IC0gYXoxICogYno7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBkdWFsIHF1YXQgYnkgYSBnaXZlbiBxdWF0ZXJuaW9uIChhICogcSlcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcclxuICogQHBhcmFtIHtxdWF0fSBxIHF1YXRlcm5pb24gdG8gcm90YXRlIGJ5XHJcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlQnlRdWF0QXBwZW5kKG91dCwgYSwgcSkge1xyXG4gIHZhciBxeCA9IHFbMF0sXHJcbiAgICAgIHF5ID0gcVsxXSxcclxuICAgICAgcXogPSBxWzJdLFxyXG4gICAgICBxdyA9IHFbM10sXHJcbiAgICAgIGF4ID0gYVswXSxcclxuICAgICAgYXkgPSBhWzFdLFxyXG4gICAgICBheiA9IGFbMl0sXHJcbiAgICAgIGF3ID0gYVszXTtcclxuXHJcbiAgb3V0WzBdID0gYXggKiBxdyArIGF3ICogcXggKyBheSAqIHF6IC0gYXogKiBxeTtcclxuICBvdXRbMV0gPSBheSAqIHF3ICsgYXcgKiBxeSArIGF6ICogcXggLSBheCAqIHF6O1xyXG4gIG91dFsyXSA9IGF6ICogcXcgKyBhdyAqIHF6ICsgYXggKiBxeSAtIGF5ICogcXg7XHJcbiAgb3V0WzNdID0gYXcgKiBxdyAtIGF4ICogcXggLSBheSAqIHF5IC0gYXogKiBxejtcclxuICBheCA9IGFbNF07XHJcbiAgYXkgPSBhWzVdO1xyXG4gIGF6ID0gYVs2XTtcclxuICBhdyA9IGFbN107XHJcbiAgb3V0WzRdID0gYXggKiBxdyArIGF3ICogcXggKyBheSAqIHF6IC0gYXogKiBxeTtcclxuICBvdXRbNV0gPSBheSAqIHF3ICsgYXcgKiBxeSArIGF6ICogcXggLSBheCAqIHF6O1xyXG4gIG91dFs2XSA9IGF6ICogcXcgKyBhdyAqIHF6ICsgYXggKiBxeSAtIGF5ICogcXg7XHJcbiAgb3V0WzddID0gYXcgKiBxdyAtIGF4ICogcXggLSBheSAqIHF5IC0gYXogKiBxejtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUm90YXRlcyBhIGR1YWwgcXVhdCBieSBhIGdpdmVuIHF1YXRlcm5pb24gKHEgKiBhKVxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtxdWF0fSBxIHF1YXRlcm5pb24gdG8gcm90YXRlIGJ5XHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVCeVF1YXRQcmVwZW5kKG91dCwgcSwgYSkge1xyXG4gIHZhciBxeCA9IHFbMF0sXHJcbiAgICAgIHF5ID0gcVsxXSxcclxuICAgICAgcXogPSBxWzJdLFxyXG4gICAgICBxdyA9IHFbM10sXHJcbiAgICAgIGJ4ID0gYVswXSxcclxuICAgICAgYnkgPSBhWzFdLFxyXG4gICAgICBieiA9IGFbMl0sXHJcbiAgICAgIGJ3ID0gYVszXTtcclxuXHJcbiAgb3V0WzBdID0gcXggKiBidyArIHF3ICogYnggKyBxeSAqIGJ6IC0gcXogKiBieTtcclxuICBvdXRbMV0gPSBxeSAqIGJ3ICsgcXcgKiBieSArIHF6ICogYnggLSBxeCAqIGJ6O1xyXG4gIG91dFsyXSA9IHF6ICogYncgKyBxdyAqIGJ6ICsgcXggKiBieSAtIHF5ICogYng7XHJcbiAgb3V0WzNdID0gcXcgKiBidyAtIHF4ICogYnggLSBxeSAqIGJ5IC0gcXogKiBiejtcclxuICBieCA9IGFbNF07XHJcbiAgYnkgPSBhWzVdO1xyXG4gIGJ6ID0gYVs2XTtcclxuICBidyA9IGFbN107XHJcbiAgb3V0WzRdID0gcXggKiBidyArIHF3ICogYnggKyBxeSAqIGJ6IC0gcXogKiBieTtcclxuICBvdXRbNV0gPSBxeSAqIGJ3ICsgcXcgKiBieSArIHF6ICogYnggLSBxeCAqIGJ6O1xyXG4gIG91dFs2XSA9IHF6ICogYncgKyBxdyAqIGJ6ICsgcXggKiBieSAtIHF5ICogYng7XHJcbiAgb3V0WzddID0gcXcgKiBidyAtIHF4ICogYnggLSBxeSAqIGJ5IC0gcXogKiBiejtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUm90YXRlcyBhIGR1YWwgcXVhdCBhcm91bmQgYSBnaXZlbiBheGlzLiBEb2VzIHRoZSBub3JtYWxpc2F0aW9uIGF1dG9tYXRpY2FsbHlcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcclxuICogQHBhcmFtIHt2ZWMzfSBheGlzIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCBob3cgZmFyIHRoZSByb3RhdGlvbiBzaG91bGQgYmVcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVBcm91bmRBeGlzKG91dCwgYSwgYXhpcywgcmFkKSB7XHJcbiAgLy9TcGVjaWFsIGNhc2UgZm9yIHJhZCA9IDBcclxuICBpZiAoTWF0aC5hYnMocmFkKSA8IGdsTWF0cml4LkVQU0lMT04pIHtcclxuICAgIHJldHVybiBjb3B5KG91dCwgYSk7XHJcbiAgfVxyXG4gIHZhciBheGlzTGVuZ3RoID0gTWF0aC5zcXJ0KGF4aXNbMF0gKiBheGlzWzBdICsgYXhpc1sxXSAqIGF4aXNbMV0gKyBheGlzWzJdICogYXhpc1syXSk7XHJcblxyXG4gIHJhZCA9IHJhZCAqIDAuNTtcclxuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XHJcbiAgdmFyIGJ4ID0gcyAqIGF4aXNbMF0gLyBheGlzTGVuZ3RoO1xyXG4gIHZhciBieSA9IHMgKiBheGlzWzFdIC8gYXhpc0xlbmd0aDtcclxuICB2YXIgYnogPSBzICogYXhpc1syXSAvIGF4aXNMZW5ndGg7XHJcbiAgdmFyIGJ3ID0gTWF0aC5jb3MocmFkKTtcclxuXHJcbiAgdmFyIGF4MSA9IGFbMF0sXHJcbiAgICAgIGF5MSA9IGFbMV0sXHJcbiAgICAgIGF6MSA9IGFbMl0sXHJcbiAgICAgIGF3MSA9IGFbM107XHJcbiAgb3V0WzBdID0gYXgxICogYncgKyBhdzEgKiBieCArIGF5MSAqIGJ6IC0gYXoxICogYnk7XHJcbiAgb3V0WzFdID0gYXkxICogYncgKyBhdzEgKiBieSArIGF6MSAqIGJ4IC0gYXgxICogYno7XHJcbiAgb3V0WzJdID0gYXoxICogYncgKyBhdzEgKiBieiArIGF4MSAqIGJ5IC0gYXkxICogYng7XHJcbiAgb3V0WzNdID0gYXcxICogYncgLSBheDEgKiBieCAtIGF5MSAqIGJ5IC0gYXoxICogYno7XHJcblxyXG4gIHZhciBheCA9IGFbNF0sXHJcbiAgICAgIGF5ID0gYVs1XSxcclxuICAgICAgYXogPSBhWzZdLFxyXG4gICAgICBhdyA9IGFbN107XHJcbiAgb3V0WzRdID0gYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieTtcclxuICBvdXRbNV0gPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6O1xyXG4gIG91dFs2XSA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYng7XHJcbiAgb3V0WzddID0gYXcgKiBidyAtIGF4ICogYnggLSBheSAqIGJ5IC0gYXogKiBiejtcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHMgdHdvIGR1YWwgcXVhdCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3F1YXQyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcclxuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcclxuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcclxuICBvdXRbM10gPSBhWzNdICsgYlszXTtcclxuICBvdXRbNF0gPSBhWzRdICsgYls0XTtcclxuICBvdXRbNV0gPSBhWzVdICsgYls1XTtcclxuICBvdXRbNl0gPSBhWzZdICsgYls2XTtcclxuICBvdXRbN10gPSBhWzddICsgYls3XTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTXVsdGlwbGllcyB0d28gZHVhbCBxdWF0J3NcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtxdWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcclxuICB2YXIgYXgwID0gYVswXSxcclxuICAgICAgYXkwID0gYVsxXSxcclxuICAgICAgYXowID0gYVsyXSxcclxuICAgICAgYXcwID0gYVszXSxcclxuICAgICAgYngxID0gYls0XSxcclxuICAgICAgYnkxID0gYls1XSxcclxuICAgICAgYnoxID0gYls2XSxcclxuICAgICAgYncxID0gYls3XSxcclxuICAgICAgYXgxID0gYVs0XSxcclxuICAgICAgYXkxID0gYVs1XSxcclxuICAgICAgYXoxID0gYVs2XSxcclxuICAgICAgYXcxID0gYVs3XSxcclxuICAgICAgYngwID0gYlswXSxcclxuICAgICAgYnkwID0gYlsxXSxcclxuICAgICAgYnowID0gYlsyXSxcclxuICAgICAgYncwID0gYlszXTtcclxuICBvdXRbMF0gPSBheDAgKiBidzAgKyBhdzAgKiBieDAgKyBheTAgKiBiejAgLSBhejAgKiBieTA7XHJcbiAgb3V0WzFdID0gYXkwICogYncwICsgYXcwICogYnkwICsgYXowICogYngwIC0gYXgwICogYnowO1xyXG4gIG91dFsyXSA9IGF6MCAqIGJ3MCArIGF3MCAqIGJ6MCArIGF4MCAqIGJ5MCAtIGF5MCAqIGJ4MDtcclxuICBvdXRbM10gPSBhdzAgKiBidzAgLSBheDAgKiBieDAgLSBheTAgKiBieTAgLSBhejAgKiBiejA7XHJcbiAgb3V0WzRdID0gYXgwICogYncxICsgYXcwICogYngxICsgYXkwICogYnoxIC0gYXowICogYnkxICsgYXgxICogYncwICsgYXcxICogYngwICsgYXkxICogYnowIC0gYXoxICogYnkwO1xyXG4gIG91dFs1XSA9IGF5MCAqIGJ3MSArIGF3MCAqIGJ5MSArIGF6MCAqIGJ4MSAtIGF4MCAqIGJ6MSArIGF5MSAqIGJ3MCArIGF3MSAqIGJ5MCArIGF6MSAqIGJ4MCAtIGF4MSAqIGJ6MDtcclxuICBvdXRbNl0gPSBhejAgKiBidzEgKyBhdzAgKiBiejEgKyBheDAgKiBieTEgLSBheTAgKiBieDEgKyBhejEgKiBidzAgKyBhdzEgKiBiejAgKyBheDEgKiBieTAgLSBheTEgKiBieDA7XHJcbiAgb3V0WzddID0gYXcwICogYncxIC0gYXgwICogYngxIC0gYXkwICogYnkxIC0gYXowICogYnoxICsgYXcxICogYncwIC0gYXgxICogYngwIC0gYXkxICogYnkwIC0gYXoxICogYnowO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHF1YXQyLm11bHRpcGx5fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XHJcblxyXG4vKipcclxuICogU2NhbGVzIGEgZHVhbCBxdWF0IGJ5IGEgc2NhbGFyIG51bWJlclxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRcclxuICogQHBhcmFtIHtxdWF0Mn0gYSB0aGUgZHVhbCBxdWF0IHRvIHNjYWxlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgZHVhbCBxdWF0IGJ5XHJcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKiBiO1xyXG4gIG91dFsxXSA9IGFbMV0gKiBiO1xyXG4gIG91dFsyXSA9IGFbMl0gKiBiO1xyXG4gIG91dFszXSA9IGFbM10gKiBiO1xyXG4gIG91dFs0XSA9IGFbNF0gKiBiO1xyXG4gIG91dFs1XSA9IGFbNV0gKiBiO1xyXG4gIG91dFs2XSA9IGFbNl0gKiBiO1xyXG4gIG91dFs3XSA9IGFbN10gKiBiO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gZHVhbCBxdWF0J3MgKFRoZSBkb3QgcHJvZHVjdCBvZiB0aGUgcmVhbCBwYXJ0cylcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3F1YXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBkb3QgPSBxdWF0LmRvdDtcclxuXHJcbi8qKlxyXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIGR1YWwgcXVhdHMnc1xyXG4gKiBOT1RFOiBUaGUgcmVzdWx0aW5nIGR1YWwgcXVhdGVybmlvbnMgd29uJ3QgYWx3YXlzIGJlIG5vcm1hbGl6ZWQgKFRoZSBlcnJvciBpcyBtb3N0IG5vdGljZWFibGUgd2hlbiB0ID0gMC41KVxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRcclxuICogQHBhcmFtIHtxdWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3F1YXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcclxuICB2YXIgbXQgPSAxIC0gdDtcclxuICBpZiAoZG90KGEsIGIpIDwgMCkgdCA9IC10O1xyXG5cclxuICBvdXRbMF0gPSBhWzBdICogbXQgKyBiWzBdICogdDtcclxuICBvdXRbMV0gPSBhWzFdICogbXQgKyBiWzFdICogdDtcclxuICBvdXRbMl0gPSBhWzJdICogbXQgKyBiWzJdICogdDtcclxuICBvdXRbM10gPSBhWzNdICogbXQgKyBiWzNdICogdDtcclxuICBvdXRbNF0gPSBhWzRdICogbXQgKyBiWzRdICogdDtcclxuICBvdXRbNV0gPSBhWzVdICogbXQgKyBiWzVdICogdDtcclxuICBvdXRbNl0gPSBhWzZdICogbXQgKyBiWzZdICogdDtcclxuICBvdXRbN10gPSBhWzddICogbXQgKyBiWzddICogdDtcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGludmVyc2Ugb2YgYSBkdWFsIHF1YXQuIElmIHRoZXkgYXJlIG5vcm1hbGl6ZWQsIGNvbmp1Z2F0ZSBpcyBjaGVhcGVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3F1YXQyfSBhIGR1YWwgcXVhdCB0byBjYWxjdWxhdGUgaW52ZXJzZSBvZlxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcclxuICB2YXIgc3FsZW4gPSBzcXVhcmVkTGVuZ3RoKGEpO1xyXG4gIG91dFswXSA9IC1hWzBdIC8gc3FsZW47XHJcbiAgb3V0WzFdID0gLWFbMV0gLyBzcWxlbjtcclxuICBvdXRbMl0gPSAtYVsyXSAvIHNxbGVuO1xyXG4gIG91dFszXSA9IGFbM10gLyBzcWxlbjtcclxuICBvdXRbNF0gPSAtYVs0XSAvIHNxbGVuO1xyXG4gIG91dFs1XSA9IC1hWzVdIC8gc3FsZW47XHJcbiAgb3V0WzZdID0gLWFbNl0gLyBzcWxlbjtcclxuICBvdXRbN10gPSBhWzddIC8gc3FsZW47XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbmp1Z2F0ZSBvZiBhIGR1YWwgcXVhdFxyXG4gKiBJZiB0aGUgZHVhbCBxdWF0ZXJuaW9uIGlzIG5vcm1hbGl6ZWQsIHRoaXMgZnVuY3Rpb24gaXMgZmFzdGVyIHRoYW4gcXVhdDIuaW52ZXJzZSBhbmQgcHJvZHVjZXMgdGhlIHNhbWUgcmVzdWx0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgcXVhdCB0byBjYWxjdWxhdGUgY29uanVnYXRlIG9mXHJcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29uanVnYXRlKG91dCwgYSkge1xyXG4gIG91dFswXSA9IC1hWzBdO1xyXG4gIG91dFsxXSA9IC1hWzFdO1xyXG4gIG91dFsyXSA9IC1hWzJdO1xyXG4gIG91dFszXSA9IGFbM107XHJcbiAgb3V0WzRdID0gLWFbNF07XHJcbiAgb3V0WzVdID0gLWFbNV07XHJcbiAgb3V0WzZdID0gLWFbNl07XHJcbiAgb3V0WzddID0gYVs3XTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgZHVhbCBxdWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgZHVhbCBxdWF0IHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcclxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIGxlbmd0aCA9IHF1YXQubGVuZ3RoO1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdDIubGVuZ3RofVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgbGVuID0gbGVuZ3RoO1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgZHVhbCBxdWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgZHVhbCBxdWF0IHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGxlbmd0aCBvZiBhXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBzcXVhcmVkTGVuZ3RoID0gcXVhdC5zcXVhcmVkTGVuZ3RoO1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdDIuc3F1YXJlZExlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XHJcblxyXG4vKipcclxuICogTm9ybWFsaXplIGEgZHVhbCBxdWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3F1YXQyfSBhIGR1YWwgcXVhdGVybmlvbiB0byBub3JtYWxpemVcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xyXG4gIHZhciBtYWduaXR1ZGUgPSBzcXVhcmVkTGVuZ3RoKGEpO1xyXG4gIGlmIChtYWduaXR1ZGUgPiAwKSB7XHJcbiAgICBtYWduaXR1ZGUgPSBNYXRoLnNxcnQobWFnbml0dWRlKTtcclxuXHJcbiAgICB2YXIgYTAgPSBhWzBdIC8gbWFnbml0dWRlO1xyXG4gICAgdmFyIGExID0gYVsxXSAvIG1hZ25pdHVkZTtcclxuICAgIHZhciBhMiA9IGFbMl0gLyBtYWduaXR1ZGU7XHJcbiAgICB2YXIgYTMgPSBhWzNdIC8gbWFnbml0dWRlO1xyXG5cclxuICAgIHZhciBiMCA9IGFbNF07XHJcbiAgICB2YXIgYjEgPSBhWzVdO1xyXG4gICAgdmFyIGIyID0gYVs2XTtcclxuICAgIHZhciBiMyA9IGFbN107XHJcblxyXG4gICAgdmFyIGFfZG90X2IgPSBhMCAqIGIwICsgYTEgKiBiMSArIGEyICogYjIgKyBhMyAqIGIzO1xyXG5cclxuICAgIG91dFswXSA9IGEwO1xyXG4gICAgb3V0WzFdID0gYTE7XHJcbiAgICBvdXRbMl0gPSBhMjtcclxuICAgIG91dFszXSA9IGEzO1xyXG5cclxuICAgIG91dFs0XSA9IChiMCAtIGEwICogYV9kb3RfYikgLyBtYWduaXR1ZGU7XHJcbiAgICBvdXRbNV0gPSAoYjEgLSBhMSAqIGFfZG90X2IpIC8gbWFnbml0dWRlO1xyXG4gICAgb3V0WzZdID0gKGIyIC0gYTIgKiBhX2RvdF9iKSAvIG1hZ25pdHVkZTtcclxuICAgIG91dFs3XSA9IChiMyAtIGEzICogYV9kb3RfYikgLyBtYWduaXR1ZGU7XHJcbiAgfVxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgZHVhbCBxdWF0ZW5pb25cclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gYSBkdWFsIHF1YXRlcm5pb24gdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZHVhbCBxdWF0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcclxuICByZXR1cm4gJ3F1YXQyKCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnLCAnICsgYVsyXSArICcsICcgKyBhWzNdICsgJywgJyArIGFbNF0gKyAnLCAnICsgYVs1XSArICcsICcgKyBhWzZdICsgJywgJyArIGFbN10gKyAnKSc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBkdWFsIHF1YXRlcm5pb25zIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gYSB0aGUgZmlyc3QgZHVhbCBxdWF0ZXJuaW9uLlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBiIHRoZSBzZWNvbmQgZHVhbCBxdWF0ZXJuaW9uLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgZHVhbCBxdWF0ZXJuaW9ucyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XHJcbiAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdICYmIGFbM10gPT09IGJbM10gJiYgYVs0XSA9PT0gYls0XSAmJiBhWzVdID09PSBiWzVdICYmIGFbNl0gPT09IGJbNl0gJiYgYVs3XSA9PT0gYls3XTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGR1YWwgcXVhdGVybmlvbnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBhIHRoZSBmaXJzdCBkdWFsIHF1YXQuXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGIgdGhlIHNlY29uZCBkdWFsIHF1YXQuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGlmIHRoZSBkdWFsIHF1YXRzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XHJcbiAgdmFyIGEwID0gYVswXSxcclxuICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICBhMiA9IGFbMl0sXHJcbiAgICAgIGEzID0gYVszXSxcclxuICAgICAgYTQgPSBhWzRdLFxyXG4gICAgICBhNSA9IGFbNV0sXHJcbiAgICAgIGE2ID0gYVs2XSxcclxuICAgICAgYTcgPSBhWzddO1xyXG4gIHZhciBiMCA9IGJbMF0sXHJcbiAgICAgIGIxID0gYlsxXSxcclxuICAgICAgYjIgPSBiWzJdLFxyXG4gICAgICBiMyA9IGJbM10sXHJcbiAgICAgIGI0ID0gYls0XSxcclxuICAgICAgYjUgPSBiWzVdLFxyXG4gICAgICBiNiA9IGJbNl0sXHJcbiAgICAgIGI3ID0gYls3XTtcclxuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiYgTWF0aC5hYnMoYTMgLSBiMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpICYmIE1hdGguYWJzKGE0IC0gYjQpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE0KSwgTWF0aC5hYnMoYjQpKSAmJiBNYXRoLmFicyhhNSAtIGI1KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNSksIE1hdGguYWJzKGI1KSkgJiYgTWF0aC5hYnMoYTYgLSBiNikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTYpLCBNYXRoLmFicyhiNikpICYmIE1hdGguYWJzKGE3IC0gYjcpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE3KSwgTWF0aC5hYnMoYjcpKTtcclxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvbGliL2dsLW1hdHJpeC9xdWF0Mi5qc1xuLy8gbW9kdWxlIGlkID0gMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"create\"] = create;\n/* harmony export (immutable) */ __webpack_exports__[\"clone\"] = clone;\n/* harmony export (immutable) */ __webpack_exports__[\"fromValues\"] = fromValues;\n/* harmony export (immutable) */ __webpack_exports__[\"copy\"] = copy;\n/* harmony export (immutable) */ __webpack_exports__[\"set\"] = set;\n/* harmony export (immutable) */ __webpack_exports__[\"add\"] = add;\n/* harmony export (immutable) */ __webpack_exports__[\"subtract\"] = subtract;\n/* harmony export (immutable) */ __webpack_exports__[\"multiply\"] = multiply;\n/* harmony export (immutable) */ __webpack_exports__[\"divide\"] = divide;\n/* harmony export (immutable) */ __webpack_exports__[\"ceil\"] = ceil;\n/* harmony export (immutable) */ __webpack_exports__[\"floor\"] = floor;\n/* harmony export (immutable) */ __webpack_exports__[\"min\"] = min;\n/* harmony export (immutable) */ __webpack_exports__[\"max\"] = max;\n/* harmony export (immutable) */ __webpack_exports__[\"round\"] = round;\n/* harmony export (immutable) */ __webpack_exports__[\"scale\"] = scale;\n/* harmony export (immutable) */ __webpack_exports__[\"scaleAndAdd\"] = scaleAndAdd;\n/* harmony export (immutable) */ __webpack_exports__[\"distance\"] = distance;\n/* harmony export (immutable) */ __webpack_exports__[\"squaredDistance\"] = squaredDistance;\n/* harmony export (immutable) */ __webpack_exports__[\"length\"] = length;\n/* harmony export (immutable) */ __webpack_exports__[\"squaredLength\"] = squaredLength;\n/* harmony export (immutable) */ __webpack_exports__[\"negate\"] = negate;\n/* harmony export (immutable) */ __webpack_exports__[\"inverse\"] = inverse;\n/* harmony export (immutable) */ __webpack_exports__[\"normalize\"] = normalize;\n/* harmony export (immutable) */ __webpack_exports__[\"dot\"] = dot;\n/* harmony export (immutable) */ __webpack_exports__[\"cross\"] = cross;\n/* harmony export (immutable) */ __webpack_exports__[\"lerp\"] = lerp;\n/* harmony export (immutable) */ __webpack_exports__[\"random\"] = random;\n/* harmony export (immutable) */ __webpack_exports__[\"transformMat2\"] = transformMat2;\n/* harmony export (immutable) */ __webpack_exports__[\"transformMat2d\"] = transformMat2d;\n/* harmony export (immutable) */ __webpack_exports__[\"transformMat3\"] = transformMat3;\n/* harmony export (immutable) */ __webpack_exports__[\"transformMat4\"] = transformMat4;\n/* harmony export (immutable) */ __webpack_exports__[\"rotate\"] = rotate;\n/* harmony export (immutable) */ __webpack_exports__[\"angle\"] = angle;\n/* harmony export (immutable) */ __webpack_exports__[\"str\"] = str;\n/* harmony export (immutable) */ __webpack_exports__[\"exactEquals\"] = exactEquals;\n/* harmony export (immutable) */ __webpack_exports__[\"equals\"] = equals;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"len\", function() { return len; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"div\", function() { return div; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dist\", function() { return dist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrDist\", function() { return sqrDist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrLen\", function() { return sqrLen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEach\", function() { return forEach; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_js__ = __webpack_require__(1);\n\r\n\r\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\r\nfunction create() {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](2);\r\n  if (__WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"] != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\r\nfunction clone(a) {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](2);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\r\nfunction fromValues(x, y) {\r\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common_js__[\"ARRAY_TYPE\"](2);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\r\nfunction set(out, x, y) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nfunction multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nfunction divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\r\nfunction ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\r\nfunction floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nfunction min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nfunction max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\r\nfunction round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\r\nfunction scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\r\nfunction scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nfunction distance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1];\r\n  return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nfunction squaredDistance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1];\r\n  return x * x + y * y;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nfunction length(a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nfunction squaredLength(a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  return x * x + y * y;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\nfunction negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\r\nfunction inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\r\nfunction normalize(out, a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  var len = x * x + y * y;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nfunction dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\r\nfunction cross(out, a, b) {\r\n  var z = a[0] * b[1] - a[1] * b[0];\r\n  out[0] = out[1] = 0;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\r\nfunction lerp(out, a, b, t) {\r\n  var ax = a[0],\r\n      ay = a[1];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\r\nfunction random(out, scale) {\r\n  scale = scale || 1.0;\r\n  var r = __WEBPACK_IMPORTED_MODULE_0__common_js__[\"RANDOM\"]() * 2.0 * Math.PI;\r\n  out[0] = Math.cos(r) * scale;\r\n  out[1] = Math.sin(r) * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nfunction transformMat2(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[2] * y;\r\n  out[1] = m[1] * x + m[3] * y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nfunction transformMat2d(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[2] * y + m[4];\r\n  out[1] = m[1] * x + m[3] * y + m[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nfunction transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[3] * y + m[6];\r\n  out[1] = m[1] * x + m[4] * y + m[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nfunction transformMat4(out, a, m) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  out[0] = m[0] * x + m[4] * y + m[12];\r\n  out[1] = m[1] * x + m[5] * y + m[13];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\r\nfunction rotate(out, a, b, c) {\r\n  //Translate point to the origin\r\n  var p0 = a[0] - b[0],\r\n      p1 = a[1] - b[1],\r\n      sinC = Math.sin(c),\r\n      cosC = Math.cos(c);\r\n\r\n  //perform rotation and translate to correct position\r\n  out[0] = p0 * cosC - p1 * sinC + b[0];\r\n  out[1] = p0 * sinC + p1 * cosC + b[1];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nfunction angle(a, b) {\r\n  var x1 = a[0],\r\n      y1 = a[1],\r\n      x2 = b[0],\r\n      y2 = b[1];\r\n\r\n  var len1 = x1 * x1 + y1 * y1;\r\n  if (len1 > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len1 = 1 / Math.sqrt(len1);\r\n  }\r\n\r\n  var len2 = x2 * x2 + y2 * y2;\r\n  if (len2 > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len2 = 1 / Math.sqrt(len2);\r\n  }\r\n\r\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nfunction str(a) {\r\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nfunction equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1];\r\n  var b0 = b[0],\r\n      b1 = b[1];\r\n  return Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common_js__[\"EPSILON\"] * Math.max(1.0, Math.abs(a1), Math.abs(b1));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\r\nvar len = length;\r\n\r\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\r\nvar sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\r\nvar mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\r\nvar div = divide;\r\n\r\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\r\nvar dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\r\nvar sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\r\nvar sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nvar forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 2;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export getPixelRatio */\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = makeCanvasAutoHighDPI;\n/* eslint-disable func-names */\n\n/**\n * Gets the pixel ratio of a specific HTML canvas 2d context\n * @param  {CanvasRenderingContext2D} canvasCtx\n * @return {number}           pixel ratio of the canvas 2d context\n */\n\nfunction getPixelRatio(canvasCtx) {\n  var backingStore = canvasCtx.backingStorePixelRatio || canvasCtx.webkitBackingStorePixelRatio || canvasCtx.mozBackingStorePixelRatio || canvasCtx.msBackingStorePixelRatio || canvasCtx.oBackingStorePixelRatio || canvasCtx.backingStorePixelRatio || 1;\n  return (window.devicePixelRatio || 1) / backingStore;\n}\n/**\n * Wraps certain canvas 2d context APIs to handle\n * displays with high per-pixel ratios. This is useful\n * so that the API can be called with screen-space coordinates\n * and the wrappers modify the arguments of those APIs to properly\n * handle displays with high pixel densities\n * @param  {CanvasRenderingContext2D} canvasCtx\n * @return {number}           pixel ratio of the wrapped canvas context\n */\n\nfunction makeCanvasAutoHighDPI(canvasCtx) {\n  var pixelRatio = getPixelRatio(canvasCtx);\n\n  if (pixelRatio === 1) {\n    return 1;\n  }\n\n  var allRatioArgs = [\"fillRect\", \"clearRect\", \"strokeRect\", // \"moveTo\",\n  // \"lineTo\",\n  // \"arcTo\",\n  // \"bezierCurveTo\",\n  \"isPointInPath\", \"isPointInStroke\" // \"quadraticCurveTo\",\n  // \"rect\",\n  // \"translate\",\n  // \"createRadialGradient\",\n  // \"createLinearGradient\"\n  ];\n  allRatioArgs.forEach(function (funcName) {\n    canvasCtx[funcName] = function (_super) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        args = args.map(function (a) {\n          return a * pixelRatio;\n        });\n        return _super.apply(this, args);\n      };\n    }(canvasCtx[funcName]);\n  }); // const ratioArgsByIndex = {\n  //   arc: [0, 1, 2]\n  // }\n  // Object.getOwnPropertyNames(ratioArgsByIndex).forEach(funcName => {\n  //   const value = ratioArgsByIndex[funcName]\n  //   canvasCtx[funcName] = (function(_super) {\n  //     return function(...args) {\n  //       let i = 0\n  //       let len = 0\n  //       for (i = 0, len = value.length; i < len; i += 1) {\n  //         args[value[i]] *= pixelRatio\n  //       }\n  //       return _super.apply(this, args)\n  //     }\n  //   })(canvasCtx[funcName])\n  // })\n  // // Stroke lineWidth adjustment\n  // canvasCtx.stroke = (function(_super) {\n  //   return function(...args) {\n  //     this.lineWidth *= pixelRatio\n  //     _super.apply(this, args)\n  //     this.lineWidth /= pixelRatio\n  //   }\n  // })(canvasCtx.stroke)\n  // // Text\n  // //\n  // canvasCtx.fillText = (function(_super) {\n  //   return function(...args) {\n  //     args[1] *= pixelRatio // x\n  //     args[2] *= pixelRatio // y\n  //     this.font = this.font.replace(\n  //       /(\\d+)(px|em|rem|pt)/g,\n  //       function(w, m, u) {\n  //         return (m * pixelRatio) + u\n  //       }\n  //     )\n  //     _super.apply(this, args)\n  //     this.font = this.font.replace(\n  //       /(\\d+)(px|em|rem|pt)/g,\n  //       function(w, m, u) {\n  //         return (m / pixelRatio) + u\n  //       }\n  //     )\n  //   }\n  // })(canvasCtx.fillText)\n  // canvasCtx.strokeText = (function(_super) {\n  //   return function(...args) {\n  //     args[1] *= pixelRatio // x\n  //     args[2] *= pixelRatio // y\n  //     this.font = this.font.replace(\n  //       /(\\d+)(px|em|rem|pt)/g,\n  //       function(w, m, u) {\n  //         return (m * pixelRatio) + u\n  //       }\n  //     )\n  //     _super.apply(this, args)\n  //     this.font = this.font.replace(\n  //       /(\\d+)(px|em|rem|pt)/g,\n  //       function(w, m, u) {\n  //         return (m / pixelRatio) + u\n  //       }\n  //     )\n  //   }\n  // })(canvasCtx.strokeText)\n\n  var setTransformArgs = [pixelRatio, 0, 0, pixelRatio, 0, 0];\n\n  canvasCtx.setTransform = function (_super) {\n    return function () {\n      _super.apply(this, setTransformArgs);\n\n      this.transform.apply(this, arguments);\n    };\n  }(canvasCtx.setTransform);\n\n  return pixelRatio;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = bindAll;\n\n/**\n * Binds a this arg to a list of different function names.\n * This is most widely used to bind a this to member functions\n * that are used as callbacks in some fashion\n * @param  {string[]} funcNames array of member function names that are part of thisArg\n * @param  {Object} thisArg   object to bind\n */\n\nfunction bindAll(funcNames, thisArg) {\n  funcNames.forEach(function (funcName) {\n    if (!thisArg[funcName]) {\n      return;\n    }\n\n    thisArg[funcName] = thisArg[funcName].bind(thisArg);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi91dGlsL3V0aWxzLmpzPzMxMzEiXSwibmFtZXMiOlsiYmluZEFsbCIsImZ1bmNOYW1lcyIsInRoaXNBcmciLCJmb3JFYWNoIiwiZnVuY05hbWUiLCJiaW5kIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBRUE7Ozs7Ozs7O0FBT08sU0FBU0EsT0FBVCxDQUFpQkMsU0FBakIsRUFBNEJDLE9BQTVCLEVBQXFDO0FBQzFDRCxXQUFTLENBQUNFLE9BQVYsQ0FBa0IsVUFBQUMsUUFBUSxFQUFJO0FBQzVCLFFBQUksQ0FBQ0YsT0FBTyxDQUFDRSxRQUFELENBQVosRUFBd0I7QUFDdEI7QUFDRDs7QUFDREYsV0FBTyxDQUFDRSxRQUFELENBQVAsR0FBb0JGLE9BQU8sQ0FBQ0UsUUFBRCxDQUFQLENBQWtCQyxJQUFsQixDQUF1QkgsT0FBdkIsQ0FBcEI7QUFDRCxHQUxEO0FBTUQiLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuXG4vKipcbiAqIEJpbmRzIGEgdGhpcyBhcmcgdG8gYSBsaXN0IG9mIGRpZmZlcmVudCBmdW5jdGlvbiBuYW1lcy5cbiAqIFRoaXMgaXMgbW9zdCB3aWRlbHkgdXNlZCB0byBiaW5kIGEgdGhpcyB0byBtZW1iZXIgZnVuY3Rpb25zXG4gKiB0aGF0IGFyZSB1c2VkIGFzIGNhbGxiYWNrcyBpbiBzb21lIGZhc2hpb25cbiAqIEBwYXJhbSAge3N0cmluZ1tdfSBmdW5jTmFtZXMgYXJyYXkgb2YgbWVtYmVyIGZ1bmN0aW9uIG5hbWVzIHRoYXQgYXJlIHBhcnQgb2YgdGhpc0FyZ1xuICogQHBhcmFtICB7T2JqZWN0fSB0aGlzQXJnICAgb2JqZWN0IHRvIGJpbmRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmRBbGwoZnVuY05hbWVzLCB0aGlzQXJnKSB7XG4gIGZ1bmNOYW1lcy5mb3JFYWNoKGZ1bmNOYW1lID0+IHtcbiAgICBpZiAoIXRoaXNBcmdbZnVuY05hbWVdKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdGhpc0FyZ1tmdW5jTmFtZV0gPSB0aGlzQXJnW2Z1bmNOYW1lXS5iaW5kKHRoaXNBcmcpXG4gIH0pXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi91dGlsL3V0aWxzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Camera2d; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_aggregation__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shapes_transform2d__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_event_handler__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core_mat2d__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_matrix__ = __webpack_require__(0);\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n/**\n * Camera modification event\n * @event EventedCamera#changed\n * @type {object}\n * @property {string} attr Name of the attribute modified\n * @property {} prevVal Previous value of the attribute prior to modification\n * @property {} currVal Value of the attribute post modification\n */\n\n/**\n * @class Base camera class for 2d screen projections\n *        The base class is used only for the NDC to screen space trasform\n * @extends {EventHandler}\n */\n\nvar BaseCamera2d =\n/*#__PURE__*/\nfunction (_EventHandler) {\n  _inherits(BaseCamera2d, _EventHandler);\n\n  /**\n   * Constructs a new 2d camera\n   * @param  {AABox2d}  viewport           Initial camera viewport boundary, in pixels\n   * @param  {Vec2d}  projectionDimensions The width and height of the viewport in world coordinates\n   * @param  {Boolean} [flipY=false]       Whether world y coordinates are flipped, if false\n   *                                       the top of the viewport window is smaller in y, and the bottom\n   *                                       is larger. If true, the bottom has smaller y coords, and the top\n   *                                       larger\n   * @return {BaseCamera2d}\n   */\n  function BaseCamera2d(viewport, projectionDimensions) {\n    var _this;\n\n    var flipY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    _classCallCheck(this, BaseCamera2d);\n\n    // initialize modify events\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseCamera2d).call(this, [\"changed\", \"changed:xform\"]));\n    _this._viewport = __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"clone\"](viewport);\n    _this._projectionDimensions = __WEBPACK_IMPORTED_MODULE_5_gl_matrix__[\"d\" /* vec2 */].clone(projectionDimensions);\n    _this._yflip = flipY; // stores the NDC space to screen space matrix\n    // NDC (normalized device coordinates) is the space\n    // where the left edge of the window is -1, the right edge is 1\n    // the top edge is -1, and the bottom edge is 1.\n\n    _this._screenMatrix = __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].create(); // this flag is dirty whenever the attributes for the\n    // ndc-to-screen projection are modified\n\n    _this._screenDirty = true;\n    return _this;\n  }\n  /**\n   * Returns true if the world Y coordinates go from negative to positive\n   * in a bottom to top fashion in screen space, false otherwise.\n   * @return {Boolean}\n   */\n\n\n  _createClass(BaseCamera2d, [{\n    key: \"isYFlipped\",\n    value: function isYFlipped() {\n      return this._yflip;\n    }\n    /**\n     * Sets the camera's screen-space viewport bounds\n     * @param  {AABox2d} viewport\n     * @fires  EventedCamera#changed\n     * @return {BaseCamera2d}\n     */\n\n  }, {\n    key: \"viewport\",\n    set: function set(viewport) {\n      if (!__WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"equals\"](viewport, this._viewport)) {\n        var prev = __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"clone\"](this._viewport);\n        __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"copy\"](this._viewport, viewport);\n        this._screenDirty = true;\n        this._worldToScreenOutdated = true;\n        this.fire(\"changed\", {\n          attr: \"viewport\",\n          prevVal: prev,\n          currVal: viewport\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Gets a copy of the camera's current viewport\n     * @return {AABox2d}\n     */\n    ,\n    get: function get() {\n      return __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"clone\"](this._viewport);\n    }\n    /**\n     * Gets a reference to the camera's current viewport\n     * @return {AABox2d}\n     * @readOnly\n     */\n\n  }, {\n    key: \"viewportRef\",\n    get: function get() {\n      return this._viewport;\n    }\n    /**\n     * Gets the current NDC to screen space transform matrix\n     * @return {Mat2d}\n     */\n\n  }, {\n    key: \"screenMatrix\",\n    get: function get() {\n      if (this._screenDirty) {\n        var center = [0, 0];\n        var extents = [0, 0];\n        __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"getCenter\"](center, this._viewport);\n        __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"getExtents\"](extents, this._viewport);\n        __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].set(this._screenMatrix, extents[0], 0, 0, extents[1], center[0], center[1]);\n        this._worldToScreenOutdated = true;\n        this._screenDirty = false;\n      }\n\n      return this._screenMatrix;\n    }\n  }]);\n\n  return BaseCamera2d;\n}(__WEBPACK_IMPORTED_MODULE_3__util_event_handler__[\"a\" /* default */]);\n/**\n * @class Main 2d camera class to manage othographic 2d projections\n * @extends {BaseCamera2d}\n * @mixin {EventedTransform2d}\n */\n\n\nvar Camera2d =\n/*#__PURE__*/\nfunction (_aggregation) {\n  _inherits(Camera2d, _aggregation);\n\n  /**\n   * Creates a new Camera2d object\n   * @param  {AABox2d} viewport             The camera's viewport bounds in pixel space\n   * @param  {Vec2d} projectionDimensions The width/height of the camera's viewport in world coordinates\n   * @param  {Boolean} flipY              True if the direction from negative to positive Y coordinates\n   *                                      go from the bottom to top of the window. False means Y coords\n   *                                      from negative to positive values go from the top to the bottom\n   * @return {Camera2d}\n   */\n  function Camera2d(viewport, projectionDimensions, flipY) {\n    var _this2;\n\n    _classCallCheck(this, Camera2d);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Camera2d).call(this, viewport, projectionDimensions, flipY));\n    _this2._viewMatrix = __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].create();\n    _this2._viewDirty = true;\n    _this2._projMatrix = __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].create();\n    _this2._projDirty = true;\n    return _this2;\n  }\n  /**\n   * Sets the projection dimensions of the camera's view. This is the width/height\n   * in world space coordiantes of the camera's view.\n   * @param  {Vec2d} projectionDimensions\n   * @return {Camera2d} this\n   */\n\n\n  _createClass(Camera2d, [{\n    key: \"_localXformUpdated\",\n\n    /**\n     * Called when the local transform (does not include parent transforms) of the Transform2d\n     * mixin is modified. Used to be notified internally that the view-to-screen space\n     * transformation needs updating\n     * @private\n     */\n    value: function _localXformUpdated() {\n      this._boundsOutOfDate = true;\n    }\n    /**\n     * Called when the global matrix (includes parent transforms) of the\n     * Transform2d mixin is modified. Used to be notified internally that\n     * the view-to-screen space transformation needs updating\n     * @private\n     */\n\n  }, {\n    key: \"_globalXformUpdated\",\n    value: function _globalXformUpdated() {\n      this._boundsOutOfDate = true;\n    }\n    /**\n     * Gets the transformation matrix from world space to view/camera space\n     * @return {Mat2d}\n     */\n\n  }, {\n    key: \"_matricesDirty\",\n\n    /**\n     * Returns true if any of the dirty flags are active\n     * @return {Boolean}\n     * @private\n     */\n    value: function _matricesDirty() {\n      return this._boundsOutOfDate || this._lxformDirty || this._xformDirty || this._viewDirty || this._projDirty || this._screenDirty;\n    }\n    /**\n     * Gets the transformation matrix from world space to screen space.\n     * @return {Mat2d}\n     */\n\n  }, {\n    key: \"projectionDimensions\",\n    set: function set(projectionDimensions) {\n      if (!__WEBPACK_IMPORTED_MODULE_5_gl_matrix__[\"d\" /* vec2 */].equals(projectionDimensions, this._projectionDimensions)) {\n        var prev = __WEBPACK_IMPORTED_MODULE_5_gl_matrix__[\"d\" /* vec2 */].clone(this._projectionDimensions);\n        __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"copy\"](this._projectionDimensions, projectionDimensions);\n        this._viewDirty = true;\n        this._projDirty = true; // this._yflip = this._projectionDimensions[3] < this._projectionDimensions[1]\n\n        this.fire(\"changed\", {\n          attr: \"projectionDimensions\",\n          prevVal: prev,\n          currVal: projectionDimensions\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Gets a copy of the camera's current projection dimensions\n     * @return {Vec2d}\n     */\n    ,\n    get: function get() {\n      return __WEBPACK_IMPORTED_MODULE_5_gl_matrix__[\"d\" /* vec2 */].clone(this._projectionDimensions);\n    }\n    /**\n     * Gets a reference to the camera's current projection dimensions\n     * @return {Vec2d}\n     * @readOnly\n     */\n\n  }, {\n    key: \"projectionDimensionsRef\",\n    get: function get() {\n      return this._projectionDimensions;\n    }\n  }, {\n    key: \"viewMatrix\",\n    get: function get() {\n      if (this._viewDirty || this._boundsOutOfDate || this._xformDirty || this._lxformDirty) {\n        // the matrix has been marked dirty, so recalculate\n        var pos = [0, 0];\n        var scale = [0, 0];\n        var rot = [0, 0];\n        var xform = this.globalXform;\n        __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].svd(pos, scale, rot, xform);\n        __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].fromTranslation(this._viewMatrix, __WEBPACK_IMPORTED_MODULE_5_gl_matrix__[\"d\" /* vec2 */].negate(pos, pos));\n        __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].rotate(this._viewMatrix, this._viewMatrix, -rot[0]);\n        __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].scale(this._viewMatrix, this._viewMatrix, scale);\n        __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].rotate(this._viewMatrix, this._viewMatrix, -rot[1]);\n        this._worldToScreenOutdated = true;\n        this._viewDirty = false;\n      }\n\n      return this._viewMatrix;\n    }\n    /**\n     * Gets the orthographic projection transformation matrix from\n     * view to NDC (normalized device coordinates) space\n     * @return {Mat2d}\n     */\n\n  }, {\n    key: \"projMatrix\",\n    get: function get() {\n      if (this._projDirty) {\n        var flip = this._yflip ? -1 : 1;\n        __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].set(this._projMatrix, 2.0 / this._projectionDimensions[0], 0, 0, flip * 2.0 / this._projectionDimensions[1], 0, 0);\n        this._worldToScreenOutdated = true;\n        this._projDirty = false;\n      }\n\n      return this._projMatrix;\n    }\n  }, {\n    key: \"worldToScreenMatrix\",\n    get: function get() {\n      if (!this._worldToScreenMatrix || this._worldToScreenOutdated || this._matricesDirty()) {\n        if (!this._worldToScreenMatrix) {\n          this._worldToScreenMatrix = __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].create();\n        }\n\n        __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].copy(this._worldToScreenMatrix, this.viewMatrix);\n        __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].multiply(this._worldToScreenMatrix, this.projMatrix, this._worldToScreenMatrix);\n        __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].multiply(this._worldToScreenMatrix, this.screenMatrix, this._worldToScreenMatrix);\n        this._worldToScreenOutdated = false;\n        this._screenToWorldOutdated = true;\n      }\n\n      return this._worldToScreenMatrix;\n    }\n    /**\n     * Gets teh transform matrix from screen space to world space.\n     * @return {[type]} [description]\n     */\n\n  }, {\n    key: \"screenToWorldMatrix\",\n    get: function get() {\n      if (!this._screenToWorld || this._screenToWorldOutdated || this._matricesDirty()) {\n        if (!this._screenToWorld) {\n          this._screenToWorld = __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].create();\n        }\n\n        __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].copy(this._screenToWorld, this.worldToScreenMatrix);\n        __WEBPACK_IMPORTED_MODULE_4__core_mat2d__[\"a\" /* default */].invert(this._screenToWorld, this._screenToWorld);\n        this._screenToWorldOutdated = false;\n      }\n\n      return this._screenToWorld;\n    }\n  }]);\n\n  return Camera2d;\n}(Object(__WEBPACK_IMPORTED_MODULE_1__util_aggregation__[\"a\" /* default */])(BaseCamera2d, Object(__WEBPACK_IMPORTED_MODULE_2__shapes_transform2d__[\"b\" /* createEventedTransform2dMixin */])(\"changed:xform\")));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n;\n(function (root, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === \"object\") {\n        module.exports = factory();\n    } else {\n        root.ResizeSensor = factory();\n    }\n}(this, function () {\n\n    //Make sure it does not throw in a SSR (Server Side Rendering) situation\n    if (typeof window === \"undefined\") {\n        return null;\n    }\n    // Only used for the dirty checking, so the event callback count is limted to max 1 call per fps per sensor.\n    // In combination with the event based resize sensor this saves cpu time, because the sensor is too fast and\n    // would generate too many unnecessary events.\n    var requestAnimationFrame = window.requestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        function (fn) {\n            return window.setTimeout(fn, 20);\n        };\n\n    /**\n     * Iterate over each of the provided element(s).\n     *\n     * @param {HTMLElement|HTMLElement[]} elements\n     * @param {Function}                  callback\n     */\n    function forEachElement(elements, callback){\n        var elementsType = Object.prototype.toString.call(elements);\n        var isCollectionTyped = ('[object Array]' === elementsType\n            || ('[object NodeList]' === elementsType)\n            || ('[object HTMLCollection]' === elementsType)\n            || ('[object Object]' === elementsType)\n            || ('undefined' !== typeof jQuery && elements instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && elements instanceof Elements) //mootools\n        );\n        var i = 0, j = elements.length;\n        if (isCollectionTyped) {\n            for (; i < j; i++) {\n                callback(elements[i]);\n            }\n        } else {\n            callback(elements);\n        }\n    }\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    var ResizeSensor = function(element, callback) {\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            var q = [];\n            this.add = function(ev) {\n                q.push(ev);\n            };\n\n            var i, j;\n            this.call = function() {\n                for (i = 0, j = q.length; i < j; i++) {\n                    q[i].call();\n                }\n            };\n\n            this.remove = function(ev) {\n                var newQueue = [];\n                for(i = 0, j = q.length; i < j; i++) {\n                    if(q[i] !== ev) newQueue.push(q[i]);\n                }\n                q = newQueue;\n            }\n\n            this.length = function() {\n                return q.length;\n            }\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {String}      prop\n         * @returns {String|Number}\n         */\n        function getComputedStyle(element, prop) {\n            if (element.currentStyle) {\n                return element.currentStyle[prop];\n            } else if (window.getComputedStyle) {\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\n            } else {\n                return element.style[prop];\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element.resizedAttached) {\n                element.resizedAttached = new EventQueue();\n                element.resizedAttached.add(resized);\n            } else if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            element.resizeSensor = document.createElement('div');\n            element.resizeSensor.className = 'resize-sensor';\n            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\n            element.resizeSensor.style.cssText = style;\n            element.resizeSensor.innerHTML =\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + '\"></div>' +\n                '</div>' +\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n                '</div>';\n            element.appendChild(element.resizeSensor);\n\n            if (getComputedStyle(element, 'position') == 'static') {\n                element.style.position = 'relative';\n            }\n\n            var expand = element.resizeSensor.childNodes[0];\n            var expandChild = expand.childNodes[0];\n            var shrink = element.resizeSensor.childNodes[1];\n            var dirty, rafId, newWidth, newHeight;\n            var lastWidth = element.offsetWidth;\n            var lastHeight = element.offsetHeight;\n\n            var reset = function() {\n                expandChild.style.width = '100000px';\n                expandChild.style.height = '100000px';\n\n                expand.scrollLeft = 100000;\n                expand.scrollTop = 100000;\n\n                shrink.scrollLeft = 100000;\n                shrink.scrollTop = 100000;\n            };\n\n            reset();\n\n            var onResized = function() {\n                rafId = 0;\n\n                if (!dirty) return;\n\n                lastWidth = newWidth;\n                lastHeight = newHeight;\n\n                if (element.resizedAttached) {\n                    element.resizedAttached.call();\n                }\n            };\n\n            var onScroll = function() {\n                newWidth = element.offsetWidth;\n                newHeight = element.offsetHeight;\n                dirty = newWidth != lastWidth || newHeight != lastHeight;\n\n                if (dirty && !rafId) {\n                    rafId = requestAnimationFrame(onResized);\n                }\n\n                reset();\n            };\n\n            var addEvent = function(el, name, cb) {\n                if (el.attachEvent) {\n                    el.attachEvent('on' + name, cb);\n                } else {\n                    el.addEventListener(name, cb);\n                }\n            };\n\n            addEvent(expand, 'scroll', onScroll);\n            addEvent(shrink, 'scroll', onScroll);\n        }\n\n        forEachElement(element, function(elem){\n            attachResizeEvent(elem, callback);\n        });\n\n        this.detach = function(ev) {\n            ResizeSensor.detach(element, ev);\n        };\n    };\n\n    ResizeSensor.detach = function(element, ev) {\n        forEachElement(element, function(elem){\n            if(elem.resizedAttached && typeof ev == \"function\"){\n                elem.resizedAttached.remove(ev);\n                if(elem.resizedAttached.length()) return;\n            }\n            if (elem.resizeSensor) {\n                if (elem.contains(elem.resizeSensor)) {\n                    elem.removeChild(elem.resizeSensor);\n                }\n                delete elem.resizeSensor;\n                delete elem.resizedAttached;\n            }\n        });\n    };\n\n    return ResizeSensor;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return VertEditableShape; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_point2d__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_matrix__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shapes_base_shape__ = __webpack_require__(7);\n/* eslint-disable no-magic-numbers */\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\nvar VertEditableShape =\n/*#__PURE__*/\nfunction (_BaseShape) {\n  _inherits(VertEditableShape, _BaseShape);\n\n  function VertEditableShape(baseVertShape, opts) {\n    var _this;\n\n    _classCallCheck(this, VertEditableShape);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VertEditableShape).call(this, opts));\n    _this._baseVertShape = baseVertShape;\n    _this._vertRadius = 4;\n    _this._transformedVerts = [];\n    _this._baseaabox = __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"create\"]();\n    _this._worldToScreenMatrix = __WEBPACK_IMPORTED_MODULE_2_gl_matrix__[\"c\" /* mat2d */].create();\n    return _this;\n  }\n\n  _createClass(VertEditableShape, [{\n    key: \"_updateAABox\",\n    value: function _updateAABox(worldToScreenMatrix) {\n      var aabox = this._baseVertShape.aabox;\n\n      if (!__WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"equals\"](aabox, this._baseaabox) || !__WEBPACK_IMPORTED_MODULE_2_gl_matrix__[\"c\" /* mat2d */].equals(worldToScreenMatrix, this._worldToScreenMatrix)) {\n        __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"copy\"](this._baseaabox, aabox);\n        __WEBPACK_IMPORTED_MODULE_2_gl_matrix__[\"c\" /* mat2d */].copy(this._worldToScreenMatrix, worldToScreenMatrix);\n        __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"transformMat2d\"](this._aabox, this._baseaabox, this._worldToScreenMatrix);\n        var pad = this._vertRadius + this.strokeWidth;\n        __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"expand\"](this._aabox, this._aabox, [pad, pad]);\n      }\n    }\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(screenPt, worldPt, worldToScreenMatrix, ctx) {\n      // Should we update here, or is it safe to\n      // say that this is stateful, meaning a render\n      // should have been performed beforehand which\n      // would've updated its state\n      var rtnObj = {\n        hit: false,\n        controlIndex: -1\n      };\n\n      this._updateAABox(worldToScreenMatrix);\n\n      if (this.visible && __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"containsPt\"](this._aabox, screenPt)) {\n        var aabox = __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"create\"]();\n        var pad = this._vertRadius + this.strokeWidth / 2;\n        var extents = [pad, pad];\n        var i = 0;\n\n        for (i = 0; i < this._transformedVerts.length; i += 1) {\n          __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"initCenterExtents\"](aabox, this._transformedVerts[i], extents);\n\n          if (__WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"containsPt\"](aabox, screenPt)) {\n            rtnObj.hit = true;\n            rtnObj.controlIndex = i;\n            break;\n          }\n        }\n\n        if (!rtnObj.hit) {\n          var tmpPt = [0, 0];\n          var tmpVec = [0, 0];\n          var radius = ctx.lineWidth * 1.5;\n          __WEBPACK_IMPORTED_MODULE_2_gl_matrix__[\"d\" /* vec2 */].set(extents, radius, radius);\n\n          for (i = 0; i < this._transformedVerts.length - 1; i += 1) {\n            __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"sub\"](tmpVec, this._transformedVerts[i + 1], this._transformedVerts[i]);\n            __WEBPACK_IMPORTED_MODULE_2_gl_matrix__[\"d\" /* vec2 */].scale(tmpVec, tmpVec, 0.5);\n            __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"addVec2\"](tmpPt, this._transformedVerts[i], tmpVec);\n            __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"initCenterExtents\"](aabox, tmpPt, extents);\n\n            if (__WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"containsPt\"](aabox, screenPt)) {\n              rtnObj.hit = true;\n              rtnObj.controlIndex = this._transformedVerts.length + i;\n              break;\n            }\n          }\n\n          if (i > 0 && i === this._transformedVerts.length - 1) {\n            __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"sub\"](tmpVec, this._transformedVerts[0], this._transformedVerts[i]);\n            __WEBPACK_IMPORTED_MODULE_2_gl_matrix__[\"d\" /* vec2 */].scale(tmpVec, tmpVec, 0.5);\n            __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"addVec2\"](tmpPt, this._transformedVerts[i], tmpVec);\n            __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"initCenterExtents\"](aabox, tmpPt, extents);\n\n            if (__WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"containsPt\"](aabox, screenPt)) {\n              rtnObj.hit = true;\n              rtnObj.controlIndex = this._transformedVerts.length + i;\n            }\n          }\n        }\n      }\n\n      return rtnObj;\n    }\n  }, {\n    key: \"renderBounds\",\n    value: function renderBounds(ctx, worldToScreenMatrix, boundsStrokeStyle) {\n      // we're storing our AABox in screen space here, so worldToScreenMatrix is\n      // unused\n      this._updateAABox(worldToScreenMatrix);\n\n      ctx.save();\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      boundsStrokeStyle.setStrokeCtx(ctx);\n      var center = [0, 0];\n      var extents = [0, 0];\n      __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"getCenter\"](center, this._aabox);\n      __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"getExtents\"](extents, this._aabox);\n      ctx.beginPath();\n      ctx.rect(center[0] - extents[0], center[1] - extents[1], extents[0] * 2, extents[1] * 2);\n      ctx.stroke();\n      ctx.restore();\n    }\n  }, {\n    key: \"render\",\n    value: function render(ctx) {\n      var _this2 = this;\n\n      ctx.save();\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      var objToScreenMatrix = this._baseVertShape._fullXform;\n      var verts = this._baseVertShape.vertsRef;\n      this._transformedVerts = new Array(verts.length);\n      var tmpPt = [0, 0];\n      var tmpVec = [0, 0];\n      ctx.beginPath();\n      var i = 0;\n      this._transformedVerts[i] = [0, 0];\n      __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"transformMat2d\"](this._transformedVerts[i], verts[i], objToScreenMatrix);\n      var radius = Math.max(ctx.lineWidth * 1.5, 2.5);\n\n      for (i = 0; i < verts.length - 1; i += 1) {\n        this._transformedVerts[i + 1] = [0, 0];\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"transformMat2d\"](this._transformedVerts[i + 1], verts[i + 1], objToScreenMatrix);\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"sub\"](tmpVec, this._transformedVerts[i + 1], this._transformedVerts[i]);\n        __WEBPACK_IMPORTED_MODULE_2_gl_matrix__[\"d\" /* vec2 */].scale(tmpVec, tmpVec, 0.5);\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"addVec2\"](tmpPt, this._transformedVerts[i], tmpVec);\n        ctx.moveTo(tmpPt[0] + radius, tmpPt[1]);\n        ctx.arc(tmpPt[0], tmpPt[1], radius, 0, Math.TWO_PI);\n      }\n\n      if (i > 0) {\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"sub\"](tmpVec, this._transformedVerts[0], this._transformedVerts[i]);\n        __WEBPACK_IMPORTED_MODULE_2_gl_matrix__[\"d\" /* vec2 */].scale(tmpVec, tmpVec, 0.5);\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"addVec2\"](tmpPt, this._transformedVerts[i], tmpVec);\n        ctx.moveTo(tmpPt[0] + radius, tmpPt[1]);\n        ctx.arc(tmpPt[0], tmpPt[1], radius, 0, Math.TWO_PI); // TODO(croot): Is this appropriate? Can the fill/stroke style\n        // be cross compatible? What about gradients/patterns?\n        // We can probably safely assume no gradients/patterns at\n        // this point\n\n        ctx.fillStyle = ctx.strokeStyle;\n        ctx.fill();\n      }\n\n      ctx.beginPath();\n\n      this._transformedVerts.forEach(function (vert) {\n        ctx.moveTo(vert[0] + _this2._vertRadius, vert[1]);\n        ctx.arc(vert[0], vert[1], _this2._vertRadius, 0, Math.TWO_PI);\n      });\n\n      if (this.isFillVisible()) {\n        this.setFillCtx(ctx);\n        ctx.fill();\n      }\n\n      if (this.isStrokeVisible()) {\n        this.setStrokeCtx(ctx);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }]);\n\n  return VertEditableShape;\n}(__WEBPACK_IMPORTED_MODULE_3__shapes_base_shape__[\"a\" /* default */]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return XformShape; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_point2d__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shapes_transform2d__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_mat2d__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shapes_rect__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_vec2d__ = __webpack_require__(9);\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\n\nvar Constants = {\n  SIDES: 4\n};\n\nfunction drawOBBoxModifierRect(ctx, pt, objToScreenMat, modifierSize, modifierHalfSize, modifierRotation, scale) {\n  __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"transformMat2d\"](pt, pt, objToScreenMat);\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  ctx.translate(pt[0], pt[1]);\n  ctx.rotate(modifierRotation[1]);\n  ctx.scale(scale[0], scale[1]);\n  ctx.rotate(modifierRotation[0]);\n  ctx.translate(-pt[0], -pt[1]);\n  ctx.rect(pt[0] - modifierHalfSize, pt[1] - modifierHalfSize, modifierSize, modifierSize); // ctx.moveTo(pt[0], pt[1])\n  // ctx.lineTo(pt[0], pt[1] + 20)\n  // ctx.moveTo(pt[0], pt[1])\n  // ctx.lineTo(pt[0] + 20, pt[1])\n  // ctx.font = \"24px serif\"\n  // ctx.fillText(text, pt[0], pt[1])\n}\n\nfunction isPointInOBBoxModifierRect(screenPt, modifierPt, objToScreenMat, modifierMat, halfBoxSz, boxSz, padBoxSz, padBoxRadius, xScale, yScale) {\n  var hit = false;\n  var rotate = false;\n  __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"transformMat2d\"](modifierPt, modifierPt, objToScreenMat);\n\n  if (__WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"distance\"](modifierPt, screenPt) <= padBoxRadius) {\n    __WEBPACK_IMPORTED_MODULE_5__core_vec2d__[\"a\" /* default */].negate(modifierPt, modifierPt);\n    modifierMat[4] = modifierMat[0] * modifierPt[0] + modifierMat[2] * modifierPt[1];\n    modifierMat[5] = modifierMat[1] * modifierPt[0] + modifierMat[3] * modifierPt[1];\n    var x = 0;\n    var y = 0;\n    __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"transformMat2d\"](modifierPt, screenPt, modifierMat);\n\n    if (Math.abs(modifierPt[0]) <= halfBoxSz && Math.abs(modifierPt[1]) <= halfBoxSz || Boolean(xScale) && Boolean(yScale) && (rotate = (x = xScale * modifierPt[0]) > -halfBoxSz && x <= padBoxSz && (y = yScale * modifierPt[1]) > -halfBoxSz && y <= padBoxSz)) {\n      hit = true;\n    }\n  }\n\n  return {\n    hit: hit,\n    rotate: rotate\n  };\n}\n\nvar XformShape =\n/*#__PURE__*/\nfunction (_Rect) {\n  _inherits(XformShape, _Rect);\n\n  function XformShape(opts) {\n    var _this;\n\n    var selectOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      scalable: true,\n      rotatable: true\n    };\n\n    _classCallCheck(this, XformShape);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(XformShape).call(this, opts));\n    _this._interactiveBoxSize = 8;\n    _this._interactiveBoxPadding = 10;\n\n    if (opts && typeof opts.vertexSize !== \"undefined\") {\n      _this._interactiveBoxSize = opts.vertexSize;\n    }\n\n    _this._scalable = true;\n    _this._rotatable = true;\n\n    if (selectOpts) {\n      if (typeof selectOpts.scalable !== \"undefined\") {\n        _this._scalable = Boolean(selectOpts.scalable);\n      }\n\n      if (typeof selectOpts.rotatable !== \"undefined\") {\n        _this._rotatable = Boolean(selectOpts.rotatable);\n      }\n    }\n\n    return _this;\n  }\n\n  _createClass(XformShape, [{\n    key: \"containsPoint\",\n    value: function containsPoint(screenPt) {\n      // Should we update here, or is it safe to\n      // say that this is stateful, meaning a render\n      // should have been performed beforehand which\n      // would've updated its state\n      var rtnObj = {\n        hit: false,\n        rotate: false,\n        controlIndex: -1\n      };\n      var aabox = this.aabox;\n\n      if ((this._rotatable || this._scalable) && this.visible && __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"containsPt\"](aabox, screenPt)) {\n        var scale = [0, 0];\n        var rot = [0, 0];\n        __WEBPACK_IMPORTED_MODULE_3__core_mat2d__[\"a\" /* default */].svd(null, scale, rot, this._fullXform);\n        var mat = __WEBPACK_IMPORTED_MODULE_3__core_mat2d__[\"a\" /* default */].create();\n        scale[0] = scale[0] < 0 ? -1 : 1;\n        scale[1] = scale[1] < 0 ? -1 : 1;\n\n        if (scale[0] * scale[1] > 0) {\n          __WEBPACK_IMPORTED_MODULE_5__core_vec2d__[\"a\" /* default */].negate(rot, rot);\n        }\n\n        __WEBPACK_IMPORTED_MODULE_3__core_mat2d__[\"a\" /* default */].rotate(mat, mat, rot[1]);\n        __WEBPACK_IMPORTED_MODULE_3__core_mat2d__[\"a\" /* default */].scale(mat, mat, scale);\n        __WEBPACK_IMPORTED_MODULE_3__core_mat2d__[\"a\" /* default */].rotate(mat, mat, rot[0]);\n        var boxPadding = this._rotatable ? this._interactiveBoxPadding : 0;\n        var halfBoxSz = this._interactiveBoxSize / 2;\n        var halfWidth = this.width / 2;\n        var halfHeight = this.height / 2;\n        var pt = [0, 0];\n        var padSz = halfBoxSz + boxPadding;\n        var padRadius = Math.sqrt(2 * padSz * padSz);\n        var xScale = 0;\n        var yScale = 0;\n\n        for (var i = 0; i < Constants.SIDES; i += 1) {\n          xScale = i < 2 ? -1 : 1;\n          yScale = i % 2 === 0 ? -1 : 1;\n          __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"set\"](pt, xScale * halfWidth, yScale * halfHeight);\n          rtnObj = isPointInOBBoxModifierRect(screenPt, pt, this._fullXform, mat, halfBoxSz, this._interactiveBoxSize, padSz, padRadius, xScale, yScale, scale);\n\n          if (rtnObj.hit) {\n            rtnObj.controlIndex = i;\n            break;\n          }\n        }\n\n        if (!rtnObj.hit && this._scalable) {\n          for (var _i = 0; _i < Constants.SIDES; _i += 1) {\n            xScale = _i % 2 === 0 ? _i < 2 ? -1 : 1 : 0;\n            yScale = _i % 2 === 0 ? 0 : _i < 2 ? -1 : 1;\n            __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"set\"](pt, xScale * halfWidth, yScale * halfHeight);\n            rtnObj = isPointInOBBoxModifierRect(screenPt, pt, this._fullXform, mat, halfBoxSz, this._interactiveBoxSize, padSz, padRadius, xScale, yScale, scale);\n\n            if (rtnObj.hit) {\n              rtnObj.controlIndex = _i + Constants.SIDES;\n              break;\n            }\n          }\n        }\n\n        if (rtnObj.rotate && !this._rotatable) {\n          rtnObj.rotate = false;\n        } else if (!rtnObj.rotate && !this._scalable) {\n          rtnObj.rotate = true;\n        }\n      }\n\n      return rtnObj;\n    }\n  }, {\n    key: \"_updatelocalxform\",\n    value: function _updatelocalxform(force) {\n      if (this._lxformDirty || force) {\n        var pos = __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"clone\"](this._pos);\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"addVec2\"](pos, pos, this._parent.pivotRef);\n        Object(__WEBPACK_IMPORTED_MODULE_2__shapes_transform2d__[\"a\" /* buildXformMatrix */])(this._localXform, this._rotDeg, this._scale, pos, this._pivot);\n\n        if (this._localXformUpdated) {\n          this._localXformUpdated();\n        }\n\n        this._lxformDirty = false;\n      }\n    }\n  }, {\n    key: \"_updateglobalxform\",\n    value: function _updateglobalxform() {\n      if (this._lxformDirty || this._xformDirty) {\n        this._updatelocalxform(true);\n\n        if (this._parent) {\n          __WEBPACK_IMPORTED_MODULE_3__core_mat2d__[\"a\" /* default */].multiply(this._globalXform, this._parent.globalXform, this._localXform);\n        } else {\n          __WEBPACK_IMPORTED_MODULE_3__core_mat2d__[\"a\" /* default */].copy(this._globalXform, this._localXform);\n        }\n\n        if (this._globalXformUpdated) {\n          this._globalXformUpdated();\n        }\n\n        this._xformDirty = false;\n      }\n    }\n  }, {\n    key: \"_updateAABox\",\n    value: function _updateAABox() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (force || this._geomDirty || this._boundsOutOfDate) {\n        var boxPadding = this._rotatable ? this._interactiveBoxPadding : 0;\n        var padding = boxPadding + this._interactiveBoxSize / 2;\n        __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"initCenterExtents\"](this._aabox, [0, 0], [this.width / 2, this.height / 2]);\n        __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"transformMat2d\"](this._aabox, this._aabox, this._fullXform);\n        __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"expand\"](this._aabox, this._aabox, [padding, padding]);\n        this._aaboxUpdated = true;\n        this._geomDirty = this._boundsOutOfDate = false;\n      }\n    }\n  }, {\n    key: \"renderBounds\",\n    value: function renderBounds(ctx, worldToScreenMatrix, boundsStrokeStyle) {\n      // we're storing our AABox in screen space here, so worldToScreenMatrix is\n      // unused\n      var aabox = this.aabox;\n      ctx.save();\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      boundsStrokeStyle.setStrokeCtx(ctx);\n      var center = [0, 0];\n      var extents = [0, 0];\n      __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"getCenter\"](center, aabox);\n      __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"getExtents\"](extents, aabox);\n      ctx.beginPath();\n      ctx.rect(center[0] - extents[0], center[1] - extents[1], extents[0] * 2, extents[1] * 2);\n      ctx.stroke();\n      ctx.restore();\n    }\n  }, {\n    key: \"render\",\n    value: function render(ctx, worldToScreenMatrix, styleState) {\n      if (!this.parent || typeof this.parent.width === \"undefined\" || this.parent.height === \"undefined\") {\n        return;\n      }\n\n      this._aaboxUpdated = false; // do not fill the primary rectangle\n\n      _get(_getPrototypeOf(XformShape.prototype), \"render\", this).call(this, ctx, worldToScreenMatrix, styleState, false);\n\n      if (!this._aaboxUpdated) {\n        this._updateAABox(true);\n      }\n\n      var scale = [0, 0];\n      var rot = [0, 0];\n      __WEBPACK_IMPORTED_MODULE_3__core_mat2d__[\"a\" /* default */].svd(null, scale, rot, this._fullXform);\n      scale[0] = scale[0] < 0 ? -1 : 1;\n      scale[1] = scale[1] < 0 ? -1 : 1;\n      var halfBoxSz = this._interactiveBoxSize / 2;\n      var halfWidth = this.width / 2;\n      var halfHeight = this.height / 2;\n      var pt = [halfWidth, halfHeight];\n      ctx.save();\n      ctx.beginPath();\n      drawOBBoxModifierRect(ctx, pt, this._fullXform, this._interactiveBoxSize, halfBoxSz, rot, scale, \"3\");\n      __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"set\"](pt, halfWidth, -halfHeight);\n      drawOBBoxModifierRect(ctx, pt, this._fullXform, this._interactiveBoxSize, halfBoxSz, rot, scale, \"2\");\n      __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"set\"](pt, -halfWidth, -halfHeight);\n      drawOBBoxModifierRect(ctx, pt, this._fullXform, this._interactiveBoxSize, halfBoxSz, rot, scale, \"0\");\n      __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"set\"](pt, -halfWidth, halfHeight);\n      drawOBBoxModifierRect(ctx, pt, this._fullXform, this._interactiveBoxSize, halfBoxSz, rot, scale, \"1\");\n\n      if (this._scalable) {\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"set\"](pt, 0, halfHeight);\n        drawOBBoxModifierRect(ctx, pt, this._fullXform, this._interactiveBoxSize, halfBoxSz, rot, scale);\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"set\"](pt, 0, -halfHeight);\n        drawOBBoxModifierRect(ctx, pt, this._fullXform, this._interactiveBoxSize, halfBoxSz, rot, scale);\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"set\"](pt, halfWidth, 0);\n        drawOBBoxModifierRect(ctx, pt, this._fullXform, this._interactiveBoxSize, halfBoxSz, rot, scale);\n        __WEBPACK_IMPORTED_MODULE_1__core_point2d__[\"set\"](pt, -halfWidth, 0);\n        drawOBBoxModifierRect(ctx, pt, this._fullXform, this._interactiveBoxSize, halfBoxSz, rot, scale);\n      }\n\n      if (this.isFillVisible()) {\n        styleState.setFillStyle(ctx, this);\n        ctx.fill();\n      }\n\n      if (this.isStrokeVisible()) {\n        styleState.setStrokeStyle(ctx, this);\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this.parent && this.parent.width !== \"undefined\" ? this.parent.width : 0;\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this.parent && this.parent.height !== \"undefined\" ? this.parent.height : 0;\n    }\n  }]);\n\n  return XformShape;\n}(__WEBPACK_IMPORTED_MODULE_4__shapes_rect__[\"a\" /* default */]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///37\n");

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Circle; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__base_shape_js__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math_math__ = __webpack_require__(6);\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n/**\n * @typedef {object} CircleOptions\n * @property {number} [radius=10] Radius of the circle in world-space coordinates\n */\n\n/**\n * @class Shape class describing a circle\n * @extends {BaseShape}\n */\n\nvar Circle =\n/*#__PURE__*/\nfunction (_BaseShape) {\n  _inherits(Circle, _BaseShape);\n\n  /**\n   * Creates a new Circle shape\n   * @param  {CircleOptions} [opts]\n   * @return {Circle}\n   */\n  function Circle(opts) {\n    var _this;\n\n    _classCallCheck(this, Circle);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Circle).call(this, opts));\n    _this._radius = 10;\n\n    if (typeof opts.radius !== \"undefined\") {\n      _this.radius = opts.radius;\n    }\n\n    __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"initCenterExtents\"](_this._aabox, [0, 0], [_this._radius, _this._radius]);\n    return _this;\n  }\n  /**\n   * Sets the radius of the circle\n   * @param  {number} radius Radius of circle in world-space coordinates\n   * @return {Circle}        this\n   * @fires {Shape#geomChanged}\n   * @throws {Error} If radius is not a valid number\n   */\n\n\n  _createClass(Circle, [{\n    key: \"getDimensions\",\n\n    /**\n     * Gets the untransformed width/height of the circle\n     * @return {Vec2d} Width/height of the circle, untransformed\n     */\n    value: function getDimensions() {\n      var diameter = this.radius * 2;\n      return [diameter, diameter];\n    }\n    /**\n     * Gets the untransformed width of the circle\n     * @return {number}\n     */\n\n  }, {\n    key: \"_updateAABox\",\n\n    /**\n     * Called when the bounding box requires updating\n     * @private\n     * @override\n     */\n    value: function _updateAABox() {\n      if (this._geomDirty || this._boundsOutOfDate) {\n        var pos = this._pos;\n        var scale = this._scale;\n        var rot = __WEBPACK_IMPORTED_MODULE_2__math_math__[\"a\" /* default */].DEG_TO_RAD * this._rotDeg;\n        var cossqr = __WEBPACK_IMPORTED_MODULE_2__math_math__[\"a\" /* default */].pow(__WEBPACK_IMPORTED_MODULE_2__math_math__[\"a\" /* default */].cos(rot), 2);\n        var sinsqr = __WEBPACK_IMPORTED_MODULE_2__math_math__[\"a\" /* default */].pow(__WEBPACK_IMPORTED_MODULE_2__math_math__[\"a\" /* default */].sin(rot), 2);\n        var asqr = __WEBPACK_IMPORTED_MODULE_2__math_math__[\"a\" /* default */].pow(scale[0] * this._radius, 2);\n        var bsqr = __WEBPACK_IMPORTED_MODULE_2__math_math__[\"a\" /* default */].pow(scale[1] * this._radius, 2);\n        var A = __WEBPACK_IMPORTED_MODULE_2__math_math__[\"a\" /* default */].sqrt(bsqr * sinsqr + asqr * cossqr);\n        var B = __WEBPACK_IMPORTED_MODULE_2__math_math__[\"a\" /* default */].sqrt(asqr * sinsqr + bsqr * cossqr);\n        __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"initCenterExtents\"](this._aabox, pos, [A, B]);\n        this._geomDirty = false;\n        this._boundsOutOfDate = false;\n      }\n    }\n    /**\n     * Draws the circle using a 2d rendering context. Called by the BaseShape\n     * class\n     * @param  {CanvasRenderingContext2d} ctx 2d rendering context\n     * @override\n     */\n\n  }, {\n    key: \"_draw\",\n    value: function _draw(ctx) {\n      ctx.arc(0, 0, this._radius, 0, __WEBPACK_IMPORTED_MODULE_2__math_math__[\"a\" /* default */].TWO_PI, false);\n    }\n    /**\n     * Called to convert the shape to a serializable JSON object\n     * @return {object}\n     * @override\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Object.assign({\n        type: \"Circle\",\n        // NOTE: this much match the name of the class\n        radius: this.radius\n      }, _get(_getPrototypeOf(Circle.prototype), \"toJSON\", this).call(this));\n    }\n  }, {\n    key: \"radius\",\n    set: function set(radius) {\n      if (typeof radius !== \"number\") {\n        throw new Error(\"Radius must be a number\");\n      }\n\n      if (radius !== this._radius) {\n        var prev = this._radius;\n        this._radius = radius;\n        this._geomDirty = true; // dirty needs to be set before firing event\n\n        this.fire(\"changed:geom\", {\n          attr: \"radius\",\n          prevVal: prev,\n          currVal: this._radius\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Gets the current radius of the circle\n     * @return {number}\n     */\n    ,\n    get: function get() {\n      return this._radius;\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this.radius * 2;\n    }\n    /**\n     * Gets the untransformed height of the circle\n     * @return {number}\n     */\n\n  }, {\n    key: \"height\",\n    get: function get() {\n      return this.radius * 2;\n    }\n  }]);\n\n  return Circle;\n}(__WEBPACK_IMPORTED_MODULE_1__base_shape_js__[\"a\" /* default */]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///38\n");

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Poly; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__poly_line__ = __webpack_require__(12);\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\nvar Constants = {\n  MINIMUM_POINTS: 3\n};\n\nvar Poly =\n/*#__PURE__*/\nfunction (_PolyLine) {\n  _inherits(Poly, _PolyLine);\n\n  function Poly(opts) {\n    var _this;\n\n    _classCallCheck(this, Poly);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Poly).call(this, opts));\n\n    if (_this._verts.length < Constants.MINIMUM_POINTS) {\n      throw new Error(\"Poly shapes must be initialized with an array of 2d points and contain at least 3 points\");\n    }\n\n    return _this;\n  }\n\n  _createClass(Poly, [{\n    key: \"removeVert\",\n    value: function removeVert(vertIndex) {\n      if (this._verts.length < Constants.MINIMUM_POINTS) {\n        throw new Error(\"Cannot remove vertex \".concat(vertIndex, \". It would result in a poly with < 3 points. A poly must contain at least 3 points.\"));\n      }\n\n      _get(_getPrototypeOf(Poly.prototype), \"removeVert\", this).call(this, vertIndex);\n    }\n  }, {\n    key: \"_draw\",\n    value: function _draw(ctx) {\n      var rtn = false;\n\n      if (this._verts.length >= Constants.MINIMUM_POINTS) {\n        ctx.moveTo(this._verts[0][0], this._verts[0][1]);\n\n        for (var i = 1; i < this._verts.length; i += 1) {\n          ctx.lineTo(this._verts[i][0], this._verts[i][1]);\n        }\n\n        ctx.closePath();\n        rtn = true;\n      }\n\n      return rtn;\n    } // eslint-disable-next-line indent\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Object.assign(_get(_getPrototypeOf(Poly.prototype), \"toJSON\", this).call(this), {\n        /* eslint-disable  indent */\n        type: \"Poly\" // NOTE: this much match the name of the class\n        // This is also supplied after the super.toJSON()\n        // so that this type overrides the parent class's\n        // type\n\n        /* eslint-enable indent */\n\n      });\n    }\n  }]);\n\n  return Poly;\n}(__WEBPACK_IMPORTED_MODULE_0__poly_line__[\"a\" /* default */]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zaGFwZXMvcG9seS5qcz8zNmZiIl0sIm5hbWVzIjpbIkNvbnN0YW50cyIsIk1JTklNVU1fUE9JTlRTIiwiUG9seSIsIm9wdHMiLCJfdmVydHMiLCJsZW5ndGgiLCJFcnJvciIsInZlcnRJbmRleCIsImN0eCIsInJ0biIsIm1vdmVUbyIsImkiLCJsaW5lVG8iLCJjbG9zZVBhdGgiLCJPYmplY3QiLCJhc3NpZ24iLCJ0eXBlIiwiUG9seUxpbmUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7QUFFQSxJQUFNQSxTQUFTLEdBQUc7QUFDaEJDLGdCQUFjLEVBQUU7QUFEQSxDQUFsQjs7SUFJcUJDLEk7Ozs7O0FBQ25CLGdCQUFZQyxJQUFaLEVBQWtCO0FBQUE7O0FBQUE7O0FBQ2hCLDhFQUFNQSxJQUFOOztBQUNBLFFBQUksTUFBS0MsTUFBTCxDQUFZQyxNQUFaLEdBQXFCTCxTQUFTLENBQUNDLGNBQW5DLEVBQW1EO0FBQ2pELFlBQU0sSUFBSUssS0FBSixDQUNKLDBGQURJLENBQU47QUFHRDs7QUFOZTtBQU9qQjs7OzsrQkFFVUMsUyxFQUFXO0FBQ3BCLFVBQUksS0FBS0gsTUFBTCxDQUFZQyxNQUFaLEdBQXFCTCxTQUFTLENBQUNDLGNBQW5DLEVBQW1EO0FBQ2pELGNBQU0sSUFBSUssS0FBSixnQ0FDb0JDLFNBRHBCLHlGQUFOO0FBR0Q7O0FBRUQsMkVBQWlCQSxTQUFqQjtBQUNEOzs7MEJBRUtDLEcsRUFBSztBQUNULFVBQUlDLEdBQUcsR0FBRyxLQUFWOztBQUNBLFVBQUksS0FBS0wsTUFBTCxDQUFZQyxNQUFaLElBQXNCTCxTQUFTLENBQUNDLGNBQXBDLEVBQW9EO0FBQ2xETyxXQUFHLENBQUNFLE1BQUosQ0FBVyxLQUFLTixNQUFMLENBQVksQ0FBWixFQUFlLENBQWYsQ0FBWCxFQUE4QixLQUFLQSxNQUFMLENBQVksQ0FBWixFQUFlLENBQWYsQ0FBOUI7O0FBQ0EsYUFBSyxJQUFJTyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEtBQUtQLE1BQUwsQ0FBWUMsTUFBaEMsRUFBd0NNLENBQUMsSUFBSSxDQUE3QyxFQUFnRDtBQUM5Q0gsYUFBRyxDQUFDSSxNQUFKLENBQVcsS0FBS1IsTUFBTCxDQUFZTyxDQUFaLEVBQWUsQ0FBZixDQUFYLEVBQThCLEtBQUtQLE1BQUwsQ0FBWU8sQ0FBWixFQUFlLENBQWYsQ0FBOUI7QUFDRDs7QUFDREgsV0FBRyxDQUFDSyxTQUFKO0FBQ0FKLFdBQUcsR0FBRyxJQUFOO0FBQ0Q7O0FBQ0QsYUFBT0EsR0FBUDtBQUNELEssQ0FFRDs7Ozs2QkFDUztBQUNQLGFBQU9LLE1BQU0sQ0FBQ0MsTUFBUCxtRUFBOEI7QUFDbkM7QUFDQUMsWUFBSSxFQUFFLE1BRjZCLENBRXRCO0FBQ2I7QUFDQTtBQUNBOztBQUNBOztBQU5tQyxPQUE5QixDQUFQO0FBUUQ7Ozs7RUEzQytCQywyRCIsImZpbGUiOiIzOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiXG5cbmltcG9ydCBQb2x5TGluZSBmcm9tIFwiLi9wb2x5LWxpbmVcIlxuXG5jb25zdCBDb25zdGFudHMgPSB7XG4gIE1JTklNVU1fUE9JTlRTOiAzXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvbHkgZXh0ZW5kcyBQb2x5TGluZSB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcihvcHRzKVxuICAgIGlmICh0aGlzLl92ZXJ0cy5sZW5ndGggPCBDb25zdGFudHMuTUlOSU1VTV9QT0lOVFMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJQb2x5IHNoYXBlcyBtdXN0IGJlIGluaXRpYWxpemVkIHdpdGggYW4gYXJyYXkgb2YgMmQgcG9pbnRzIGFuZCBjb250YWluIGF0IGxlYXN0IDMgcG9pbnRzXCJcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICByZW1vdmVWZXJ0KHZlcnRJbmRleCkge1xuICAgIGlmICh0aGlzLl92ZXJ0cy5sZW5ndGggPCBDb25zdGFudHMuTUlOSU1VTV9QT0lOVFMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYENhbm5vdCByZW1vdmUgdmVydGV4ICR7dmVydEluZGV4fS4gSXQgd291bGQgcmVzdWx0IGluIGEgcG9seSB3aXRoIDwgMyBwb2ludHMuIEEgcG9seSBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgMyBwb2ludHMuYFxuICAgICAgKVxuICAgIH1cblxuICAgIHN1cGVyLnJlbW92ZVZlcnQodmVydEluZGV4KVxuICB9XG5cbiAgX2RyYXcoY3R4KSB7XG4gICAgbGV0IHJ0biA9IGZhbHNlXG4gICAgaWYgKHRoaXMuX3ZlcnRzLmxlbmd0aCA+PSBDb25zdGFudHMuTUlOSU1VTV9QT0lOVFMpIHtcbiAgICAgIGN0eC5tb3ZlVG8odGhpcy5fdmVydHNbMF1bMF0sIHRoaXMuX3ZlcnRzWzBdWzFdKVxuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLl92ZXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjdHgubGluZVRvKHRoaXMuX3ZlcnRzW2ldWzBdLCB0aGlzLl92ZXJ0c1tpXVsxXSlcbiAgICAgIH1cbiAgICAgIGN0eC5jbG9zZVBhdGgoKVxuICAgICAgcnRuID0gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gcnRuXG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW5kZW50XG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihzdXBlci50b0pTT04oKSwge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgIGluZGVudCAqL1xuICAgICAgdHlwZTogXCJQb2x5XCIgLy8gTk9URTogdGhpcyBtdWNoIG1hdGNoIHRoZSBuYW1lIG9mIHRoZSBjbGFzc1xuICAgICAgLy8gVGhpcyBpcyBhbHNvIHN1cHBsaWVkIGFmdGVyIHRoZSBzdXBlci50b0pTT04oKVxuICAgICAgLy8gc28gdGhhdCB0aGlzIHR5cGUgb3ZlcnJpZGVzIHRoZSBwYXJlbnQgY2xhc3Mnc1xuICAgICAgLy8gdHlwZVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBpbmRlbnQgKi9cbiAgICB9KVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zaGFwZXMvcG9seS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Point; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__base_shape_js__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core_mat2d__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__math_math__ = __webpack_require__(6);\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n/**\n * @typedef {object} PointOptions\n * @property {number} [size=5] Size of the point in pixels\n */\n\n/**\n * @class Point shape class. A point differs from a circle in that\n *        a point's size is defined in screen/pixel space whereas\n *        a circle is defined in world space.\n * @extends {BaseShape}\n */\n\nvar Point =\n/*#__PURE__*/\nfunction (_BaseShape) {\n  _inherits(Point, _BaseShape);\n\n  /**\n   * Creates a new point shape\n   * @param  {PointOptions} [opts]\n   * @return {Point}\n   */\n  function Point(opts) {\n    var _this;\n\n    _classCallCheck(this, Point);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Point).call(this, opts));\n    _this._size = 5;\n\n    if (typeof opts.size !== \"undefined\") {\n      _this.size = opts.size;\n    }\n\n    __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"initCenterExtents\"](_this._aabox, [0, 0], [_this._radius, _this._radius]);\n\n    _this.translate(opts.x || 0, opts.y || 0);\n\n    return _this;\n  }\n  /**\n   * Sets the size of the point\n   * @param  {nuber} size Size of the point in pixels\n   * @return {Pixel}      this\n   * @fires {Shape#geomChanged}\n   * @throws {Error} If size is not a valid number\n   */\n\n\n  _createClass(Point, [{\n    key: \"_updateAABox\",\n\n    /**\n     * Called when the bounding box requires updating\n     * @private\n     * @override\n     */\n    value: function _updateAABox() {\n      if (this._geomDirty || this._boundsOutOfDate) {\n        var pos = this._pos;\n        var scale = this._scale;\n        var rot = __WEBPACK_IMPORTED_MODULE_3__math_math__[\"a\" /* default */].DEG_TO_RAD * this._rotDeg;\n        var cossqr = __WEBPACK_IMPORTED_MODULE_3__math_math__[\"a\" /* default */].pow(__WEBPACK_IMPORTED_MODULE_3__math_math__[\"a\" /* default */].cos(rot), 2);\n        var sinsqr = __WEBPACK_IMPORTED_MODULE_3__math_math__[\"a\" /* default */].pow(__WEBPACK_IMPORTED_MODULE_3__math_math__[\"a\" /* default */].sin(rot), 2);\n        var asqr = __WEBPACK_IMPORTED_MODULE_3__math_math__[\"a\" /* default */].pow(scale[0] * this._size, 2);\n        var bsqr = __WEBPACK_IMPORTED_MODULE_3__math_math__[\"a\" /* default */].pow(scale[1] * this._size, 2);\n        var A = __WEBPACK_IMPORTED_MODULE_3__math_math__[\"a\" /* default */].sqrt(bsqr * sinsqr + asqr * cossqr);\n        var B = __WEBPACK_IMPORTED_MODULE_3__math_math__[\"a\" /* default */].sqrt(asqr * sinsqr + bsqr * cossqr);\n        __WEBPACK_IMPORTED_MODULE_0__core_aabox2d__[\"initCenterExtents\"](this._aabox, pos, [A, B]);\n        this._geomDirty = false;\n        this._boundsOutOfDate = false;\n      }\n    }\n    /**\n     * Draws the point using a 2d rendering context. Called by the BaseShape\n     * class\n     * @param  {CanvasRenderingContext2d} ctx 2d rendering context\n     * @override\n     */\n\n  }, {\n    key: \"_draw\",\n    value: function _draw(ctx) {\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      var pos = [0, 0];\n      __WEBPACK_IMPORTED_MODULE_2__core_mat2d__[\"a\" /* default */].svd(pos, null, null, this._fullXform);\n      ctx.arc(pos[0], pos[1], this._size, 0, __WEBPACK_IMPORTED_MODULE_3__math_math__[\"a\" /* default */].TWO_PI, false);\n    }\n    /**\n     * Called to convert the shape to a serializable JSON object\n     * @return {object}\n     * @override\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Object.assign({\n        type: \"Point\",\n        // NOTE: this much match the name of the class\n        size: this.size\n      }, _get(_getPrototypeOf(Point.prototype), \"toJSON\", this).call(this));\n    }\n  }, {\n    key: \"size\",\n    set: function set(size) {\n      if (typeof size !== \"number\") {\n        throw new Error(\"Radius must be a number\");\n      }\n\n      if (size !== this._size) {\n        var prev = this._size;\n        this._size = size;\n        this._geomDirty = true; // dirty needs to be set before firing event\n\n        this.fire(\"changed:geom\", {\n          attr: \"size\",\n          prevVal: prev,\n          currVal: this._size\n        });\n      }\n    }\n    /**\n     * Gets the current size of the point\n     * @return {number}\n     */\n    ,\n    get: function get() {\n      return this._size;\n    }\n  }]);\n\n  return Point;\n}(__WEBPACK_IMPORTED_MODULE_1__base_shape_js__[\"a\" /* default */]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///40\n");

/***/ })
/******/ ]);
});